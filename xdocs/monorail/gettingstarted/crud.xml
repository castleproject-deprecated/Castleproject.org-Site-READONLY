<?xml version="1.0"?>
<document order="60">
  <properties>
    <title>Creating a CRUD page with DataBinder</title>
  </properties>

  <body>

<intro>

<p>
CRUD stands for Create, Retrieve, Update and Delete. 
Most applications have some kind of CRUD funcionality, 
and we can assume that every programmer had to deal with 
CRUD at some point.
</p>

<p>
As you remember, we have created a <tt>Supplier</tt>
and <tt>Product</tt> classes. We used scaffolding to create the
crud for the <tt>Supplier</tt> class. Now let's code 
the CRUD for the <tt>Product</tt> class manually. You'll see 
that it is also something really simple.
</p>

<p>
The first thing you must do is create the 
<tt>ProductController</tt>:
</p>

<pre format="cs">
namespace GettingStartedSample.Controllers
{
	using System;
	using Castle.MonoRail.Framework;
	using GettingStartedSample.Models;

	[Layout("default"), Rescue("generalerror")]
	public class ProductController : SmartDispatcherController
	{
	}
}</pre>

<p>
Now we are ready.
</p>

</intro>

<section>
	<title>Listing</title>

<p>
Create a <tt>List</tt> action on the controller:
</p>
	
	<pre format="cs">
public void List()
{
	PropertyBag["products"] = Product.FindAll();
}</pre>

<p>
This code makes all products available to the view. Now
create the <tt>list.vm</tt>:
</p>

<pre format="html"><![CDATA[
<h3>Product list</h3>

<p>
<a href="new.rails">Create new Product</a>
</p>

<table width="100%" border="1" cellpadding="2" cellspacing="0">
<tr>
	<th>Id</th>
	<th>Name</th>
	<th>Supplier</th>
	<th>&nbsp;</th>
</tr>
#foreach($product in $products)
<tr>
	<td align="center">$product.Id</td>
	<td align="center">$product.Name</td>
	<td align="center">$product.Supplier.Name</td>
	<td align="center">
		<a href="edit.rails?id=${product.Id}">Edit</a> | 
		<a href="delete.rails?id=${product.Id}">Delete</a>
	</td>
</tr>
#end
</table>]]></pre>
	
	<p>
	Test your working accessing <tt>/product/list.rails</tt>
	</p>
	
	<p>
	<img relative="images/monorail/gs_crud_2.png" />
	</p>
	
</section>

<section>
	<title>Creating</title>

<p>
To insert a new product we will use two actions:
<ul>
<li>New: which will present the form</li>
<li>Create: which uses the data supplied on the form to create the Product on the database</li>
</ul>
</p>
	
	<pre format="cs">
public void New()
{
	PropertyBag["suppliers"] = Supplier.FindAll();
}

public void Create([DataBind("product")] Product prod)
{
	try
	{
		prod.Create();
	
		RedirectToAction("list");
	}
	catch(Exception ex)
	{
		Flash["error"] = ex.Message;
		Flash["product"] = prod;
		
		RedirectToAction("new");
	}
}</pre>

<p>
The <tt>New</tt> action makes all suppliers available to
the view. This is required to populate a select element with all suppliers available.
</p>

<p>
The <tt>new.vm</tt> view follows:
</p>


<pre format="html"><![CDATA[
<h3>New Product</h3>

#if($Flash.error)
<p style="color: red; font-weight: bold;">
	$Flash.error
</p>
#end

<form action="create.rails" method="post">

	<p>
	Name: $FormHelper.TextField("product.name")
	</p>

	<p>
	Price: $FormHelper.TextFieldFormat("product.price", "000.00")
	</p>

	<p>
	Supplier: $FormHelper.Select("product.supplier.id", $suppliers, "%{value='Id', text='Name'}")
	</p>

	<hr/>

	<p>
	<input type="submit" value="Create" />
	</p>

</form>]]></pre>
	
	<p>
	Test your working accessing <tt>/product/new.rails</tt>
	</p>
	
	<p>
	<img relative="images/monorail/gs_crud_1.png" />
	</p>
	
	
</section>
	
<section>
	<title>Updating</title>

	<p>
	Updating is not very different from creating. 
	First create two actions: <tt>Edit</tt> and <tt>Update</tt>.
	</p>
	
	<pre format="cs">
public void Edit(int id)
{
	PropertyBag["product"] = Product.FindById(id);
	PropertyBag["suppliers"] = Supplier.FindAll();
}

public void Update([DataBind("product")] Product prod)
{
	try
	{
		prod.Update();
	
		RedirectToAction("list");
	}
	catch(Exception ex)
	{
		Flash["error"] = ex.Message;
		Flash["product"] = prod;
		
		RedirectToAction("edit", "id=" + prod.Id);
	}
}</pre>

<p>
We can also use a different <tt>Edit</tt> overload
that will be used when the Update catch block redirects
it back to the <tt>Edit</tt>:
</p>

	<pre format="cs">
public void Edit(int id, [FlashBinder] Product product)
{
	PropertyBag["suppliers"] = Supplier.FindAll();
}</pre>

<p>
The <tt>edit.vm</tt> view is pratically the same as the <tt>new.vm</tt>.
The <tt>FormHelper</tt> is clever enough to populate the fields and 
select the correct item on the <tt>select</tt> element.
</p>


<pre format="html"><![CDATA[
<h3>Edit Product</h3>

#if($Flash.error)
<p style="color: red; font-weight: bold;">
	$Flash.error
</p>
#end

<form action="update.rails" method="post">

$FormHelper.HiddenField("product.id")

	<p>
	Name: $FormHelper.TextField("product.name")
	</p>

	<p>
	Price: $FormHelper.TextFieldFormat("product.price", "000.00")
	</p>

	<p>
	Supplier: $FormHelper.Select("product.supplier.id", $suppliers, "%{value='Id', text='Name'}")
	</p>

	<hr/>

	<p>
	<input type="submit" value="Update" />
	</p>

</form>]]></pre>
	
</section>
	
<section>
	<title>Deleting</title>

	<p>
	Deleting is the easiest one. Add the <tt>Delete</tt>
	action:
	</p>

	<pre format="cs">
public void Delete(int id)
{
	Product product = Product.FindById(id);
	
	product.Delete();
	
	RedirectToAction("list");
}
</pre>

	<p>
	So, do you miss WebForms at all?
	</p>

	<p>
	Proceed with <a href="more.html">Getting more</a>.
	</p>

	
</section>


</body>
</document>
