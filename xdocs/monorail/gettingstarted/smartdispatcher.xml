<?xml version="1.0"?>
<document order="30">
  <properties>
    <title>Using the SmartDispatcherController</title>
  </properties>

  <body>

<intro>

<p>
Although our controller extends from <tt>SmartDispatcherController</tt>
we haven't used any of its feature. The <tt>SmartDispatcherController</tt>, 
as the name implies, implements a smart way to invoke actions. Query string entries
and form entries can be bound actions parameters. For example, suppose you have
the following form on a view:
</p>

<pre format="html"><![CDATA[
<form action="/home/saveinformation.rails" method="post" >

	<input type="text" name="name" value="John doe" />
	
	<input type="text" name="age" value="30" />
	
	<input type="text" name="dob" value="07-16-1979" />

	
	<input type="submit" value="Send" />

</form>]]></pre>

	<p>
	You can create the action <tt>SaveInformation</tt> in a way 
	that it will expect the parameters:
	</p>
	
	<pre format="cs">
public class HomeController : SmartDispatcherController
{
	public void Index()
	{
	}
	
	public void SaveInformation(String name, int age, DateTime dob)
	{
		// work work work
		
		// Send the user back to the index 
		RedirectToAction("index");
	}
}</pre>

	<p>
	The code above saves you the hassle of 
	using the <tt>Params</tt> or <tt>Form</tt> name-value collections.
	It is basically equivalent to the following code:
	</p>

	<pre format="cs">
public class HomeController : SmartDispatcherController
{
	public void Index()
	{
	}
	
	public void SaveInformation()
	{
		String name = Params["name"];
		int age = Convert.ToInt32(Params["age"]);
		DateTime dob = Convert.ToDateTime(Params["dob"]);
	
		// work work work
		
		// Send the user back to the index 
		RedirectToAction("index");
	}
}</pre>

	<p>
	But much cleaner and simpler. It is able to
	handle a diversity of types, for more on this check the documentation.
	</p>

	</intro>

<section>
	<title>Using the DataBind attribute</title>
	
	<p>
	You can also use the <tt>SmartDispatcherController</tt>
	to populate entire objects. To exemplify that lets create
	a contact form so the user can contact
	some department from our ficticious company.
	</p>
	
	<p>
	
	<ol>
	
	<li>
	<p>
	Create a new controller named <tt>ContactController</tt> and include two actions:
	<tt>ContactForm</tt> and <tt>SendContactMessage</tt>.
	</p>
	
	<pre format="cs">
namespace GettingStartedSample.Controllers
{
	using System;
	using Castle.MonoRail.Framework;

	[Layout("default"), Rescue("generalerror")]
	public class ContactController : SmartDispatcherController
	{
		public void ContactForm()
		{
		}
		
		public void SendContactMessage()
		{
		}
	}
}</pre>
	
	</li>
	
	<li>
	<p>
	Create a class <tt>Contact</tt> that represents the contact
	information.
	</p>
	
	<pre format="cs">
public class Contact
{
	private string from;
	private string area;
	private string subject;
	private string message;

	public string From
	{
		get { return from; }
		set { from = value; }
	}

	public string Area
	{
		get { return area; }
		set { area = value; }
	}

	public string Subject
	{
		get { return subject; }
		set { subject = value; }
	}

	public string Message
	{
		get { return message; }
		set { message = value; }
	}
}</pre>
	
	</li>
	
	
	<li>
	<p>
	Now create the view for the <tt>ContactForm</tt> action. The view name 
	should be <tt>contactform.vm</tt> and should be put on <tt>Views\Contact</tt> folder.
	</p>
	
	<pre format="html"><![CDATA[
<h2>Contact us!</h2>

<p>
We are interested in hearing from you.
</p>

<form action="SendContactMessage.rails" method="post">

<p>
From: $FormHelper.TextField("contact.from")
</p>

<p>
Area: $FormHelper.TextField("contact.area") (Sales, Support)
</p>

<p>
Subject: $FormHelper.TextField("contact.subject", "%{size='30'}")
</p>

<p>
Message: <br/> 
$FormHelper.TextArea("contact.message", "%{cols='35', rows='6'}")
</p>

<hr />

<p>
<input type="submit" value="Send the message" />
</p>

</form>]]></pre>
	
	<p>
	Note that we used the <tt>FormHelper</tt> which handles generation
	of form elements. You can (and should) learn more information about helpers
	and especially the <tt>FormHelper</tt> on the documentation.
	</p>
	
	<p>
	You should also note that the each generated field on the html 
	will be prefixed with <tt>contact</tt>, for example <tt>contact.name</tt>. 
	This is important as to use MonoRail's data bind you must
	prefix the form elements to avoid name clashes.
	</p>
	
	</li>
	
	<li>
	<p>
	Finally change the action to bind the form data to the <tt>Contact</tt>
	class:
	</p>
	
	<pre format="cs">
public void SendContactMessage([DataBind("contact")] Contact contact)
{
	// Pretend to save the contact ...
	
	// ..work work work..
	
	// Now lets add the contact to the property bag
	// so we can render a nice message back to the user
	
	PropertyBag["contact"] = contact;
	
	RenderView("confirmation");
}</pre>

	<p>
	We used the <tt>DataBindAttribute</tt> on the action parameter. Its first
	parameter is the prefix used on the form. In our case it is <tt>contact</tt>.
	When this action is invoked, MonoRail will try to match the form
	data with the properties on the <tt>Contact</tt> class
	and create an new instance populating the properties.
	</p>
	
	</li>
	
	<li>
	<p>
	It would be nice to create the <tt>confirmation</tt> view too:
	</p>
	
	<pre format="html"><![CDATA[
<p>

Thanks $!contact.from, we have received your message and will
get back to your shortly.

</p>
	]]></pre>
	
	</li>
	
	
	</ol>
	</p>
	
	<p>
	Now test your work by running the application
	and accessing <tt>/contact/contactform.rails</tt>. Fill the form 
	elements and submit it.
	</p>
	
	<p>
	<img relative="images/monorail/gs_contact_1.png" />
	</p>

	<p>
	<img relative="images/monorail/gs_contact_2.png" />
	</p>

	<p>
	Proceed with <a href="ar.html">Bringing ActiveRecord to the party</a>.
	</p>
	
	
</section>
	

	


</body>
</document>
