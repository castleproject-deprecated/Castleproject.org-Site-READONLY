<?xml version="1.0"?>
<document order="40">
  <properties>
    <title>Bringing ActiveRecord to the party</title>
  </properties>

  <body>

<intro>

<p>
In order to explorer some more realistics scenarios 
you will face in daily developments, why not use ActiveRecord
as our database access approach?
</p>

<p>
All you have to do is reference the assemblies, set up a
database and configure and initialize ActiveRecord:
</p>

<p>

<ol>

<li>
<p>First of all, add references to the following assemblies:

<ul>
<li>Castle.ActiveRecord.dll</li>
<li>Castle.DynamicProxy.dll</li>
<li>Iesi.Collections.dll</li>
<li>log4net.dll</li>
<li>NHibernate.dll</li>
<li>NHibernate.ByteCode.Castle.dll</li>
</ul>
</p>

</li>

<li>
<p>
Now include a section on the <tt>web.config</tt>
so you can keep ActiveRecord's configuration there:
</p>

<pre format="html"><![CDATA[
<configuration>
	<configSections>
		<section 
			name="monorail" 
			type="Castle.MonoRail.Framework.Configuration.MonoRailSectionHandler, Castle.MonoRail.Framework" />
		<section 
			name="activerecord"
			type="Castle.ActiveRecord.Framework.Config.ActiveRecordSectionHandler, Castle.ActiveRecord" />
	</configSections>
	
	<activerecord isWeb="true">
	    
		<config>
			<add 
				key="connection.driver_class" 
				value="NHibernate.Driver.SqlClientDriver" />
			<add 
				key="dialect"                 
				value="NHibernate.Dialect.MsSql2005Dialect" />
			<add 
				key="connection.provider"     
				value="NHibernate.Connection.DriverConnectionProvider" />
			<add 
				key="connection.connection_string" 
				value="Data Source=.;Initial Catalog=test;Integrated Security=SSPI" />
			<add
			    key="proxyfactory.factory_class"
			    value="NHibernate.ByteCode.Castle.ProxyFactoryFactory, NHibernate.ByteCode.Castle"  />
		</config>
	    
	</activerecord>
]]></pre>

	<note>
	<p>
	The configuration above uses SQL Server 2005. If you are using a different
	database you need to change the dialect. Please refer to the
<a href="../documentation/trunk/manual/configurationref.html">Xml Configuration Reference</a> 
	document for more information.
	</p>
	</note>

	<p>
	This configuration access a database catalog named <tt>test</tt>. 
	Make sure it exists or change the configuration to access an existing database catalog.
	</p>

</li>

<li>
<p>Create two models to represent products and suppliers. You can create
the classes on the <tt>Models</tt> folders</p>

<p>The <tt>Supplier.cs</tt>:</p>

<pre format="cs"><![CDATA[
namespace GettingStartedSample.Models
{
	using Castle.ActiveRecord;

    [ActiveRecord]
    public class Supplier : ActiveRecordBase<Supplier>
    {
        [PrimaryKey]
        public int Id { get; set; }

        [Property]
        public string Name { get; set; }
    }
}]]></pre>

<p>The <tt>Product.cs</tt>:</p>

<pre format="cs"><![CDATA[
namespace GettingStartedSample.Models
{
	using Castle.ActiveRecord;

    [ActiveRecord]
    public class Product : ActiveRecordBase<Product>
    {
        [PrimaryKey]
        public int Id { get; set; }

        [Property]
        public string Name { get; set; }

        [Property]
        public decimal Price { get; set; }

        [BelongsTo("SupplierId")]
        public Supplier Supplier { get; set; }
    }
}
}]]></pre>

</li>

<li>
<p>
The last step is to initialize ActiveRecord passing the configuration.
The best place to do that in a web application is on the global.asax related
class. So create a <tt>Global.asax</tt> if none exists and on the related
class, use the <tt>Application_OnStart</tt> event to initialize ActiveRecord:
</p>

<p>
The <tt>Global.asax</tt> file:
</p>

<pre format="html"><![CDATA[
<%@ Application Codebehind="Global.asax.cs" Inherits="GettingStarted.Global" Language="C#" %>]]></pre>

<p>
The <tt>Global.asax.cs</tt> file:
</p>

<pre format="cs">
namespace GettingStartedSample
{
	using System;
    using System.Web;
    using Castle.ActiveRecord;
    using Castle.ActiveRecord.Framework.Config;
    using Models;
    public class Global : HttpApplication
    {

        protected void Application_Start(object sender, EventArgs e)
        {
            ActiveRecordStarter.Initialize(typeof(Supplier).Assembly, ActiveRecordSectionHandler.Instance);

            // If you want to let ActiveRecord create the schema for you:
            ActiveRecordStarter.CreateSchema();
        }
    }
}
</pre>

</li>

</ol>

</p>

<p>
The next time you run the application it will create the
tables for you, so you can comment the line that invokes <tt>CreateSchema</tt> after
that.
</p>

<p>
In the following pages we will have some fun using scaffolding and creating
CRUD pages.
</p>

<p>
Proceed with <a href="scaffolding.html">Using ActiveRecord Scaffolding</a>.
</p>

</intro>

	
	

</body>
</document>
