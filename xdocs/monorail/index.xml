<?xml version="1.0"?>
<document>
  <properties>
    <title>MonoRail</title>
  </properties>

  <body>

<intro>
<p>
MonoRail is a MVC Web Framework inspired by <a href="http://ap.rubyonrails.org">Action Pack</a>.
</p>

<p>
MonoRail differs from the standard 
<a href="http://msdn.microsoft.com/asp.net/learning/default.aspx">WebForms</a> 
way of development as it enforces separation of concerns; controllers just handle application flow, models represent the data, and the view is just concerned about presentation logic. Consequently, you write less code and end up with a more maintainable application.
</p>

<p>
<i>Although the project name is MonoRail, we do not have any affiliation with the Mono project. MonoRail runs on Microsoft .Net 1.1, 2.0 and Mono.</i>
</p>

</intro>

<toc/>

<section id="WhyWouldIUseIt">
<title>Why would I use it?</title>

<p>
MonoRail is a simplification of the standard WebForms paradigm. By using MonoRail you end up
with small controllers and small views. Each one have its own distinct concern. 
</p>

<p>
It also handles binding of data sent from forms, completely
removing the need for annoying and repetitive code.
</p>

<p>
MonoRail can be extended in several directions, so it is easier to 
reuse pieces for different applications. That dramatically reduces the time-to-market.
</p>
</section>

<section id="WhyWouldIUseIt">
<title>Why would I <b>not</b> use it?</title>

<p>
Although MonoRail can use WebForms as one of its view engine, 
it does not work as smoothly as others engines. 
</p>

<p>
If your project depend too much on third party Web controls
or if you IT team skill set is totally centered around WebForms, MonoRail would not 
be a good choice. 
</p>

<p>
Developers that were introduced to Web developement using pure WebForms also lack
the basics http protocol concepts required to use MonoRail (or any other web framework).
</p>

</section>


</body>
</document>
