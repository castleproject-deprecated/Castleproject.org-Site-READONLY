<?xml version="1.0"?>
<document order="9">
  <properties>
    <title>Exception Chaining Extension</title>
  </properties>

  <body>

<intro>

<p>
The Exception Chaining extension allow you to execute one or more 
steps in response to an exception threw by an action. The steps 
are called Exception Handlers and must implement <tt>IExceptionHandler</tt> 
(or <tt>IConfigurableHandler</tt> if they need external configuration).
</p>

</intro>

<section id="Usingtheextension">
	<title>Using the extension</title>
	
<p>
The extension does not do much more than delegating 
the execution to the installed handlers. You can 
create handlers to provide actions and even 
introduce new semantics. As the handlers are 
chained together, you can even implement a handler 
that decides if the execution chain should continue 
or stop right there. For example, suppose you want 
that only exceptions that extends <tt>SqlException</tt> be 
e-mailed to you. In this case you could write this simple handler:
</p>

<pre format="cs">
public class MyFilterHandler : AbstractExceptionHandler
{
	public override void Process(IRailsEngineContext context, IServiceProvider serviceProvider)
	{
		if (context.LastException is SqlException)
		{
			InvokeNext(context, serviceProvider);
		}
	}
}
</pre>

<p>
And of course, register this handler before others. 
</p>

</section>

<section id="TheEmailHandler">
	<title>The EmailHandler</title>

<p>
MonoRail comes with just one exception handler: 
<tt>EmailHandler</tt>. 
This handler e-mails the exception details and the environment 
details to a specified e-mail address. 
</p>

<p>
This handler requires the attribute mailto and you 
can optionaly inform the mailfrom as well. 
Also, you must provide the smtpHost in the 
 configuration -- see 
<a href="../manual/configurationref.html">MonoRail Configuration Reference</a>
 for more details on this one.
</p>

<pre format="html"><![CDATA[
<monorail smtpHost="my.smtp.server">
	<extensions>
		<extension 
		type="Castle.MonoRail.Framework.Extensions.ExceptionChaining.ExceptionChainingExtension, Castle.MonoRail.Framework" />
	</extensions>
	<exception>
		<exceptionHandler 
			mailTo="lazydeveloper@mycompany.com" mailFrom="angry.client@client.com" 
			type="Castle.MonoRail.Framework.Extensions.ExceptionChaining.EmailHandler, Castle.MonoRail.Framework" />
	</exception>
</monorail>
]]></pre>

</section>

<section id="IExceptionHandler">
	<title>IExceptionHandler</title>

<p>
The <tt>IExceptionHandler</tt> interface is very straighforward, 
it simply dictates the contract for processing the exception 
information. As they are chained you must be good and check 
if there's a next handler available and if so, delegate the invocation 
to it. It would be also a good behavior if your handler 
implementation doesn't throw exceptions at all.
</p>

<p>
It is also important to note that you can 
use the <tt>AbstractExceptionHandler</tt> to save you some few types.
</p>

</section>

<section id="IConfigurableHandler">
	<title>IConfigurableHandler</title>

<p>
The <tt>IConfigurableHandler</tt> is just an increment the the previous 
interface for those handlers that require configuration information. 
The Configure method is invoked as soon as the handler is instantiated 
and its node on the configuration is passed.
</p>

</section>


<section id="ChangingMonoRailconfiguration">
	<title>Changing MonoRail configuration</title>

<p>
You need to install the extension using the extensions node, 
as usual, and also provide the node <tt>exception</tt> to list the handlers 
you want to install. Please note that they will be installed and chained 
in the same order they were declared.
</p>

<pre><![CDATA[
<monorail customsession="Type name that implements ICustomSessionFactory">
	<extensions>
		<extension 
			type="Castle.MonoRail.Framework.Extensions.ExceptionChaining.ExceptionChainingExtension, Castle.MonoRail.Framework" />
	</extensions>
	<exception>
		<exceptionHandler type="type that implements IExceptionHandler" />
	</exception>
</monorail>
]]></pre>

</section>

</body>
</document>
