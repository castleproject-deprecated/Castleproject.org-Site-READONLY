<?xml version="1.0"?>
<document order="9">
  <properties>
    <title>Layouts</title>
  </properties>

  <body>

<intro>

	<p>
	Layouts allow you to template your site by specifying 
	common html and controls, such as structural html and 
	navigation controls, in one place that are available for any view to use. 
	</p>

	<p>
	Layouts are just standard views, but they need to be created in a 
	folder named <tt>layouts</tt>, notice that it is plural. The <tt>layouts</tt>
	folder needs to be directly under your views root directory.
	</p>
	
	<note>
	<p>
	Note that the extension for the layout files need to 
	match whatever view engine you are using, such as <tt>.aspx</tt>. 
	ASP.NET users that are tempted to use the master page 
	model and use .master will be sadly dissappointed 
	with a 'resource cannot be found' error.
	</p>
	</note>
	
	<p>You can associate a layout with a controller or with an action 
	using the <tt>LayoutAttribute</tt>. For example:
	</p>
	
	<pre format="cs">
using Castle.MonoRail.Framework;

[Layout("application")]
public class CustomerController : Controller
{
	public void Index()
	{
	}
}</pre>

	<p>
	In some scenarios you might want to turn off the layout processing.
	To do so use <tt>CancelLayout</tt> method. There are other cases 
	where you want to render a specific view and 
	turn off layout at the same time. The <tt>RenderView</tt>
	and <tt>RenderSharedView</tt> have overloads to allow you to do that. 
	</p>
	
	<p>
	<table class="commontable">
	<tr>
		<th>Method</th>
	</tr>
	<tr>
		<td><tt>RenderView(String name, bool skipLayout)</tt></td>
	</tr>
	<tr>
		<td><tt>RenderView(String controller, String name, bool skipLayout)</tt></td>
	</tr>
	<tr>
		<td><tt>RenderSharedView(String name, bool skipLayout)</tt></td>
	</tr>
	</table>
	</p>
	
	<p>
	For example:
	</p>

	<pre format="cs">
using Castle.MonoRail.Framework;

[Layout("application")]
public class CustomerController : Controller
{
	public void Index()
	{
		RenderView("welcome", true);
	}
}</pre>	

	<p>
	Each view engine uses a specific approach
	to have layouts working. We will instruct on how to deal with layouts
	on the view engines documents.
	</p>

</intro>


</body>
</document>
