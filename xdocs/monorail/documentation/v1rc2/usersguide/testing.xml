<?xml version="1.0"?>
<document order="80">
<properties>
<title>Unit testing</title>
</properties>

<body>

<intro>

<p>
MonoRail uses the ASP.Net infrastructure to run a web site 
and run tests against it. Originally the idea was to 
supply a custom <tt>web.config</tt> so the web site would run 
with a different configuration (like testing database).
</p>

<p>
Unfortunatelly the ASP.Net infrastructure does not permit
this overriding, so testing can be somewhat limited, or force
you to handle this creatively. For example, in a build process
set up a testing site infrastructure and run the test against it.
</p>

</intro>

<toc/>

<section>
<title>Castle.MonoRail.TestSupport</title>

<p>
<tt>Castle.MonoRail.TestSupport</tt> was created to 
enable easy testing of MonoRail projects. It uses the ASP.Net 
runtime to create mock requests and asserts the response. 
It also exposes the <tt>PropertyBag</tt>, <tt>Flash</tt> and <tt>Session</tt> 
dictionaries so you can write assert for their contents as well.
</p>

<p>
In order to use the ASP.Net runtime, <b>the assembly <tt>Castle.MonoRail.TestSupport.dll</tt> 
must be registered in the GAC</b>. If you have installed Castle using the MSI distribution
this was already done for you. Otherwise, execute:
<pre>
> gacutil /i Castle.MonoRail.TestSupport.dll
</pre>
</p>

<section>
<title>Simple recipe</title>

<p>
<ol>
<li> Create a Class Library project (usually you are going to use the 
same solution of the web project) </li>
<li>
Add references to :
<ul>
<li><tt>nunit.framework</tt></li>
<li><tt>Castle.MonoRail.Framework</tt></li>
<li><tt>Castle.MonoRail.TestSupport</tt></li>
</ul>
</li>
<li> Create test cases class extending AbstractMRTestCase </li>
<li>
Now expose the web application folder to the <tt>AbstractMRTestCase</tt>, you can do it in two ways:
<ul>
<li> Create a configuration file to associate with the AppDomain, or </li>
<li> Simply override the method <tt>GetPhysicalDir</tt> (more about that later) </li>
</ul>
</li>
<li> Finally use the Assert family of methods exposed by <tt>AbstractMRTestCase</tt> </li>
</ol>
</p>

<section>
<title>A simple example from MonoRail test case</title>

<p>
The following class is a snippet of one of the MonoRail test cases:
</p>

<pre format="cs">
using NUnit.Framework;
using Castle.MonoRail.Framework;
using Castle.MonoRail.TestSupport;
[TestFixture]
public class BasicFunctionalityTestCase : AbstractMRTestCase
{
	[Test]
	public void SimpleControllerAction()
	{
		DoGet("home/index.rails");

		AssertSuccess();

		AssertReplyEqualsTo( "My View contents for Home\\Index" );
	}

	[Test]
	public void Flash()
	{
		DoGet("home/flash1.rails");

		AssertSuccess();

		AssertFlashEntryEquals("errormessage", "Some error");
	}

	[Test]
	public void Redirect()
	{
		DoGet("home/redirectAction.rails");

		AssertSuccess();

		AssertRedirectedTo( "/home/index.rails" );
	}

	[Test]
	public void PropertyBag()
	{
		DoGet("home/bag.rails");

		AssertSuccess();

		AssertPropertyBagContains( "CustomerName" );
		AssertPropertyBagEntryEquals( "CustomerName", "hammett" );
		AssertReplyEqualsTo( "\r\nCustomer is hammett\r\n<br/>\r\n123" );
	}

	[Test]
	public void CreateCookie()
	{
		DoGet("cookies/addcookie.rails");

		AssertSuccess();

		AssertReplyEqualsTo( @"My View contents for Cookies\Index" );

		Assert.AreEqual( 2, Response.Cookies.Count );

		AssertHasCookie( "cookiename" );
		AssertHasCookie( "cookiename2" );
		AssertCookieValueEqualsTo( "cookiename", "value" );
		AssertCookieValueEqualsTo( "cookiename2", "value2" );
	}

	[Test]
	public void CreateCookieExpiration()
	{
		DoGet("cookies/AddCookieExpiration.rails");

		AssertSuccess();

		AssertReplyEqualsTo(@"My View contents for Cookies\Index");

		DateTime twoWeeks = DateTime.Now.Add(new TimeSpan(14, 0, 0, 0));

		AssertCookieExpirationEqualsTo("cookiename2", twoWeeks);
		AssertCookieValueEqualsTo("cookiename2", "value");
	}
}
</pre>

<p>
For a complete documentation of supported asserts, 
<a href="Generated_AbstractMRTestCase.html">check the 
API documentation for AbstractMRTestCase</a>.
</p>

</section>

</section>

<section>
<title>Exposing the web site application directory</title>

<p>
As we use the ASP.Net runtime to run the web application, 
we must know the full absolute path for the web application. 
In the case you are confused, web application is the one with the 
web.config and global.asax, not the bin directory.</p>


<section>
<title>Overriding GetPhysicalDir</title>

<p>
When overriding the <tt>GetPhysicalDir</tt> you must return the path to the web application:
</p>

<pre format="cs">
[TestFixture]
public class AccountControllerTestCase : AbstractMRTestCase
{
	...

	protected override String GetPhysicalDir()
	{
		return "../mywebapp";
	}
}
</pre>

<p>
If you return a relative path, it is going to be 
converted based on the executing directory, i.e. the <tt>AppDomain.ApplicationBase</tt>.
</p>

</section>

<section>
<title>External configuration</title>

<p>
Another option is to create a configuration file to your test case project. 
The content might be something like the following:
</p>

<pre format="html">
<![CDATA[
<?xml version="1.0" encoding="utf-8" ?>
<!-- App.config -->
<configuration>
<appSettings>
<add key="web.physical.dir" value="..\TestSite" />
<add key="web.virtual.dir" value="/" />
</appSettings>
</configuration>
]]>
</pre>

<tt>You should not need to override the virtual directory setting in most circumstances.</tt>

<note>
<p>
<b>Visual Studio 2003/2005 hint</b>
</p>
<p>
Create an <tt>App.config</tt> file and a Post Build Event to put the file in the right
folder:	<br/>
Post build event command line: <br/>
<tt>copy $(ProjectDir)\App.config $(TargetPath).config</tt>
</p>
</note>
</section>

</section>

<section>
<title>AbstractMRTestCase Quick Reference</title>


<p>
For a complete documentation of supported asserts, 
<a href="Generated_AbstractMRTestCase.html">check the 
API documentation for AbstractMRTestCase</a>.
</p>

<p>
Views can be tested using a framework for WAT (Web Application Testing), like <a href="http://adamesterline.com/2007/04/23/watin-watir-and-selenium-reviewed/">WatiN, Watir or Selenium</a>.
</p>

</section>

</section>

</body>
</document>
