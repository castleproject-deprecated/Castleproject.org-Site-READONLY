<?xml version="1.0"?>
<document order="3">
  <properties>
    <title>Routing</title>
  </properties>

  <body>

<intro>

<p>
MonoRail supports simple URL rewrites based on regular expression.
However, to use it for nicer urls you must allow the ASP.Net ISAPI 
to handle all files extension, which has a performance penalty.
</p>

<p>
Another approach is to use a ISAPI filter that is able to 
rewrite the Urls based on pattern matching. 
You might try <a href="http://www.iismods.com">Mod_Rewrite</a>.
This benefit of using a filter is that you will not have to
map everything to ASP.Net ISAPI. Although the ASP.Net ISAPI 
is able to serve static files, this would be a waste of processor
cycles for a production site.
</p>

<p>
Have in mind that there are other rewriting URL approaches provided
by different companies. Some of them are free.
</p>

</intro>

<section id="usingit">
	<title>Using it</title>
	
	<p>
1 - Map everything to aspnet_isapi.dll (and be aware of the consequences). You need to use a wildcard mapping if you want to be able to route directories (such as http://localhost/myapp/somedir/). If you will always be using filenames you can just map the specific extensions you want to work with (such as .rails, .content, .article, etc).
	</p>

	<p>
2 - Within MonoRail configuration section, add a routing node and the rules.
Rules will be evaluated in a top-down order, with the first match being used.
	</p>

<pre format="html">
 &lt;monorail&gt;
  &lt;routing&gt;
   &lt;rule&gt;
    &lt;pattern&gt;(/blog/posts/)(\d+)/(\d+)/(.)*$&lt;/pattern&gt;
    &lt;replace&gt;&lt;![CDATA[ /blog/view.rails?year=$2&amp;month=$3 ]]&gt;&lt;/replace&gt;
   &lt;/rule&gt;
   &lt;rule&gt;
    &lt;pattern&gt;(/news/)(\d+)/(\d+)/(.)*$&lt;/pattern&gt;
    &lt;replace&gt;&lt;![CDATA[ /news/view.rails?year=$2&amp;month=$3 ]]&gt;&lt;/replace&gt;
   &lt;/rule&gt;
  &lt;/routing&gt;
 &lt;/monorail&gt;
</pre>

	<p>
3 - Add the routing module to the &lt;httpmodules&gt; section of &lt;system.web&gt;
	</p>

<pre format="html">
<![CDATA[
 <system.web>
  <httpHandlers>
   <add verb="*" path="*.rails"
     type="Castle.MonoRail.Engine.MonoRailHttpHandlerFactory, Castle.MonoRail.Engine" />
  </httpHandlers>

  <httpModules>
   <add name="routing" type="Castle.MonoRail.Framework.RoutingModule, Castle.MonoRail.Framework" />
  </httpModules>
 </system.web>
]]></pre>

	<p>
The regexs are compiled so performance should be acceptable. If
nothing matches, then all goes the default way.
	</p>

	<p>
The rule definition
	</p>

<pre format="html">
   &lt;pattern&gt;(/blog/posts/)(\d+)/(\d+)/(.)*$&lt;/pattern&gt;
   &lt;replace&gt;&lt;![CDATA[ /blog/view.rails?year=$2&amp;month=$3 ]]&gt;&lt;/replace&gt;
</pre>

	<p>
defines that if a url for <tt>/blog/posts/2000/11/anything</tt> will 
be processed as if it was <tt>/blog/view.rails?year=2000&amp;month=11</tt>
	</p>
	
</section>

<section id="rootdir">
	<title>Root Directory Mapping Work Around</title>

	<p>
If you do not want to setup a wildcard mapping just to get a 
default document at your root directory try these steps.
	</p>

	<p>
	<ul>
<li> Create a file named index.rails in your directory root. 
(or any file that is both mapped to aspnet_isapi.dll and 
is a default document in IIS config)</li>

<li> Then add a route in the monorail config</li>
	</ul>
	</p>

<pre format="html">
 &lt;monorail&gt;
  &lt;routing&gt;
   &lt;rule&gt;
    &lt;pattern&gt;^(/index.rails)(.)*$&lt;/pattern&gt;
    &lt;replace&gt;&lt;![CDATA[ /Controller/Action.rails?$2 ]]&gt;&lt;/replace&gt;
   &lt;/rule&gt;
  &lt;/routing&gt;
 &lt;/monorail&gt;
</pre>

<note>
	<p>
	This is really only good for root directories which 
	only has to be done once per web.config.
	</p>
</note>

</section>

</body>
</document>
