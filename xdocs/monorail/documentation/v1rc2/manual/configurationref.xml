<?xml version="1.0"?>
<document order="20">
  <properties>
    <title>MonoRail Configuration Reference</title>
  </properties>

  <body>

<intro>
<p>
MonoRail requires a small configuration on your <tt>web.config</tt>. 
This document should help you to understand the whole configuration schema in details.
</p>
</intro>

<section id="theminimum">
	<title>The minimal configuration</title>

	<p>
	The following is a standard minimal configuration
	required to get MonoRail working with all defaults.
	Unfortunatelly the project assembly name must be
	informed (we cannot infer it).
	</p>

	<pre format="html">
<![CDATA[
<?xml version="1.0" encoding="utf-8"?>
<configuration>
    <configSections>
        <section 
			name="monorail" 
			type="Castle.MonoRail.Framework.Configuration.MonoRailSectionHandler, Castle.MonoRail.Framework" />
    </configSections>
    
    <monorail>
        <controllers>
            <assembly>ProjectAssembly</assembly>
        </controllers>
    </monorail>
    
    <system.web>
        <httpHandlers>
            <add 
				verb="*" 
				path="*.rails" 
				type="Castle.MonoRail.Framework.MonoRailHttpHandlerFactory, Castle.MonoRail.Framework" />
        </httpHandlers>
        <httpModules>
            <add 
				name="monorail" 
				type="Castle.MonoRail.Framework.EngineContextModule, Castle.MonoRail.Framework" />
        </httpModules>
    </system.web>
</configuration>]]></pre>

	<p>
	This configuration defaults to use the WebForms view engine
	and uses the <tt>ProjectAssembly</tt> as the source of controllers
	and ViewComponents.
	</p>
	
	<note>
	<p>
	The section <tt>monorail</tt> must be declared on the <tt>configSections</tt>.
	</p>
	</note>
	
</section>

<section id="ConfigExplained">
	<title>The formal definition</title>

	<p>
	The following exposes all available nodes. It can be 
	used to extend and change the default MonoRail
	behavior by supplying custom implementation of services.
	</p>

<pre format="html">
&lt;monorail 
	useWindsorIntegration=&quot;true|false&quot;
	checkClientIsConnected=&quot;true|false&quot;
	smtpHost=&quot;&quot; 
	&gt;
	
	&lt;!-- 
	  Custom Factories should be configured on the services node. 
	  The following is supported to be backward compatible
	--&gt;
	
	&lt;customControllerFactory type=&quot;type name that implements IControllerFactory&quot; /&gt;
	&lt;customComponentFactory type=&quot;type name that implements IComponentFactory&quot; /&gt;
	&lt;customFilterFactory type=&quot;type name that implements IFilterFactory&quot; /&gt;

	&lt;controllers&gt;
		&lt;assembly&gt;AssemblyName1&lt;/assembly&gt;
		&lt;assembly&gt;AssemblyName2&lt;/assembly&gt;
	&lt;/controllers&gt;
	
	&lt;viewcomponents&gt;
		&lt;assembly&gt;AssemblyName1&lt;/assembly&gt;
		&lt;assembly&gt;AssemblyName2&lt;/assembly&gt;
	&lt;/viewcomponents&gt;
	
	&lt;viewEngine 
		viewPathRoot=&quot;views&quot; 
		customEngine=&quot;ViewEngine.Type.Name, Assembly&quot;&gt;
		
		&lt;additionalSources&gt;
			&lt;assembly name=&quot;&quot; namespace=&quot;&quot; /&gt;
			&lt;assembly name=&quot;&quot; namespace=&quot;&quot; /&gt;
		&lt;/additionalSources&gt;
		
	&lt;/viewEngine&gt;

	&lt;!-- List of services ids:

			Custom
			ControllerFactory
			ViewEngine
			ViewSourceLoader
			ViewComponentFactory
			FilterFactory
			ResourceFactory
			EmailSender
			ControllerDescriptorProvider
			ResourceDescriptorProvider
			RescueDescriptorProvider
			LayoutDescriptorProvider
			HelperDescriptorProvider
			FilterDescriptorProvider
			EmailTemplateService
			ControllerTree
			CacheProvider
			ScaffoldingSupport
	--&gt;
	
	&lt;services&gt;
		&lt;service 
			id=&quot;[see list above]&quot; 
			type=&quot;Service.Type.Name, Assembly&quot;
			interface=&quot;optional&quot; /&gt;
	&lt;/services&gt;
	
	&lt;extensions&gt;
		&lt;extension type=&quot;Extension.Type.Name, Assembly&quot; /&gt;
		&lt;extension type=&quot;Extension.Type.Name, Assembly&quot; /&gt;
	&lt;/extensions&gt;

	&lt;routing&gt;
		&lt;rule&gt;
			&lt;pattern&gt;(/blog/posts/)(\d+)/(\d+)/(.)*$&lt;/pattern&gt;
			&lt;replace&gt;&lt;![CDATA[ /blog/view.rails?year=$2&amp;amp;month=$3 ]]&gt;&lt;/replace&gt;
		&lt;/rule&gt;
		&lt;rule&gt;
			&lt;pattern&gt;(/news/)(\d+)/(\d+)/(.)*$&lt;/pattern&gt;
			&lt;replace&gt;&lt;![CDATA[ /news/view.rails?year=$2&amp;amp;month=$3 ]]&gt;&lt;/replace&gt;
		&lt;/rule&gt;
	&lt;/routing&gt;
	
&lt;/monorail&gt; </pre>

	<section>
		<title>The monorail node</title>
	
		<p>
		<table class="commontable">
		<tr>
			<th>Attribute</th>
			<th>Description</th>
		</tr>
		<tr>
			<td><tt>useWindsorIntegration</tt></td>
			<td>Enables Windsor Container integration</td>
		</tr>
		<tr>
			<td><tt>checkClientIsConnected</tt></td>
			<td>Enables checks for client connection that stops the process
			if the client has disconnected</td>
		</tr>
		<tr>
			<td><tt>smtpHost</tt></td>
			<td>The smtp host, if there is intention to use MonoRail e-mail features</td>
		</tr>
		</table>
		</p>
		
	</section>


	<section>
		<title>The controllers node</title>
		
		<p>
		The controller node takes one or more <tt>assembly</tt> nodes.
		The assembly names are used during initialization as MonoRail will inspect
		them for controllers to construct a tree.
		</p>
		
		<note>
		<p>
		This node is only used by the default controller factory.
		It may be ignored by different factories. For example, if 
		Windsor Container integration is enabled, the node will 
		be ignored.
		</p>
		</note>
		
	</section>

	<section>
		<title>The viewcomponents node</title>
		
		<p>
		The viewcomponents node takes one or more <tt>assembly</tt> nodes.
		The assembly names are used during initialization as MonoRail will inspect
		them for ViewComponents to initialize a dictionary.
		</p>
		
		<note>
		<p>
		This node is only used by the default controller factory.
		It may be ignored by different factories. For example, if 
		Windsor Container integration is enabled, the node will 
		be ignored.
		</p>
		</note>
		
	</section>
	
	<section>
		<title>The viewEngine node</title>
		
		<p>
		The viewEngine node informs MonoRail of the 
		views folder (which may be a relative or an absolute path)
		and allows the programmer to specify a custom implementation
		of <tt>IViewEngine</tt>.
		</p>
		
		<p>
		<table class="commontable">
		<tr>
			<th>Attribute</th>
			<th>Description</th>
		</tr>
		<tr>
			<td><tt>viewPathRoot</tt></td>
			<td>The folder that contains the views</td>
		</tr>
		<tr>
			<td><tt>customEngine</tt></td>
			<td>Full .net type name of a type that implements <tt>IViewEngine</tt> </td>
		</tr>
		</table>
		</p>

		<section>
			<title>The additionalSources node</title>
			
			<p>
			Some view engines implementation allow you to use assemblies
			resources to store views, beside the file system.
			This is a good approach to reuse controllers among projects.
			</p>
			
			<p>
		<table class="commontable">
		<tr>
			<th>Attribute</th>
			<th>Description</th>
		</tr>
		<tr>
			<td><tt>name</tt></td>
			<td>The assembly name (without extension)</td>
		</tr>
		<tr>
			<td><tt>namespace</tt></td>
			<td>
			Resources can have a namespace in their names.
			The namespace must be informed so it can be stripped
			to allow MonoRail to find the view content as it was in the file system.
			</td>
		</tr>
		</table>
		</p>
			
		</section>
		
	</section>
	
	<section>
		<title>The services node</title>
		
		<p>
		MonoRail is composed of a few services. They can be
		replaced by custom implementations.
		</p>
		
		<p>
		<table class="commontable">
		<tr>
			<th>Attribute</th>
			<th>Description</th>
		</tr>
		<tr>
			<td><tt>id</tt></td>
			<td>The service id used internally by MonoRail</td>
		</tr>
		<tr>
			<td><tt>type</tt></td>
			<td>The implementation type name</td>
		</tr>
		<tr>
			<td><tt>interface</tt></td>
			<td>
			If the service is defined by an interface contract, it should 
			be specified on this attribute.
			</td>
		</tr>
		</table>
		</p>
		
	</section>
	
	<section>
		<title>The extensions node</title>
		
		<p>
		Extensions can be added. They hook some events exposed 
		by MonoRail to act on them augmenting its functionality.
		</p>
		
		<p>
		An extension must implement the <tt>IMonoRailExtension</tt>
		interface.
		</p>
		
	</section>

	<section>
		<title>The routing node</title>
		
		<p>
		Routes can be added to define rewrite rules for the 
		urls. This allow nicer urls but can only be used under
		some conditions.
		</p>
		
	</section>

</section>


</body>
</document>
