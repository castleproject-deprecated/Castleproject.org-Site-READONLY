<?xml version="1.0"?>
<document order="2">
  <properties>
    <title>Transformation Filters</title>
  </properties>

  <body>

<intro>

<p>
Transformation Filters allow you to manipulate the stream of data that
defines a generated page before it is sent to the client.
</p>

</intro>

<section id="transform">
	<title>Using Transformation Filters</title>
	
<p>
Right before a generated page is streamed to the client, you can use a Transformation
Filter to manipulate the stream.  The Transformation Filter is applied <i>after</i> the view engine
has built the page.  Your view engine is not used with a Transformation Filter.
</p>

<p>
To assign a Transformation Filter to an action, use the TransformationFilter
attribute.
</p>

<pre format="cs">
public class UserController : Controller
{
	[TransformationFilter(typeof(UpperCaseTransformationFilter))]
    public void View()
    {
    }
}</pre>

<p>
In the example above, the entire page generated by the View action will
be converted to upper case text.
</p>

<p>
You may apply multiple Transformation Filters to an action.  To control their
order of execution, use the ExecutionOrder property.
</p>

<pre format="cs">
public class UserController : Controller
{
	[TransformFilter(typeof(WikiTransformFilter), ExecutionOrder=1), TransformFilter(typeof(UpperCaseTransformFilter), ExecutionOrder=2)]
	public void View()
    {
    }
}</pre>

<p>
In the example above, the page generated by the View action will first be
transformed using the WikiTransformFilter and then the result
of that will be transformed to upper case text.
</p>

<p>
You can create your own Transformation Filters by inheriting from
the TransformFilter abstract base class.
</p>

</section>

</body>
</document>
