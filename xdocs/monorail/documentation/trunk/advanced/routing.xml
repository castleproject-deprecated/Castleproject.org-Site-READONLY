<?xml version="1.0"?>
<document order="3">
  <properties>
    <title>Routing</title>
  </properties>

  <body>

<intro>

<p>
MonoRail supports simple URL rewrites based on regular expressions.
However, to use it for nicer URLs you must allow the ASP.NET ISAPI 
to handle all file extensions, which has a performance penalty.
</p>

<p>
Another approach is to use an ISAPI filter that is able to 
rewrite URLs based on pattern matching. 
<a href="http://www.iismods.com">Mod_Rewrite</a> is one example of
an ISAPI filter which performs URL rewriting.
By using a ISAPI filter to rewrite URLs no wildcard mapping needs to
be configured to direct all requests to the ASP.NET ISAPI.
Even though the ASP.NET ISAPI will process requests for static files this
is not ideal for a production site because of the performance penalty.
</p>

<p>
Other URL rewriting solutions are available by different companies, some of them are free.
<a href="http://www.isapirewrite.com/">ISAPI_Rewrite Lite</a> is one example.
</p>

</intro>

<section id="usingit">
	<title>Using it</title>
	
	<p>
1 - Depending on how you intend to use routing will determine how it needs to
be configured. If you will always be using filenames you only need map the
specific extensions you want to work with (such as .aspx, .rails, .content, .article, etc).
However, if you intend on routing directories (such as http://localhost/myapp/somedir/)
then you will need to map everything (*.*) in IIS to aspnet_isapi.dll which causes IIS to
redirect every request to the ASP.NET ISAPI (be aware of the consequences).
	</p>

	<p>
2 - Create a <tt>routing</tt> element under the <tt>monorail</tt> element in your
web.config as shown below. Routing rules will be evaluated in a top-down order
until a match is found. If there are no matches the request will continue as
normal with the requested URL.
	</p>

<pre format="html">
<![CDATA[
 <monorail>
  <routing>
   <rule>
    <pattern>(/blog/posts/)(\d+)/(\d+)/(.)*$</pattern>
    <replace><![CDATA[ /blog/view.rails?year=$2&month=$3 ]] ></replace>
   </rule>
   <rule>
    <pattern>(/news/)(\d+)/(\d+)/(.)*$</pattern>
    <replace><![CDATA[ /news/view.rails?year=$2&month=$3 ]] ></replace>
   </rule>
  </routing>
 </monorail>
]]></pre>

	<p>
3 - Add the routing module to the <tt>httpModules</tt> element of <tt>system.web</tt> in your web.config.
Ensure that the routing module is listed before the monorail module as shown below.
	</p>

<pre format="html">
<![CDATA[
 <system.web>
  <httpHandlers>
   <add verb="*" path="*.rails"
     type="Castle.MonoRail.Engine.MonoRailHttpHandlerFactory, Castle.MonoRail.Engine" />
  </httpHandlers>

  <httpModules>
   <add name="routing" type="Castle.MonoRail.Framework.RoutingModule, Castle.MonoRail.Framework" />
   <add name="monorail" type="Castle.MonoRail.Framework.EngineContextModule, Castle.MonoRail.Framework" />
  </httpModules>
 </system.web>
]]></pre>

	<p>
The regular expressions are compiled, therefore performance should be acceptable.
If no matches are found then the request is processed as it would be without routing.
	</p>

	<p>
This example routing rule defines that a request for the URL <tt>/blog/posts/2000/11/anything</tt>
will be processed as if it was <tt>/blog/view.rails?year=2000&amp;month=11</tt>:
	</p>

<pre format="html">
<![CDATA[
   <pattern>(/blog/posts/)(\d+)/(\d+)/(.)*$</pattern>
   <replace><![CDATA[ /blog/view.rails?year=$2&month=$3 ]] ></replace>
]]></pre>
	
</section>

<section id="rootdir">
	<title>Root Directory Mapping Work Around</title>

	<p>
If you do not want to setup a wildcard mapping just to get a 
default document for your root directory you can use these steps:
	</p>

	<p>
	<ul>
<li>Create an empty file in your root directory that is mapped to aspnet_isapi.dll
and is a configured as a default document in IIS. For example, create a file named
index.rails or default.aspx depending on your configuration.</li>

<li>Then create a new routing rule in your web.config as shown below.</li>
	</ul>
	</p>

<pre format="html">
<![CDATA[
 <monorail>
  <routing>
   <rule>
    <pattern>^(/index.rails)(.)*$</pattern>
    <replace><![CDATA[ /Controller/Action.rails?$2 ]] ></replace>
   </rule>
  </routing>
 </monorail>
]]></pre>

<note>
	<p>
	This work around is only feasible for root directories because the default
	document file must be created in each directory which is not practical for
	URLs that contain dynamic strings.
	</p>
</note>

</section>

</body>
</document>
