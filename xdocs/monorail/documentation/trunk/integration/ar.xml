<?xml version="1.0"?>
<document order="10">
  <properties>
    <title>ActiveRecord Integration</title>
  </properties>

  <body>

<intro>

<p>
If you are using ActiveRecord you 
may consider using the integration we developed fo it. 
In order to do so, first of all, add a reference to the following assembly:
</p>

<p>
<ul>
<li> Castle.MonoRail.ActiveRecordSupport </li>
</ul>
</p>

</intro>

<section id="ARSmartDispatcherController">
	<title>ARSmartDispatcherController</title>

<p>
What we are about to discuss only works 
if you are using <tt>ARSmartDispatcherController</tt> 
instead of <tt>SmartDispatcherController</tt>. 
The <tt>ARSmartDispatcherController</tt> offers 
a <tt>CustomBindObject</tt> method that is ActiveRecord-aware.
</p>

</section>

<section id="ARDataBindAttribute">
	<title>ARDataBindAttribute and ARDataBinder class</title>

<p>
So imagine that you are creating a CRUD page for a 
<tt>Customer</tt> object. Creation is really simple, 
and the <tt>DataBindAttribute</tt> attribute is enough:
</p>

<pre format="cs">
public class CustomerController : ARSmartDispatcherController 
{
    public void Index()
    {
    }

    public void New()
    { 
    }

    public void Create([DataBind("customer")] Customer customer)
    { 
        try
        {
            customer.Create();

            RedirectToAction("index");
        }
        catch(Exception ex)
        {
            Flash["error"] = ex.Message;

            RedirectToAction("new", Request.Form);
        }
    }
}</pre>

<p>
Now editing is trick. You must load 
the <tt>Customer</tt>, and populate the 
changes with the form data. Enters <tt>ARDataBindAttribute</tt>:
</p>

<pre format="cs">
public class CustomerController : ARSmartDispatcherController 
{
    ...

    public void Edit(int id)
    { 
        PropertyBag.Add("customer", Customer.Find(id));
    }

    public void Update([ARDataBind("customer", AutoLoad=AutoLoadBehavior.Always)] Customer customer)
    { 
        try
        {
            customer.Update();

            RedirectToAction("index");
        }
        catch(Exception ex)
        {
            Flash["error"] = ex.Message;

            RedirectToAction("edit", Request.Form);
        }
    }
}</pre>

<p>
The <tt>ARDataBindAttribute</tt> extends the <tt>DataBindAttribute</tt> 
so the <tt>Exclude</tt> and <tt>Allow</tt> properties are still there.
</p>

<p>
However, as you can see, we used <tt>AutoLoad=AutoLoadBehavior.Always</tt>. 
This tells the binder to collect the primary key value for 
the customer and load it, then populate the object. 
So all you have to do next is to invoke <tt>Save</tt> or <tt>Update</tt> method.
</p>

</section>

<section id="AutoLoad">
	<title>The AutoLoad property</title>

	<p>
	It is very important that you know what the AutoLoad property means
	and the behavior it governs.
	</p>

	<p>
	<table class="commontable">
	<tr>
		<th>Enum field</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>Never</tt></td>
		<td> Means that no autoload should be performed on the target
		type or on nested types.</td>
	</tr>
	<tr>
		<td><tt>Always</tt></td>
		<td> Means that autoload should be used for the target type
		and the nested types (if present). This demands that
		the primary key be present on the http request for the root type and nested.</td>
	</tr>
	<tr>
		<td><tt>OnlyNested</tt></td>
		<td> Does not load the root type, but loads nested types
		if the primary key is present. If not present, sets <c>null</c> on nested type.
		This is useful for insertions.</td>
	</tr>
	<tr>
		<td><tt>NewInstanceIfInvalidKey</tt></td>
		<td> Means that we should autoload, but if the key is 
		invalid, like <c>null</c>, 0 or an empty string, then just
		create a new instance of the target type.</td>
	</tr>
	<tr>
		<td><tt>NullIfInvalidKey</tt></td>
		<td> Means that we should autoload, but if the key is 
		invalid, like <c>null</c>, 0 or an empty string, then just
		set <c>null</c> on the nested type.</td>
	</tr>
	</table>
	</p>
	
</section>

  	
<section id="DataBindIssues">
	<title>ActiveRecord DataBinding Issues</title>
	<p>
	The combination of databinding and ActiveRecord opens the possibility for 
	an error that is most often hit by unexperienced users, especially when 
	using the recommended <a href="http://using.castleproject.org/display/AR/Enable+Session+per+Request">Session Per Request</a> configuration for ActiveRecord. 
	Consider the code from above: 
	</p>
	<pre format="cs"><![CDATA[
public void Update([ARDataBind("customer", AutoLoad=AutoLoadBehavior.Always)] Customer customer)
{ 
    try
    {
        customer.Update();

        RedirectToAction("index");
    }
    catch(Exception ex)
    {
        Flash["error"] = ex.Message;

        RedirectToAction("edit", Request.Form);
    }
}	
  	]]></pre>
	<p>
  	Now, what happens if there is an exception? The exception is caught as 
  	intended and the error message added to the Flash container. But actually,
  	you will get an ASP.NET errorpage nonetheless. The reason for this 
  	behaviour is simple once you know how the request is processed in the 
  	controller:
 		<ol>
		<li>An ActiveRecord SessionScope is created in <tt>OnBeginRequest()</tt></li>
		<li>The customer object will be looked up from database by its primary key.</li>
		<li>The properties of the customer object are updated through databinding.</li>
		<li><tt>customer.Update()</tt> is called and throws an exception.</li>
		<li>The catch block executes.</li>
		<li>
 			The ActiveRecord SessionScope is disposed in <tt>OnEndRequest()</tt>:
	  		<ol>
				<li>NHibernate checks whether there are pending changes.</li>
				<li>
  					The customer object is marked dirty, because its property
  					values have been changed during databinding.
  				</li>
				<li>
  					NHibernate flushes the session. During the flush, the changes of
  					customer object are written back to the database.
  				</li>
				<li>An unhandled exception occurs.</li>
			</ol>
		</li>
		<li>The exception cannot be handled in your controller and an errorpage is shown.</li>
		</ol>
	</p>
	<note>
		<p>
		The same issue appears when using ActiveRecord's validation support. 
		Behaviour and reasons are identical in that case: The object is not saved 
		but changed by the DataBinder and will be saved by NHibernate when the
		session is disposed.
		</p>
	</note>
	<p>
  	So, now that the problem is known, how can it be handled? There are plenty possible 
  	solutions for this, depending on the user's needs:
	  	<ol>
			<li>Make the session readonly and always flush it explicitly.</li>
			<li>Remove the offending object from the session.</li>
			<li>Create a <tt>TransactionScope</tt> and roll it back.</li>
			<li>Use the <tt>Validate</tt> option of <tt>ARDataBind</tt></li>
		</ol>
	</p>
	<section id="readonlysession">
		<title>Using a Read-Only-Session</title>
		<p>
		If you change the <tt>SessionScope</tt> to not automatically flush,
		changes are not flushed on disposal of the scope. You can setup the
		scope as shown below (based on <a href="http://using.castleproject.org/display/AR/Enable+Session+per+Request">this article</a>):
		</p>
		<pre format="cs"><![CDATA[
// GlobalApplication.cs
public void OnBeginRequest(object sender, EventArgs e)
{
    HttpContext.Current.Items.Add("nh.sessionscope", new SessionScope(FlushAction.Never);
}		
		]]></pre>
		<p>
		Doing so requires you to flush your sesssion manually in every
		controller that changes existing objects or introduces new objects to 
		the database. There are two possibilities to get the session object to flush:
		</p>
		<pre format="cs"><![CDATA[
// Use this when the session was added to the HttpContext in OnBeginRequest
((SessionScope)Context.Items["nh.sessionscope"]).Flush();
		]]></pre>
		<pre format="cs"><![CDATA[
// Gets the session, if it is not stored in a known place.
ActiveRecordMediator
    .GetSessionFactoryHolder()
    .CreateSession(typeof(Customer))
    .Flush();
		]]></pre>
	</section>
	<section id="evicting">
		<title>Removing Invalid Objects From Session</title>
		<p>
		Another possibility is to keep the default behaviour and only assure 
		that invalid objects are not flushed on disposal of the session. This
		strategy is recommended when there are objects that need to be saved to
		the database even when one object is invalid and must not be stored.
		</p>
		<p>
		You might also want to use this strategy when you are using Windsor
		integration and the ActiveRecordIntegration facility, because in this
		case you cannot change the session to be read-only within your code.
		</p>
		<p>To remove the conflicting object from the <tt>SessionScope</tt>, you
		must <tt>Evict</tt> it:</p>
		<pre format="cs"><![CDATA[
ActiveRecordMediator
    .GetSessionFactoryHolder()
    .CreateSession(typeof(Customer))
    .Evict(customer);
		]]></pre>
		<p>
		By using the <tt>ActiveRecordMediator</tt>, you will get access to the
		session regardless where it as been originally created.
		</p>
	</section>
	<section id="transactionrollback">
		<title>Using a TransactionScope</title>
		<p>
		Another method is to wrap the validation in a transaction. If the 
		validation fails, the transaction must be rolled back:
		</p>
		<pre format="cs"><![CDATA[
using (TransactionScope tx = new TransactionScope())
{
    try
    {
        customer.Update();
        RedirectToAction("index");
    }
    catch(Exception ex)
    {
        Flash["error"] = ex.Message;
		tx.Rollback();
        RedirectToAction("edit", Request.Form);
    }
}
		]]></pre>
		<p>
		You might wonder how this works because I wrote above that the 
		DataBinder makes the offending changes outside of the
		<tt>TransactionScope</tt>. The answer is that TransactionScopes can be
		nested and that there is an implicit transaction started during the
		creation of the <tt>SessionScope</tt>. The rollback is then propagated
		to that transaction and all changes are discarded.
		</p>
		<p>
		However, that means that if you have other objects that must be saved,
		you should instead evict the invalid object as descibed <a href="#evicting">above</a>
		</p>
	</section>
  	<section id="validation">
		<title>Use Validation during DataBinding</title>
		<p>
  		The most elegant method to circumvent such problems is the use of the
  		Castle Validation component. By setting the parameter <tt>Validate</tt>
  		of the <tt>ARDataBind</tt>-attribute to <tt>true</tt>, MonoRail performs
  		validation of the input data before changing the properties based on the
  		<tt>Validate<i>XXX</i></tt>-Attributes of the ActiveRecord model classes.
  		</p>
  		<p>
  		The drawback is that invalid data is completely discarded and will not
  		redisplayed to the client by <tt>FormHelper</tt>. In order to access the
  		data, <tt>Request.Params</tt> must be used.
  		</p>
		<pre format="cs"><![CDATA[
public void Update(
    [ARDataBind("customer", 
        AutoLoadBehavior.NewRootInstanceIfInvalidKey, 
        Validate = true)] Customer customer)
{
    if (ValidationSummaryPerInstance[info].ErrorsCount > 0)
    {
        string msg = "Please correct errors:";
        foreach (string p in ValidationSummaryPerInstance[customer].InvalidProperties)
        {
            msg += "<p>" + p + ":</p>";
            foreach (string m in ValidationSummaryPerInstance[customer].GetErrorsForProperty(p))
            {
                msg += string.Format("<p>{0}</p>", m);
            }
        }
        Flash["message"] = msg;
        Flash["customer"] = customer;
        RedirectToReferrer();
        return;
    }
	// "Normal" application flow
	// ...
}
		]]></pre>
	</section>
</section>
<section id="ARFetch">
	<title>ARFetchAttribute</title>

<p>
The <tt>ARFetchAttribute</tt> is a simpler version of <tt>ARDataBinder</tt>. 
It is in charge of loading the instance from the database and nothing more. 
</p>

<pre format="cs">
public class CustomerController : ARSmartDispatcherController 
{
    ...

    public void SetPassword([ARFetch("customer.id")] Customer customer, String newPassword)
    { 
        try
        {
            customer.Password = newPassword;
            customer.Save();

            RedirectToAction("index");
        }
        catch(Exception ex)
        {
            Flash["error"] = ex.Message;

            RedirectToAction("changepassword", Request.Form);
        }
    }
}</pre>

<p>
The optional parameter passed to <tt>ARFetch</tt> 
tells it which form field has the primary key value. 
If you don't specify it, it will use the parameter 
name (for the example above it would be <tt>customer</tt>)
</p>

<p>
You can also specify <tt>Required=true</tt> which will 
force it to throw an exception if the record is not found:
</p>

<pre format="cs">
public class CustomerController : ARSmartDispatcherController 
{
    ...

    public void SetPassword([ARFetch("customer.id", Required=true)] Customer customer, String newPassword)
    { 
        ...
    }
}</pre>

<p>
And <tt>Create=true</tt>, which will create a 
new object if the primary key form field is empty:
</p>

<pre format="cs">
public class CustomerController : ARSmartDispatcherController 
{
    ...

    public void CreateOrModifyCustomer([ARFetch("customer.id", Create=true)] Customer customer, String name, ...)
    { 
        customer.Name = name;
        customer.Save();
    }
}</pre>

</section>

</body>
</document>
