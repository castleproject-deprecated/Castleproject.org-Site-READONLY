<?xml version="1.0"?>
<document order="80">
<properties>
<title>Unit testing</title>
</properties>

<body>
<intro>

<p>
Previously MonoRail used the ASP.Net infrastructure to run a web site and
run tests against it. This worked for simple scenarios but didn't scale well
or allow access to all aspects of the RailsEngineContext.
</p>
<p>
During RC2, BaseControllerTest was added to the trunk.
BaseControllerTest exposed all of the properties of the MonoRail pipeline
so that you can now inspect values as if running in a web context.
This allowed us to mock the RailsEngineContext and inject mocks into the pipeline.
</p>

</intro>

<toc/>

<section>
    <title>Castle.MonoRail.TestSupport</title>

    <p>
      <tt>Castle.MonoRail.TestSupport</tt> was created to
      enable easy testing of MonoRail projects.
      Classes in this namespace are for performing tests
      on MonoRail Controllers. It exposes the
      <tt>PropertyBag</tt>, <tt>Flash</tt> and <tt>Session</tt> dictionaries so you can write
      assert for their contents. You also have access to MockRailsEngineContext
      via the Context property to insert values to be used during the Controller execution.
    </p>

    <p>
      In order to use the ASP.Net runtime for deprecated AbstractMRTestCase,
      <b>
        the assembly <tt>Castle.MonoRail.TestSupport.dll</tt> must be registered in the GAC
      </b>.
      If you have installed Castle using the MSI distribution this was already done for you. Otherwise, execute:
      <pre>
        > gacutil /i Castle.MonoRail.TestSupport
      </pre>
    </p>

    <section>
      <title>Simple recipe</title>

      <p>
        <ol>
          <li>
            Create a Class Library project (usually you are going to use the
            same solution of the web project)
          </li>
          <li>
            Add references to :
            <ul>
              <li>
                <tt>nunit.framework</tt>
              </li>
              <li>
                <tt>Castle.MonoRail.Framework</tt>
              </li>
              <li>
                <tt>Castle.MonoRail.TestSupport</tt>
              </li>
            </ul>
          </li>
          <li> Create test cases class extending BaseControllerTest</li>
          <li>Call the PrepareController method passing Controller Instance, Area, Controller Name and Action Name.</li>
          <li>Finally make Assertion calls on PropertyBag or other parts of the Controller that is under test. You can access the RailsEngineContext from BaseControllerTest.Context</li>
        </ol>
      </p>

      <section>
        <title>A simple example from MonoRail test case</title>

        <p>
          The following class is a snippet of one of the MonoRail test cases:
        </p>

        <pre format="cs">
		[TestFixture]
		public class BasicFunctionalityTestCase : BaseControllerTest
		{
			[Test]
			public void SimpleControllerAction()
			{
				SimpleController simpleController = new SimpleController();
				PrepareController(simpleController, "areaName", "simplecontroller", "index");

				simpleController.Index();

				// Some Assertions here
			}

			[Test]
			public void Flash()
			{
				SimpleController simpleController = new SimpleController();
				PrepareController(simpleController, "areaName", "simplecontroller", "someotheraction");

				simpleController.SomeOtherAction();

				Assert.IsNotNull(simpleController.Flash["someothervalue"]);
			}

			[Test]
			public void Redirect()
			{
				SimpleController simpleController = new SimpleController();
				PrepareController(simpleController, "areaName", "simplecontroller", "redirectaction");

				simpleController.RedirectAction();

				Assert.IsNotNull("controller/action.rails", Response.RedirectedTo);
			}

			[Test]
			public void PropertyBag()
			{
				SimpleController simpleController = new SimpleController();
				PrepareController(simpleController, "areaName", "simpleController", "propertybagaction");

				simpleController.PropertyBagAction();

				Assert.IsNotNull(simpleController.PropertyBag["somevalue"]);
			}

			[Test]
			public void CurrentUser()
			{
				SimpleController simpleController = new SimpleController();
				PrepareController(simpleController, "areaName", "simpleController", "currentuseraction");

				simpleController.CurrentUserAction();

				Assert.IsNotNull(Context.CurrentUser);
			}
		}
		</pre>

        <p>
          For for a more detailed example see <a href="http://using.castleproject.org/display/MR/TDDingControllers">TDDingControllers on using.castleproject.org</a>

          For more documentation, please see the <a href="http://svn.castleproject.org:8080/svn/castle/trunk/MonoRail/Castle.MonoRail.TestSupport/">Castle.MonoRail.TestSupport namespace classes</a>.
        </p>

      </section>

    </section>

</section>
</body>
</document>
