<?xml version="1.0"?>
<document order="2">
  <properties>
    <title>Controller basics</title>
  </properties>

  <body>

<intro>
<p>
Controllers are extremelly important as they are the 
intelligent piece of the application that orchestrates 
the application flow. The Getting started section depicted 
the basic usage of controllers.
</p>

<p>
By default, the class name is used as the controller identification. 
If your controller's class name ends with <i>Controller</i>, 
the controller identifier is the class name, but stipped of <i>Controller</i>. You can also use the 
<tt>ControllerDetails</tt> attribute to associate a different name 
to your controller class.
</p>

</intro>

<section id="NameConvention">
	<title>Name convention</title>
	
	<p>
	It is advisable that controller classes 
	follow the Name + Controller suffix convention. 
	When the controller is registered, MonoRail strips
	the "Controller" suffix and uses the name as the key.
	The controller name is used on the URL to access it.
	</p>
	
	<p>
	The attribute <tt>ControllerDetailsAttribute</tt>
	can be used to define the exact name 
	for the controller. For example:
	</p>
	
	<pre format="cs">
using Castle.MonoRail.Framework;

[ControllerDetails("cust")]
public class CustomerController : Controller
{

}</pre>

	<p>
	Instead of <tt>Customer</tt>, the <tt>ControllerDetailsAttribute</tt> has defined <tt>cust</tt> as the name that will be used in URLs
  to identify this controller.
	</p>
	
</section>

<section id="Areas">
	<title>Areas</title>
	
	<p>
	MonoRail supports the concept of areas, which are logical groups of
	controllers. All controllers belong to an area. The default area
	is an empty (unnamed) one.
	</p>
	
	<p>
	Imagine a tree of controllers. Each branch in the tree
	is an area, each leaf is a controller. 
	</p>
	
	<p>
	To define an area, use the <tt>ControllerDetailsAttribute</tt>
	attribute:
	</p>
	
	<pre format="cs">
using Castle.MonoRail.Framework;

[ControllerDetails(Area="admin")]
public class UsersController : Controller
{
	public void Index()
	{
	}
}</pre>

	<p>
	This controller is now is accessible using the following url path:
	</p>
	
	<p>
	<tt>/admin/users/index.rails</tt>
	</p>
	
	<p>
	You can also define more than one level:
	</p>
	
	<pre format="cs">
using Castle.MonoRail.Framework;

[ControllerDetails(Area="admin/users")]
public class PasswordMngController : Controller
{
	public void Index()
	{
	}
}</pre>	

	<p>
	This controller now is accessible using the following url path:
	</p>
	
	<p>
	<tt>/admin/users/passwordmng/index.rails</tt>
	</p>
	
</section>

<section id="Actions">
	<title>Actions</title>

	<p>
	We define actions as the procedures that can be invoked on your controller.
	Basically it translates to any public instance method your controller 
	exposes.
	</p>
	
	<note>
	<p>
	If you do not want a specific method to be "invocable", it must be non-public.
	</p>
	</note>
	
</section>

<section id="Redirecting">
	<title>Redirecting</title>

	<p>
	The <tt>Controller</tt> offers a handful of <tt>Redirect</tt>
	overloads. Some of them allow you to pass along query string parameters.
	</p>
	
	<p>
	The following table list some of the overloads:
	</p>
	
	<p>
	<table class="commontable">
	<tr>
		<th>Name</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>RedirectToAction(string action)</tt></td>
		<td>Redirects to another action in the same controller.</td>
	</tr>
	<tr>
		<td><tt>RedirectToAction(String action, params String[] queryStringParameters)</tt></td>
		<td>Redirects to another action in the same controller specifying query string entries.</td>
	</tr>
	<tr>
		<td><tt>RedirectToAction(String action, IDictionary parameters)</tt></td>
		<td>Redirects to another action in the same controller specifying query string entries.</td>
	</tr>
	<tr>
		<td><tt>Redirect(String url)</tt></td>
		<td> Redirects to the specified URL.</td>
	</tr>
	<tr>
		<td><tt>Redirect(String url, IDictionary parameters)</tt></td>
		<td>Redirects to the specified URL specifying query string entries. </td>
	</tr>
	<tr>
		<td><tt>Redirect(String controller, String action)</tt></td>
		<td>Redirects to another controller and action.</td>
	</tr>
	<tr>
		<td><tt>Redirect(String area, String controller, String action)</tt></td>
		<td>Redirects to another controller and action (within an area).</td>
	</tr>
	</table>
	</p>
	
</section>

<section id="UsefulProperties">
	<title>Useful Properties</title>

	<p>
	The following properties exposed by the <tt>Controller</tt> are
	very likely to be used all the time while developing an application.
	
	</p>

	<section>
	<title>Request/Response</title>
	
	<p>
	<table class="commontable">
	<tr>
		<th>Property</th>
		<th>Type</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>Context</tt></td>
		<td align="center"><tt>Castle.MonoRail.Framework.IRailsEngineContext</tt></td>
		<td>Gets the context of this request execution.</td>
	</tr>
	<tr>
		<td><tt>Session</tt></td>
		<td align="center"><tt>IDictionary</tt></td>
		<td>Gets the Session dictionary.</td>
	</tr>
	<tr>
		<td><tt>Flash</tt></td>
		<td align="center"><tt>Castle.MonoRail.Framework.Flash</tt></td>
		<td>Gets a dictionary of volative items. Ideal for showing success and failures messages.</td>
	</tr>
	<tr>
		<td><tt>HttpContext</tt></td>
		<td align="center"><tt>System.Web.HttpContext</tt></td>
		<td>Gets the web context of ASP.NET API.</td>
	</tr>
	<tr>
		<td><tt>Request</tt></td>
		<td align="center"><tt>Castle.MonoRail.Framework.IRequest</tt></td>
		<td>Gets the request object.</td>
	</tr>
	<tr>
		<td><tt>Response</tt></td>
		<td align="center"><tt>Castle.MonoRail.Framework.IResponse</tt></td>
		<td>Gets the response object.</td>
	</tr>

	<tr>
		<td><tt>Params</tt></td>
		<td align="center"><tt>NameValueCollection</tt></td>
		<td>Shortcut to <tt>IRequest.Params</tt></td>
	</tr>
	<tr>
		<td><tt>Form</tt></td>
		<td align="center"><tt>NameValueCollection</tt></td>
		<td>Shortcut to <tt>IRequest.Form</tt></td>
	</tr>
	<tr>
		<td><tt>Query</tt></td>
		<td align="center"><tt>NameValueCollection</tt></td>
		<td>Shortcut to <tt>IRequest.QueryString</tt></td>
	</tr>
	<tr>
		<td><tt>IsClientConnected</tt></td>
		<td align="center"><tt>bool</tt></td>
		<td>Shortcut to <tt>IResponse.IsClientConnected</tt></td>
	</tr>
	</table>
	</p>
	
	</section>

	<section>
	<title>Controller information</title>

	<p>
	<table class="commontable">
	<tr>
		<th>Property</th>
		<th>Type</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>Name</tt></td>
		<td align="center"><tt>string</tt></td>
		<td>Gets the controller's name (as MonoRail knows it)</td>
	</tr>
	<tr>
		<td><tt>AreaName</tt></td>
		<td align="center"><tt>string</tt></td>
		<td> Gets the controller's area name.</td>
	</tr>
	<tr>
		<td><tt>LayoutName</tt></td>
		<td align="center"><tt>string</tt></td>
		<td>Gets or set the layout being used.</td>
	</tr>
	<tr>
		<td><tt>Action</tt></td>
		<td align="center"><tt>string</tt></td>
		<td>Gets the name of the action being processed.</td>
	</tr>
	<tr>
		<td><tt>SelectedViewName</tt></td>
		<td align="center"><tt>string</tt></td>
		<td>Gets or sets the view which will be rendered by this action. 
		We encourage you to use
		<tt>RenderView</tt> or <tt>RenderSharedView</tt> instead of setting this property.</td>
	</tr>
	</table>
	</p>
	
	</section>
	
	<section>
	<title>Others</title>

	<p>
	<table class="commontable">
	<tr>
		<th>Property</th>
		<th>Type</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>Logger</tt></td>
		<td align="center"><tt>Castle.Core.Logging.ILogger</tt></td>
		<td>Logger for the controller (you must <a href="../advanced/enablinglogging.html">enable logging</a> first)</td>
	</tr>
	<tr>
		<td><tt>IsPostBack</tt></td>
		<td align="center"><tt>bool</tt></td>
		<td>Determines if the current Action resulted from an ASP.NET PostBack.
		As a result, this property is only relavent when using WebForms views.
		It is placed on the base Controller for convenience only to avoid the
		need to extend the Controller or provide additional helper classes.
		</td>
	</tr>
	</table>
	</p>
	
	</section>
	
</section>

<section id="DefaultAction">
	<title>Default Action</title>

	<p>
	The <tt>DefaultActionAttribute</tt> attribute provides a way to 
	associate a default action method that will be called if a 
	matching action method can not be found on the controller. One possible use is 
	so that a web designer can add views without the need for a 
	developer to add new action methods to the class. To associate a default action 
	with your controller, use the <tt>DefaultActionAttribute</tt> attribute. 
	This attribute can only be applied at the class level.
	</p>

	<p>
	If you don't specify a name in the <tt>DefaultActionAttribute</tt>, the method
	<tt>DefaultAction</tt> will be used.
	</p>
	
	<pre format="cs">
[DefaultAction]
public class HomeController : Controller
{
	public void Index()
	{
	}

	public void DefaultAction()
	{
    // default to a "not found" template
		string template = "notfound";

    // check and see if a template exists for the 
    // action indicated in the URL
		if (HasTemplate("home/" + Action))
		{
			template = Action;
		}

		RenderView(template);
	}
}</pre>

	<p>In the following example, the code specifies the name of the action to be invoked</p>

	<pre format="cs">
[DefaultAction("Foo")]
public class HomeController : Controller
{
	public void Index()
	{
	}

	public void Foo()
	{
		RenderText(Action + " was not found");
	}
}</pre>	
</section>


</body>
</document>
