<?xml version="1.0"?>
<document order="1">
  <properties>
    <title>Installing MonoRail</title>
  </properties>

  <body>

<intro>

<p>
MonoRail does not require any complex installation. 
However, you must associate the extension you want to 
use with the ASP.Net ISAPI on IIS.
</p>

<p>
If you want to deploy your web site in a shared host check <a href="#DeployingToSharedHost">Deploying to a shared host</a> for more information. 
</p>

</intro>

<section id="Internet_Information_Services">
	<title>Installing on Internet Information Services</title>

<p>
If you are running IIS, then you need to associate the 
the extension you want to use for MonoRail with ASP.Net 
ISAPI. This is a very simple operation. If you are concerned about 
shared hosting see the last section on this document.
</p>

<p>
Usually the extension is <tt>rails</tt> or <tt>castle</tt>, but 
you can use whatever extension you want.
</p>

<section>
	<title>First step: open the IIS MMC</title>

	<p>
	<img relative="images/monorail/Mrconf0.png"/>
	</p>
	
</section>

<section>
	<title>Second step: open the web site configuration</title>

	<p>
	<ol>
	<li>Right-click the <b>Default Web Site</b> item and choose <b>Properties</b> </li>
	<li>Select the <b>Home Directory</b> tab</li>
	<li>Click <b>Configurations</b> </li>
	</ol>
	</p>

	<p>
	<img relative="images/monorail/Mrconf1.png"/>
	</p>

	<p>
	<img relative="images/monorail/Mrconf2.png"/>
	</p>
	
</section>

<section>
	<title>Third step: associate the file extension</title>

	<p>
	<ol>
	<li>Click <b>Add</b></li>
	<li>Select the <b>ISAPI</b> DLL. You can copy-and-paste the complete DLL file name from another extension, such as <tt>.aspx</tt>. In most systems it will be something like 
<tt>C:\WINDOWS\Microsoft.NET\Framework\v1.1.4322\aspnet_isapi.dll</tt> 
(for .NET 1.1) or 
<tt>C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727\aspnet_isapi.dll</tt> (for .NET 2.0).
	</li>
	
	<li>Fill in the extension (for example <tt>.rails</tt>)
	as the file extension (make sure you do not omit the leading dot)
	</li>
	
	<li><b>Uncheck</b> the <b>Check file exists</b> check box
	
	</li>
	</ol>
	</p>
	
	<note>
	<p>
	<b>Windows XP Pro users</b>: If your <b>OK</b> 
	button is disabled even if you have <b>Administrator</b> rights: 
	click in the <b>Executable</b> text field. This will expand the 
	relative path to the dll into a full path and will enable the <b>OK</b> button.
	</p>
	</note>
	
	<p>
	<img relative="images/monorail/Mrconf3.png"/>
	</p>
	
</section>

</section>

<section id="Cassini">
	<title>Running with Cassini</title>

	<p>
 <a href="http://www.asp.net/Projects/Cassini/Download/Default.aspx?tabindex=0&amp;tabid=1">Cassini</a> is the easiest way to run the application as it requires nothing to be configured. It is suitable for development. You can run it from VS.Net and then be able to debug your application easily.
	</p>
	
	<p>
	<img relative="images/monorail/vsproppages_cassini.jpg" />
	</p>

	<p>
	If you are using Visual Studio 2005, then you might want to use the integrated
	web server as it is basically the same.
	</p>

</section>

<section id="XSP">
	<title>Mono and XSP</title>

	<p>
Open a shell and go to directory containing web.config. Call xsp:
	</p>

	<pre>xsp --port 80</pre>

	<p>
Notice that Apache2 + mod_mono is much more 
efficient than XSP. Use XSP only for tests and small 
applications development. 
	</p>

</section>

<section id="ApacheMono">
	<title>Running with Apache/Mono</title>

	<p>
	We assume that you have Apache Httpd, mod_mono and xsp from the Mono Project installed.
	</p>

	<section>
	<title>Configuring Apache</title>

	<p>
Add the following lines to your httpd.conf:
	</p>

<pre format="html">
<![CDATA[
LoadModule mono_module modules/mod_mono.so
AddHandler mono .rails .aspx .ashx .asmx .ascx .asax .config .ascx
MonoRunXSP True

Alias /test "/web/test"
AddMonoApplications default "/test:/web/test"
<Location /test>
	SetHandler mono
</Location>]]></pre>

	<p>
The first line adds the mod_mono module to Apache.

The second line sets up mod_mono to handle asp.net and MonoRail file extensions.

The third line allows Apache to start and stop the mod_mono_server process.

The following group of lines sets up /test to map to your application. 	
</p>

	<section>
	<title>Apache Httpd 2</title>

	<p>
If you build Mod_mono from sources, file mod_mono.conf will be installed at /etc/apache2/mod_mono.conf. To load the module you only need to create a symlink and reload Apache:
	</p>

<pre format="html">
ln -s /etc/apache2/mond_mono.conf /etc/apache2/mods-enabled/</pre>

	<p>
Place the configuration above on /etc/apache2/sites-enabled/default and change "Location" for "Directory" if your website lives in filesystem (http://httpd.apache.org/docs/2.2/mod/core.html#location). /etc/apache2/sites-enabled/default:
	</p>

<pre format="html">
<![CDATA[
AddHandler mono .rails .aspx .ashx .asmx .ascx .asax .config .ascx
Alias /example /var/www/example
AddMonoApplications default "/example:/var/www/example"
MonoRunXSP True
<Directory /var/www/example>
	SetHandler mono
</Directory>]]></pre>
 

	<p>
Paths could change depending of your distribution 
	</p>
	
	</section>
	</section>

	<section>
	<title>Deploying the application</title>

	<p>
	To deploy, simply copy your webapp's bin and Views directory as well
	as Global.asax and your web.config files to /web/test and then start Apache.
	</p>

	<p>
You can now point your browser at http://yourserver.com/test/index.rails or which ever .rails page you choose. 
	</p>
	
	</section>

</section>

<section id="DeployingToSharedHost">
	<title>Deploying to a shared host</title>

	<p>
	On a shared hosting, you may not be able to convince the host to map .rails extentions to the ASP.Net framework, which means that you wouldn't be able to "catch" a request for a rails document and map it to the appropriate controller.
	</p>

	<p>
	A simple solution for this problem is to just switch to .aspx extention (and change the httpHandler configuration, of course). For example:
	</p>

<pre format="html">
<![CDATA[
<httpHandlers>
	<add verb="*" path="*.ashx" 
	   type="Castle.MonoRail.Framework.MonoRailHttpHandlerFactory, Castle.MonoRail.Framework" />
</httpHandlers>]]></pre>

</section>

</body>
</document>
