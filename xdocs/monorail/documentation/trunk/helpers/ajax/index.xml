<?xml version="1.0"?>
<document order="0">
  <properties>
    <title>AjaxHelper</title>
  </properties>

  <body>

<intro>

<p>
MonoRail supports <a href="http://www.adaptivepath.com/publications/essays/archives/000385.php">Ajax</a> 
by using the <a href="http://prototype.conio.net/">prototype jslib</a>.
</p>

<p>
First of all, to use Ajax support you must make the javascript code available to your view:
</p>

<panels>
<panel title="With NVelocity View Engine">
<pre format="html"><![CDATA[

$AjaxHelper.GetJavascriptFunctions()

]]>
</pre>
</panel>
<panel title="With Brail">
<pre format="html">
TODO
</pre>
</panel>
</panels>

<p>
Which will render:
</p>

<pre>
&lt;script type=&quot;text/javascript&quot; src=&quot;/MonoRail/Files/AjaxScripts.rails&quot;&gt;&lt;/script&gt;
</pre>

<p>
This helper also exposes the Behaviour js library. To use it, invoke <tt>GetBehaviourFunctions</tt>:
</p>

<panels>
<panel title="With NVelocity View Engine">
<pre format="html"><![CDATA[

$AjaxHelper.GetBehaviourFunctions()

]]>
</pre>
</panel>
</panels>

</intro>

<section id="common">
	<title>Common parameters</title>
	
	<p>
	The more you know about the prototype library, the better. 
	We recommend the 
	<a href="http://www.sergiopereira.com/articles/prototype.js.html">Developer Notes for prototype.js</a>
	although it is a little outdated.
	</p>
	
	<p>
	The prototype library has to main classes to perform remote requests:
	<ul>
	<li>
	<tt>Ajax.Request</tt>: performs a remote invocation and allow you to work on the results with callbacks
	</li>
	
	<li>
	<tt>Ajax.Updater</tt>: extends the <tt>Ajax.Request</tt>  and updates a html
	element with the invocation result.
	</li>
	</ul>
	</p>
	
	<p>
	The following parameters 
	can be used on both <tt>Ajax.Request</tt> and <tt>Ajax.Updater</tt>:
	</p>
	
	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	
	<tr>
		<td><tt>url</tt></td>
		<td>
		The url to be invoked. You cannot specify parameters (like url?key=value). 
		If you need to pass parameters, use the <tt>with</tt> parameter.
		</td>
	</tr>
	<tr>
		<td><tt>method</tt></td>
		<td>
		Http method to be used on the invocation. Defaults to 'post'.
		</td>
	</tr>
	<tr>
		<td><tt>with</tt></td>
		<td>
		Defines the parameters to be send with the request. For example
		<tt>name=hammett&amp;age=27&amp;iscustomer=true</tt>
		</td>
	</tr>
	<tr>
		<td><tt>form</tt></td>
		<td>
		If you omit the <tt>with</tt> parameter but include the <tt>form</tt>
		then it will generate code to serialize the current form. Equivalent
		to use <tt>with=Form.serialize(this)</tt>.
		</td>
	</tr>
	
	</table>
	</p>

	<p>
	When you specify the parameter <tt>update</tt> or <tt>success</tt> or <tt>failure</tt>,
	the <tt>AjaxHelper</tt> will generate an <tt>Ajax.Updater</tt> call. 
	The following parameters applies to it:
	</p>
	
	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>update</tt></td>
		<td>
		Defines the name of the html element that will be
		updated with the return xml of the request. Usually a <tt>div</tt>
		is used.
		</td>
	</tr>
	<tr>
		<td><tt>success</tt>/<tt>failure</tt></td>
		<td>
		Defines the name of the html element that will be
		updated conditionally with the return xml of the request. If the request
		is successful, the elemented pointed by <tt>success</tt> will be
		updated, otherwise it will use the elemented pointed by <tt>failure</tt>.
		</td>
	</tr>
	<tr>
		<td><tt>evalScripts</tt></td>
		<td>
		Defines whether the returned xml should have its javascript content 
		evaluated. Defaults to <tt>true</tt>.
		</td>
	</tr>
	<tr>
		<td><tt>position</tt></td>
		<td>
		Defines a strategy to insert the resulting xml on the DOM. 
		The supported values are <tt>Before</tt>, <tt>Top</tt>, <tt>Bottom</tt> and <tt>After</tt>.
		</td>
	</tr>
	</table>
	</p>

	<p>
	Callbacks can also be used. The prototype will invoke
	the specified javascript functions
	during different steps in the remote invocation.
	</p>
	
	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>Loading</tt></td>
		<td>
		Called when the remote document is being 
		loaded with data by the browser.
		</td>
	</tr>
	<tr>
		<td><tt>Loaded</tt></td>
		<td>
		Called when the browser has finished loading
		the remote document.
		</td>
	</tr>
	<tr>
		<td><tt>Interactive</tt></td>
		<td>
		Called when the user can interact with the 
		remote document, even though it has not 
		finished loading.
		</td>
	</tr>
	<tr>
		<td><tt>Complete</tt></td>
		<td>
		Called when the XMLHttpRequest has completed.
		</td>
	</tr>
	<tr>
		<td><tt>OnSuccess</tt></td>
		<td>
		Called when the request was successfully (Status code &lt; 500)
		</td>
	</tr>
	<tr>
		<td><tt>OnFailure</tt></td>
		<td>
		Called when the request was not successfully (Status code &gt;= 500)
		</td>
	</tr>
	</table>
	</p>

	<p>
	You can also specify that a function must be executed before,
	after or define it as a condition to the Ajax request be issue.
	</p>

	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>before</tt></td>
		<td>
		Defines that the specified javascript function must run 
		before the Ajax request is sent.
		</td>
	</tr>
	<tr>
		<td><tt>after</tt></td>
		<td>
		Defines that the specified javascript function must run right 
		after the Ajax request is sent.
		</td>
	</tr>
	<tr>
		<td><tt>condition</tt></td>
		<td>
		Defines that the specified function must return <tt>true</tt> 
		to allow the Ajax request to take place.
		</td>
	</tr>
	</table>
	</p>	


</section>



<section id="tips">
	<title>Using it</title>

	<p>
	The best and easiest way to use the AjaxHelper is
	to check the API documentation to identify the method you want.
	Check its signature. Most of them will have an <tt>IDictionary</tt>
	parameter. This is an approach to make the ajax usage on
	views more self-documented.
	</p>
	
	<p>
	The method API documentation should highlight required parameters
	or special meanings that a parameter might have.
	Note that the common parameters discussed above 
	applies to most of the methods on AjaxHelper.
	</p>

</section>

<section id="examples">
	<title>Examples</title>
	
	<p>
	The following snippets exemplifies the AjaxHelper usage.
	</p>
	
<panels>
<panel title="With NVelocity View Engine">
<pre format="html"><![CDATA[
$AjaxHelper.LinkToRemote("Show the time on the server", "showtime.rails", "%{update='maindiv', Complete='showSuccessMessage()'}") 
]]>
</pre>
</panel>
</panels>

</section>

<section id="api">
	<title>API documentation</title>

<p>
You may also consult the 
<a href="Generated_AjaxHelper.html">API documentation for the AjaxHelper</a>.
</p>

</section>

<section>
	<title>Site map</title>

	<p>
	The following is a list of the documents related to 
	AjaxHelper:
	</p>

	<sitemap select="castle/monorail/documentation/trunk/helpers/ajax"/>	

</section>

</body>
</document>
