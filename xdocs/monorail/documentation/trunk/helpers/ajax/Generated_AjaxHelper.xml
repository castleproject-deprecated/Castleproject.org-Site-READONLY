<?xml version="1.0"?>
<document order="1">
  <properties>
    <title>AjaxHelper</title>
    <notoc/>
  </properties>

  <body>

<intro>
<p>
 MonoRail Helper that delivers AJAX capabilities. 
</p>

<note>
<p>
 The following libraries are exposed: <list type="table"><item><term> Prototype </term><description> Simplify ajax programming, among other goodies </description></item><item><term> Behaviour </term><description> Uses css selectors to bind javascript code to DOM elements </description></item></list>
</p>
</note>

</intro>



<section id="AjaxHelper_Constructors">
	<title>Constructors</title>

	<section>
	<title>AjaxHelper()</title>
<p>
Initializes a new instance of the <tt>Castle.MonoRail.Framework.Helpers.AjaxHelper</tt> class.
</p>


	</section>
</section>


<section id="AjaxHelper_Properties">
	<title>Properties</title>

	<p>
	<table class="commontable">
	<tr>
		<th>Name</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>Controller</tt></td>
		<td>
 Gets the controller. 
		</td>
	</tr>
	</table>
	</p>

</section>

<section id="AjaxHelper_Methods">
	<title>Methods</title>

	<section>
	<title>Service(System.IServiceProvider provider) 
</title>

<p>
 Invoked by the framework in order to give a chance to obtain other services 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>provider</tt></td>
		<td>
The service proviver
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>SetController(Castle.MonoRail.Framework.Controller controller) 
</title>

<p>
 Sets the controller. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>controller</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>GetJavascriptFunctions() 
: System.String
</title>

<p>
 Renders a Javascript library inside a single script tag. 
</p>



	</section>
	<section>
	<title>GetBehaviourFunctions() 
: System.String
</title>

<p>
 Renders a script tag refering the Behaviour library code. 
</p>



	</section>
	<section>
	<title>ReApply() 
: System.String
</title>

<p>
 Renders a script block invoking <tt>Behaviour.apply()</tt>
</p>



	</section>
	<section>
	<title>AddLoadEvent(System.String loadFunctionName) 
: System.String
</title>

<p>
 Renders a script block invoking <tt>Behaviour.addLoadEvent(loadFunctionName);</tt>
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>loadFunctionName</tt></td>
		<td>
The name of the js function to be invoked when the body is loaded
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>StartBehaviourRegister() 
: System.String
</title>

<p>
 Renders a script block starting the association of events to selector rules 
</p>



	</section>
	<section>
	<title>Register(System.String selector, System.String eventName, System.String jsFunctionName) 
: System.String
</title>

<p>
 Adds a entry to a registration array. Invoking it with <tt>#form</tt>, <tt>onsubmit</tt> and <tt>validate</tt> will produce <tt>'#form' : function(e){ e.onsubmit = validate; },</tt>
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>selector</tt></td>
		<td>
The css selector rule
		</td>
	</tr>
	<tr>
		<td><tt>eventName</tt></td>
		<td>
The name of the event on the element
		</td>
	</tr>
	<tr>
		<td><tt>jsFunctionName</tt></td>
		<td>
The function to be invoked in response to the event
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>EndBehaviourRegister() 
: System.String
</title>

<p>
 Renders the end of a script block that associated events to selector rules 
</p>



	</section>
	<section>
	<title>GenerateJSProxy(System.String proxyName) 
: System.String
</title>

<p>
 Generates an AJAX JavaScript proxy for the current controller. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>proxyName</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>GenerateJSProxy(System.String proxyName, System.String controller) 
: System.String
</title>

<p>
 Generates an AJAX JavaScript proxy for a given controller. <p> TODO: Better documentation </p>
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>proxyName</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>controller</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>GenerateJSProxy(System.String proxyName, System.String area, System.String controller) 
: System.String
</title>

<p>
 Generates an AJAX JavaScript proxy for a given controller. <p> TODO: Better documentation </p>
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>proxyName</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>area</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>controller</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>LinkToFunction(System.String innerContent, System.String functionCodeOrName, System.Collections.IDictionary attributes) 
: System.String
</title>

<p>
<p> Returns a link that'll trigger a javascript +function+ using the onclick handler and return false after the fact. </p><pre format="cs">
&lt;a href="javascript:void(0);" onclick="functionCodeOrName; return false"&gt;innerContent&lt;/a&gt;
</pre>
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>innerContent</tt></td>
		<td>
Link content
		</td>
	</tr>
	<tr>
		<td><tt>functionCodeOrName</tt></td>
		<td>
Function definition
		</td>
	</tr>
	<tr>
		<td><tt>attributes</tt></td>
		<td>
Attributes to be applied to the html element
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>LinkToFunction(System.String innerContent, System.String functionCodeOrName) 
: System.String
</title>

<p>
 Returns a link that'll trigger a javascript +function+ using the onclick handler and return false after the fact. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>innerContent</tt></td>
		<td>
Link content
		</td>
	</tr>
	<tr>
		<td><tt>functionCodeOrName</tt></td>
		<td>
Function definition
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>ButtonToFunction(System.String innerContent, System.String functionCodeOrName, System.Collections.IDictionary attributes) 
: System.String
</title>

<p>
 Returns a button that'll trigger a javascript +function+ using the onclick handler and return false after the fact. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>innerContent</tt></td>
		<td>
Button legend
		</td>
	</tr>
	<tr>
		<td><tt>functionCodeOrName</tt></td>
		<td>
Function definition
		</td>
	</tr>
	<tr>
		<td><tt>attributes</tt></td>
		<td>
Attributes to be applied to the html element
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>ButtonToFunction(System.String innerContent, System.String functionCodeOrName) 
: System.String
</title>

<p>
 Returns a button that'll trigger a javascript +function+ using the onclick handler and return false after the fact. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>innerContent</tt></td>
		<td>
Button legend
		</td>
	</tr>
	<tr>
		<td><tt>functionCodeOrName</tt></td>
		<td>
Function definition
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>ButtonToRemote(System.String innerContent, System.String url, System.Collections.IDictionary options) 
: System.String
</title>

<p>
 Creates a button that if clicked will fire an Ajax invocation. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>innerContent</tt></td>
		<td>
Button legend
		</td>
	</tr>
	<tr>
		<td><tt>url</tt></td>
		<td>
The URL of the Ajax action
		</td>
	</tr>
	<tr>
		<td><tt>options</tt></td>
		<td>
The options for the Ajax call
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>ButtonToRemote(System.String innerContent, System.String url, System.Collections.IDictionary options, System.Collections.IDictionary htmloptions) 
: System.String
</title>

<p>
 Creates a button that if clicked will fire an Ajax invocation. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>innerContent</tt></td>
		<td>
Button legend
		</td>
	</tr>
	<tr>
		<td><tt>url</tt></td>
		<td>
the url
		</td>
	</tr>
	<tr>
		<td><tt>options</tt></td>
		<td>
the options for the ajax invocations
		</td>
	</tr>
	<tr>
		<td><tt>htmloptions</tt></td>
		<td>
Attributes to be applied to the html element
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>LinkToRemote(System.String name, System.String url, System.Collections.IDictionary options) 
: System.String
</title>

<p>
 Returns a link to a remote action defined by <tt>options[:url]</tt> (using the url_for format) that's called in the background using XMLHttpRequest. The result of that request can then be inserted into a DOM object whose id can be specified with <tt>options[:update]</tt>. Usually, the result would be a partial prepared by the controller with either render_partial or render_partial_collection. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>name</tt></td>
		<td>

		</td>
	</tr>
	<tr>
		<td><tt>url</tt></td>
		<td>

		</td>
	</tr>
	<tr>
		<td><tt>options</tt></td>
		<td>

		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>LinkToRemote(System.String name, System.String url, System.Collections.IDictionary options, System.Collections.IDictionary htmloptions) 
: System.String
</title>

<p>
Missing summary
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>name</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>url</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>options</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>htmloptions</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>BuildFormRemoteTag(System.String url, System.Collections.IDictionary options) 
: System.String
</title>

<p>
 Returns a form tag that will submit using XMLHttpRequest in the background instead of the regular reloading POST arrangement. Even though it's using Javascript to serialize the form elements, the form submission will work just like a regular submission as viewed by the receiving side (all elements available in @params). The options for specifying the target with :url and defining callbacks is the same as link_to_remote. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>url</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>options</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>BuildFormRemoteTag(System.Collections.IDictionary options) 
: System.String
</title>

<p>
 Returns a form tag that will submit using XMLHttpRequest in the background instead of the regular reloading POST arrangement. Even though it's using Javascript to serialize the form elements, the form submission will work just like a regular submission as viewed by the receiving side (all elements available in @params). The options for specifying the target with :url and defining callbacks is the same as link_to_remote. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>options</tt></td>
		<td>

		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>ObserveField(System.String fieldId, System.Int32 frequency, System.String url, System.String idOfElementToBeUpdated, System.String with) 
: System.String
</title>

<p>
 Observes the field with the DOM ID specified by +field_id+ and makes an Ajax when its contents have changed. Required +options+ are: <tt>:frequency</tt>:: The frequency (in seconds) at which changes to this field will be detected. <tt>:url</tt>:: +url_for+-style options for the action to call when the field has changed. Additional options are: <tt>:update</tt>:: Specifies the DOM ID of the element whose innerHTML should be updated with the XMLHttpRequest response text. <tt>:with</tt>:: A Javascript expression specifying the parameters for the XMLHttpRequest. This defaults to 'value', which in the evaluated context refers to the new field value. Additionally, you may specify any of the options documented in LinkToRemote 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>fieldId</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>frequency</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>url</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>idOfElementToBeUpdated</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>with</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>ObserveField(System.String fieldId, System.Int32 frequency, System.String url, System.Collections.IDictionary options) 
: System.String
</title>

<p>
 Observes the field with the DOM ID specified by +field_id+ and makes an Ajax when its contents have changed. Required +options+ are: <tt>:frequency</tt>:: The frequency (in seconds) at which changes to this field will be detected. <tt>:url</tt>:: +url_for+-style options for the action to call when the field has changed. Additional options are: <tt>:update</tt>:: Specifies the DOM ID of the element whose innerHTML should be updated with the XMLHttpRequest response text. <tt>:with</tt>:: A Javascript expression specifying the parameters for the XMLHttpRequest. This defaults to 'value', which in the evaluated context refers to the new field value. Additionally, you may specify any of the options documented in LinkToRemote 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>fieldId</tt></td>
		<td>

		</td>
	</tr>
	<tr>
		<td><tt>frequency</tt></td>
		<td>

		</td>
	</tr>
	<tr>
		<td><tt>url</tt></td>
		<td>

		</td>
	</tr>
	<tr>
		<td><tt>options</tt></td>
		<td>

		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>ObserveField(System.Collections.IDictionary options) 
: System.String
</title>

<p>
 Observes the field with the DOM ID specified by <tt>field</tt> and makes an Ajax call when its contents changes. <p> The following entries must exist in the dictionary: </p><list type="bullet"><item><term>field</term><description>The DOM field to be observed</description></item><item><term>url</term><description>url to to call when the field has changed</description></item><item><term>frequency</term><description>The frequency (in seconds) at which changes to this field will be detected</description></item></list><p> The following are optional entries: </p><list type="bullet"><item><term>update</term><description>Specifies the DOM ID of the element whose innerHTML should be updated with the XMLHttpRequest response text</description></item><item><term>with</term><description>A Javascript expression specifying the parameters for the XMLHttpRequest. This defaults to 'value', which in the evaluated context refers to the new field value</description></item></list>
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>options</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>ObserveForm(System.String formId, System.Int32 frequency, System.String url, System.String idOfElementToBeUpdated, System.String with) 
: System.String
</title>

<p>
 Like <tt>Castle.MonoRail.Framework.Helpers.AjaxHelper.ObserveField(System.String,System.Int32,System.String,System.String,System.String)</tt>, but operates on an entire form identified by the DOM ID <tt>formId</tt>. options are the same as <tt>Castle.MonoRail.Framework.Helpers.AjaxHelper.ObserveField(System.String,System.Int32,System.String,System.String,System.String)</tt>, except the default value of the <tt>:with</tt> option evaluates to the serialized (request String) value of the form. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>formId</tt></td>
		<td>

		</td>
	</tr>
	<tr>
		<td><tt>frequency</tt></td>
		<td>

		</td>
	</tr>
	<tr>
		<td><tt>url</tt></td>
		<td>

		</td>
	</tr>
	<tr>
		<td><tt>idOfElementToBeUpdated</tt></td>
		<td>

		</td>
	</tr>
	<tr>
		<td><tt>with</tt></td>
		<td>

		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>ObserveForm(System.String formId, System.Collections.IDictionary options) 
: System.String
</title>

<p>
 Like <tt>Castle.MonoRail.Framework.Helpers.AjaxHelper.ObserveField(System.String,System.Int32,System.String,System.String,System.String)</tt>, but operates on an entire form identified by the DOM ID <tt>formId</tt>. options are the same as <tt>Castle.MonoRail.Framework.Helpers.AjaxHelper.ObserveField(System.String,System.Int32,System.String,System.String,System.String)</tt>, except the default value of the <tt>:with</tt> option evaluates to the serialized (request String) value of the form. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>formId</tt></td>
		<td>

		</td>
	</tr>
	<tr>
		<td><tt>options</tt></td>
		<td>

		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>ObserveForm(System.Collections.IDictionary options) 
: System.String
</title>

<p>
 Observes all elements within a form with the DOM ID specified by <tt>form</tt> and makes an Ajax call when its contents changes. <p> The following entries must exist in the dictionary: </p><list type="bullet"><item><term>form</term><description>The form element id</description></item><item><term>url</term><description>url to to call when the field has changed</description></item><item><term>frequency</term><description>The frequency (in seconds) at which changes to this field will be detected</description></item></list><p> The following are optional entries: </p><list type="bullet"><item><term>update</term><description>Specifies the DOM ID of the element whose innerHTML should be updated with the XMLHttpRequest response text</description></item><item><term>with</term><description>A Javascript expression specifying the parameters for the XMLHttpRequest. This defaults to 'value', which in the evaluated context refers to the new field value</description></item></list>
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>options</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>PeriodicallyCallRemote(System.Collections.IDictionary options) 
: System.String
</title>

<p>
 Periodically invokes the specified url. You can use the options to override the default frequency (defaults to 10 seconds) 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>options</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>PeriodicallyCallRemote(System.String url, System.Collections.IDictionary options) 
: System.String
</title>

<p>
 Periodically invokes the specified url. You can use the options to override the default frequency (defaults to 10 seconds) 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>url</tt></td>
		<td>
url to be invoked periodically
		</td>
	</tr>
	<tr>
		<td><tt>options</tt></td>
		<td>

		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>InputTextWithAutoCompletion(System.Collections.IDictionary parameters, System.Collections.IDictionary tagAttributes) 
: System.String
</title>

<p>
Missing summary
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>parameters</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>tagAttributes</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>InputTextWithAutoCompletion(System.String inputName, System.String url, System.Collections.IDictionary tagAttributes, System.Collections.IDictionary completionOptions) 
: System.String
</title>

<p>
 Rendes a input field with Google style autocomplete enabled. The specified url is used to gather the contents for the auto complete panel, so and your action should return filtered and sorted results. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>inputName</tt></td>
		<td>
input element id
		</td>
	</tr>
	<tr>
		<td><tt>url</tt></td>
		<td>
url used to gather results
		</td>
	</tr>
	<tr>
		<td><tt>tagAttributes</tt></td>
		<td>
attributes for the input element
		</td>
	</tr>
	<tr>
		<td><tt>completionOptions</tt></td>
		<td>
options for the autocomplete
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>AutoCompleteInputText(System.String elementId, System.String url, System.Collections.IDictionary options) 
: System.String
</title>

<p>
 Generates an javascript block enabling auto completion for the specified input text id (<tt>elementId</tt>). You can specify the element to be updated using the options dictionary (<tt>key 'update'</tt>), if you don't we assume <tt>elementId + "autocomplete"</tt>. 
</p>


<note>
<p>
 It's assumed that the url invoked returns a unordered list. 
</p>
</note>

	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>elementId</tt></td>
		<td>
The element id (input type=text)
		</td>
	</tr>
	<tr>
		<td><tt>url</tt></td>
		<td>
The url to be invoked returning results
		</td>
	</tr>
	<tr>
		<td><tt>options</tt></td>
		<td>
Custom options
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>BuildRemoteFunction(System.String url, System.Collections.IDictionary options) 
: System.String
</title>

<p>
Missing summary
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>url</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>options</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>RemoteFunction(System.Collections.IDictionary options) 
: System.String
</title>

<p>
Missing summary
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>options</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>BuildAjaxOptions(System.Collections.IDictionary jsOptions, System.Collections.IDictionary options) 
: System.String
</title>

<p>
Missing summary
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>jsOptions</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>options</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>BuildCallbackFunction(Castle.MonoRail.Framework.Helpers.CallbackEnum callback, System.String code, System.String name) 
: System.String
</title>

<p>
Missing summary
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>callback</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>code</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>name</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>BuildObserver(System.String clazz, System.String name, System.Collections.IDictionary options) 
: System.String
</title>

<p>
Missing summary
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>clazz</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>name</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>options</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>GetOptions(System.String url, System.Collections.IDictionary options) 
: System.Collections.IDictionary
</title>

<p>
Missing summary
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>url</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>options</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>GetOptions(System.String url, System.String idOfElementToBeUpdated, System.String with, System.String loading, System.String loaded, System.String complete, System.String interactive) 
: System.Collections.IDictionary
</title>

<p>
Missing summary
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>url</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>idOfElementToBeUpdated</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>with</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>loading</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>loaded</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>complete</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>interactive</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>MergeOptions(System.Collections.IDictionary userOptions, System.Collections.IDictionary defaultOptions) 
</title>

<p>
 Merges <tt>userOptions</tt> with <tt>defaultOptions</tt> placing results in <tt>userOptions</tt>. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>userOptions</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>defaultOptions</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>GetAttributes(System.Collections.IDictionary attributes) 
: System.String
</title>

<p>
 Generates HTML element attributes string from <tt>attributes</tt><p>. </p><pre format="cs">
key1="value1" key2</pre>
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>attributes</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>BuildQueryString(System.Collections.IDictionary paramMap) 
: System.String
</title>

<p>

</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>paramMap</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>ConcatQueryString(System.String leftParams, System.String rightParams) 
: System.String
</title>

<p>

</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>leftParams</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>rightParams</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>HtmlEncode(System.String content) 
: System.String
</title>

<p>
 HTML encodes a string and returns the encoded string. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>content</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>UrlEncode(System.String content) 
: System.String
</title>

<p>
 URL encodes a string and returns the encoded string. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>content</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>UrlPathEncode(System.String content) 
: System.String
</title>

<p>
 URL encodes the path portion of a URL string and returns the encoded string. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>content</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>JavaScriptEscape(System.String content) 
: System.String
</title>

<p>
 Escapes JavaScript with Url encoding and returns the encoded string. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>content</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section>
	<title>ScriptBlock(System.String scriptContents) 
: System.String
</title>

<p>
<p> Generates script block. </p><pre format="cs">
 &lt;script&gt; scriptContents &lt;/script&gt; </pre>
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>scriptContents</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>
	</section>
</section>

</body>
</document>
