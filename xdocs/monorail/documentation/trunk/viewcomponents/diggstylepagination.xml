<?xml version="1.0"?>
<document order="4">
  <properties>
    <title>DiggStylePaginationComponent</title>
  </properties>

  <body>

<intro>

<p>
The DiggStylePagination component allows to create standardized but customizable
pagination links for use with MonoRail's
<a href="..\helpers\pagination\index.html">PaginationHelper</a>.
</p>
<p>
    You can download the complete sourcecode for the examples below:

    <download 
	relative="!download/monorail/trunk/MonoRail.DiggStylePagination.zip" 
	filename="DiggStylePagination.zip"/>

</p>
</intro>

<section id="basicusage">
    <title>Basic Usage</title>
    
    <p>
        Suppose you have a list of about 200 items to display. Using MonoRail it
        is easy to create a pagination for that items, such that only 20 at a
        time are displayed:
    </p>
    <pre format="cs"><![CDATA[
public class HomeController : SmartDispatcherController
{
	public void Index()
	{
            PropertyBag["items"] =
                PaginationHelper.CreatePagination<MyEntity>(
                    this, // controller
                    MyEntity.FindAll(new Order("Index", true)), // list
                    10 // number of items per page
                );
	}
}    
    ]]></pre>
    <p>
        <tt>items</tt> is an instance of <tt>IPaginatedPage</tt>. It can be used
        like a list in NVelocity templates. Additionally, it has properties to
        determine the current status of the pagination. These properties can be
        used to create pagination links, which is described in the
        <a href="..\helpers\pagination\index.html">PaginationHelper</a>
        documentation.
    </p>
    <p>
        However, building pagination links is a repeating task that should be
        automated. This is what the DiggStylePaginationComponent does.
    </p>
    <pre format="html"><![CDATA[
<table>
<tr><th>Name</th><th>Index</th></tr>
#foreach($row in $items)
  <tr>
    <td>$row.Name</td>
    <td>$row.Index</td>
  </tr>
#end
<tr>
    <td colspan="2">
#component(DiggStylePagination with "page=$items")
    </td>
</tr>
</table>
    ]]></pre>
    <p>
        This creates a production ready pagination line as shown in the picture
        below:
    </p>
    <img relative="images/monorail/DiggPaginationBasicResults.png"/>
</section>
<section id="simplecustomize">
    <title>Simple Customizing</title>
    <section id="changingcaptions">
        <title>Customizing Captions</title>
        
        <p>
            When creating a non-english application, the labels
            <tt>&amp;laquo; prev</tt> and <tt>next &amp;raquo;</tt> don't make any
            sense. This can be changed by using a DiggStylePagination
            blockcomponent and sections to customize the link text:
        </p>
        <pre format="html"><![CDATA[
...data same as above...
<tr>
    <td colspan="2">
#blockcomponent(DiggStylePagination with "page=$items")
    #prev
        &laquo;
    #end
    #next
        &raquo;
    #end
#end
    </td>
</tr>
        ]]></pre>
        <p>
            You can see the results below. Pay attention to encircled links.
        </p>
        <img relative="images/monorail/DiggPaginationNextPrevResults.png"/>
    </section>
    <section id="suppressRender">
        <title>Suppressing Display</title>
        <p>
            The problem is that if there are less items than the specified page
            size, the pagination is still displayed.
        </p>
        <img relative="images/monorail/DiggPaginationOnePageResults1.png"/>
        <p>
            This can be suppressed by specifiying the parameter
            <tt>RenderIfOnlyOnePage</tt>.
        </p>
        <pre format="html"><![CDATA[
...data same as above...
<tr>
    <td colspan="2">
#component(DiggStylePagination with "page=$items" "renderifonlyonepage=false")
    </td>
</tr>
        ]]></pre>
        <p>
            This removes the pagination itself from the page, but the surrounding
            table cell is still rendered. In this example this is visible by a
            thicker bottom border, but depending on the stylesheet this might
            lead to more ugly effects.
        </p>
        <img relative="images/monorail/DiggPaginationOnePageResults2.png"/>
        <p>
            To prevent this, it is possible to render the surrounding HTML by
            using the sections <tt>startblock</tt> and <tt>endblock</tt>. That
            way the HTML is only rendered when the pagination is needed.
        </p>
        <pre format="html"><![CDATA[
...data same as above...
#blockcomponent(DiggStylePagination with "page=$items" "renderifonlyonepage=false")
#startblock
<tr>
    <td colspan="2">
#end
#endblock
    </td>
</tr>
#end
#end
        ]]></pre>        
        <img relative="images/monorail/DiggPaginationOnePageResults3.png"/>
    </section>
    <section id="changingstyle">
        <title>Changing Link Styles</title>
        <p>
            Rectangular, button-like links are perhaps not your preferred style
            of displaying the pagination. When you need to change the way links
            are displayed, you must do so by using CSS classes.
        </p>
        <p>
            DiggStylePaginationComponent emits the style within the HTML links,
            so you need to both specify CSS classes and force the component to
            use these classes.
        </p>
        <pre format="html"><![CDATA[
...data same as above...
<tr>
    <td colspan="2">
#component(DiggStylePagination with "page=$items" "useinlinestyle=false")
    </td>
</tr>
        ]]></pre>
        <p>This results in the following HTML rendered:</p>
        <pre format="html"><![CDATA[
<div class="pagination">
<span class="disabled">&laquo; prev</span>
<span class="current">1</span>
<a href="/home/index6.rails?page=2">2</a>
<a href="/home/index6.rails?page=3">3</a>
<a href="/home/index6.rails?page=4">4</a>
<a href="/home/index6.rails?page=5">5</a>
<a href="/home/index6.rails?page=6">6</a>
&#8230;<a href="/home/index6.rails?page=19">19</a>
<a href="/home/index6.rails?page=20">20</a>
<a href="/home/index6.rails?page=2">next &raquo;</a>

</div>
        ]]></pre>
        <p>
            This allows you to customize the output using the following CSS
            classes:
            <ul>
                <li>
                    <tt>pagination</tt> for the complete box containing the
                    pagination.
                </li>
                <li>
                    <tt>disabled</tt> for "buttons" that are not disabled.
                </li>
                <li>
                    <tt>current</tt> for displaying the current page number.
                </li>
            </ul>
            Additionnally, you must specify CSS commands for
            <tt>.pagination a</tt> if you want to customize the links themselves.
        </p>
        <p>Here is a comprehensive example that shows all four options:</p>
        <pre format="html"><![CDATA[
<style type="text/css" media="screen">
    .pagination {
        /* Complete box */
        background-color: yellow;
        font-size: large;
    }
    
    .pagination a {
        /* links */
        color: red;
    }
    
    .disabled {
        /* disabled "buttons" */
        color: purple;
    }
    
    .current {
        /* current page */
        color: blue;
    }
</style>
        ]]></pre>
        <p>This one renders like shown below:</p>
        <img relative="images/monorail/DiggPaginationClasses.png"/>
    </section>
    <section id="numberoflinks">
        <title>Changing the Number of Links displayed</title>
        <p>
            If you have a look at the pictures above, you might have noticed
            that not all pages are linked. By default, only the two pages before
            and after the current page are linked directly to save space.
            It is possible to customize the number of links to be displayed
            on each side of the current page before the ellipsis with the
            parameter <tt>adjacents</tt>.
        </p>
        <p>
            However, the algorithm used doesn't work well with large numbers, so
            you should use one of the following values:
            <ul>
                <li><tt>0</tt> or <tt>1</tt> for very narrow tables</li>
                <li><tt>3</tt> for wide tables with a small number of expected
                pages. This setting suppresses rendering ellipsis for less than
                ten pages.</li>
                <li><tt>2</tt> or nothing (it is the default) for the rest.</li>
            </ul>
        </p>
    </section>
</section>
<section id="customizeaction">
    <title>Customizing the Actions</title>    
    <p>
        So far, we have only changed how the links are displayed. This is good
        enough for simple pages, but if you provide means of searching or
        filtering the data, you must come up with a possibility to save the
        parameters for fetching data of the different pages.
    </p>
    <p>
        Though it is not directly visible to the programmer, any time a
        different page is displayed, there is a roundtrip to the server using
        the original controller action. This means that for paging search
        results, you must pass the search parameters to the controller along with
        the pagination links.
    </p>
    <p>
        This can be done using different techniques:
        <ul>
            <li>
                Storing the search or filter params in the sessions. Some users
                are quite fond of this, because they always need the same subset
                of results. Others, however, are constantly searching for
                "disappeared" rows, so you should not use session variables only
                for round-trip-conservation of parameters.
            </li>
            <li>
                Adding the search parameters to the URL of the page links. This
                is the preferable solution for most simple searches and filters.
            </li>
            <li>
                Calling a JavaScript function from the links. Then use either
                AJAX for exchanging the rows to be displayed or construct an URL
                using JavaScript.
            </li>
        </ul>
    </p>
    <section id="urlparam">
        <title>Adding Parameters to the URL</title>
        <p>
            The simplest method is specifying the URL to invoke by using the
            <tt>url</tt> parameter of the DiggStylePaginationComponent. This
            allows you to add the needed query params.
        </p>
        <p>
            If you look at the example of doing this below, you should notice
            that the URL is assembled in an extra <tt>#set</tt>-statement. This
            is intentional; you cannot specify a string as parameter value that
            contains parameters itself.
        </p>
        <pre format="html"><![CDATA[
<table>
<tr><th>Name</th><th>Index</th></tr>
#foreach($row in $items)
  <tr>
    <td>$row.Name</td>
    <td>$row.Index</td>
  </tr>
#end
<tr>
    <td colspan="2">
#set ($url="index8.rails?desc=$desc")
#component(DiggStylePagination with "page=$items" "url=$url")
## The statement below won't work!
##component(DiggStylePagination with "page=$items" "url='index8.rails?desc=$desc'")
    </td>
</tr>
</table>
<a href="index8.rails">Ascending list</a> &mdash; 
<a href="index8.rails?desc=true">Descending list</a>
        ]]></pre>
    </section>
    <section id="urlscript">
        <title>Using a JavaScript function as Link target</title>
        
        <p>
            From the pagination side of view, this is dead simple. Just specify
            the name of a JavaScript function defined elsewhere in the page and
            it will be called with the page number as a parameter on every
            pagination link click.
        </p>
        <p>
            DiggStylePagination however doesn't help with consuming this
            information, so it is not recommended unless you are using AJAX
            nonetheless.
        </p>
        <pre format="html"><![CDATA[
...data same as above...
<tr>
    <td colspan="2">
#component(DiggStylePagination with "page=$items" "paginatefunction=foo")
    </td>
</tr>
<script type="text/javascript">
    function foo(page)
    {
        var a = new AjaxMagicObject();
        a.page = page;
        a.fetchAndDisplayData();
    }
</script>
        ]]></pre>
        <p>
            DiggStylePagination will render this as
            <tt>javascript:foo(page);void(0);</tt>, so you really need to specify
            only the function name.
        </p>
    </section>
    <section id="linksection">
        <title>Building the Links with #link</title>
        
        <p>
            If all else fails, you can provide a block for creating the links.
            Just be warned, this should really be used only if all else fails;
            because there is no automation, you need to create all the HTML by
            yourself.
        </p>
        <p>
            To build your links, you get the following variables as parameters:
            <ul>
                <li>
                    <tt>$pageIndex</tt> contains the page number of the link to
                    render.
                </li>
                <li>
                    <tt>$url</tt> contains the url to the controller action. If
                    it wasn't specified via the url-parameter discussed above,
                    it is simple an URL to the current page.
                </li>
                <li>
                    <tt>$text</tt> contains the text that would have been
                    rendered by the default render functions. This is either a
                    number, prev, next or a custom text specified using
                    <tt>#prev</tt> or <tt>#next</tt>.
                </li>
            </ul>
            To get a working pagination, you must not forget to pass a parameter
            named <tt>page</tt> to the controller action.
        </p>
        <p>
            Using <tt>#link</tt> has the caveat, that it is not called for
            <ul>
                <li>rendering the current page</li>
                <li>rendering ellipsis</li>
                <li>rendering disabled links</li>
            </ul>
        </p>
        <p>
            The following examples renders all links as buttons. The (imperfect)
            result is shown below.
        </p>
        <pre format="html"><![CDATA[
<tr>
    <td colspan="2">
#blockcomponent(DiggStylePagination with "page=$items")
#link
<button type="button" onclick="location.href='$url?page=$pageIndex';">$text</button>
#end
#end
    </td>
</tr>
        ]]></pre>
        <img relative="images/monorail/DiggPaginationButtons.png"/>
    </section>
</section>
</body>
</document>
