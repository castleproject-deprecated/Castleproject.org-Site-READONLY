<?xml version="1.0"?>
<document order="0">
  <properties>
    <title>View Engines</title>
  </properties>

  <body>

<intro>

<p>
View engines are responsible for rendering the 
contents back to the browser. You can create 
your view engine by simply implementing the 
interface <tt>IViewEngine</tt>. For example, you can 
create a XML/XSL view engine, or WML, or whatever 
you can think of. Notice however that the view 
should be responsible for displaying logic and nothing more, nothing less. 
</p>

<p>
The view engine implementation is also supposed to 
invoke a few hooks on the controller instance, namely 
<tt>PreSendView</tt> and <tt>PostSendView</tt>.
</p>

<p>
Below is the declaration of the <tt>IViewEngine</tt> 
interface.
</p>

<pre format="cs">
<![CDATA[
/// <summary>
/// Depicts the contract used by the engine
/// to process views, in an independent manner.
/// </summary>
public interface IViewEngine
{
	/// <summary>
	/// Evaluates whether the specified template exists.
	/// </summary>
	/// <returns><c>true</c> if it exists</returns>
	bool HasTemplate(String templateName);

	/// <summary>
	/// Processes the view - using the templateName 
	/// to obtain the correct template,
	/// and using the context to output the result.
	/// </summary>
	void Process(IRailsEngineContext context, Controller controller, String templateName);

	///<summary>
	/// Processes the view - using the templateName 
	/// to obtain the correct template
	/// and writes the results to the System.TextWriter. 
	/// No layout is applied!
	/// </summary>
	void Process(TextWriter output, IRailsEngineContext context, Controller controller, String templateName);

	/// <summary>
	/// Wraps the specified content in the layout using 
	/// the context to output the result.
	/// </summary>
	void ProcessContents(IRailsEngineContext context, Controller controller, String contents);
}
]]>
</pre>
	
</intro>

<section>
	<title>XHTML vs HTML</title>

<p>
By default the view engines will return pages with the MIME type <tt>text/html</tt>. 
If you would like to use <tt>application/xml+xhtml</tt> you can set this in your web.config file:
</p>

<pre format="html">
<![CDATA[
<viewEngine 
  viewPathRoot="views"
  xhtmlRendering="true"
  customEngine="Castle.MonoRail.Framework.Views.NVelocity.NVelocityViewEngine, 
Castle.MonoRail.Framework.Views.NVelocity" />
]]>
</pre>

<p>
If this attribute is set to <tt>true</tt>, and the user agent 
says it will accept <tt>application/xml+xhtml</tt> then the page 
will be returned using that MIME type instead. For 
browsers such as IE which do not understand the new 
MIME type, <tt>text/html</tt> will still be used. 
</p>

</section>

<section>
	<title>Content</title>
	<sitemap select="castle/monorail/documentation/trunk/viewengines"/>
</section>

</body>

</document>
