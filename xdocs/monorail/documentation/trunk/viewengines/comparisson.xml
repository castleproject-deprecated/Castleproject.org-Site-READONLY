<?xml version="1.0"?>
<document order="10">
  <properties>
    <title>View Engines comparisson</title>
  </properties>

  <body>

<intro>

<p>
<table class="commontable">
<tr>
	<th>Engine</th>
	<th>Language</th>
	<th>Compiled</th>
	<th>Helpers</th>
	<th>ViewComponents</th>
</tr>

<tr>
	<td>WebForms</td>
	<td align="center">Any .net language</td>
	<td align="center">Yes</td>
	<td align="center">Yes</td>
	<td align="center">No</td>
</tr>

<tr>
	<td>NVelocity</td>
	<td align="center">Velocity</td>
	<td align="center">No</td>
	<td align="center">Yes</td>
	<td align="center">Yes</td>
</tr>

<tr>
	<td>Brail</td>
	<td align="center">boo</td>
	<td align="center">Yes</td>
	<td align="center">Yes</td>
	<td align="center">Yes</td>
</tr>

<tr>
	<td>StringTemplate (from Contrib)</td>
	<td align="center">String Template</td>
	<td align="center">No</td>
	<td align="center">Partially</td>
	<td align="center">Yes</td>
</tr>

</table>
</p>

</intro>

<section>
	<title>Web Forms View Engine</title>

	<p>
	<b>Pros:</b>
	<ul>
<li>Familiar .NET Syntax</li>
<li>Set of useful Web Controls</li>
	</ul>
	</p>

	<p>
	<b>Cons:</b>
	<ul>
<li>Does not implement nor supports MVC logic, so it's easy to implement more logic than view logic on the web form, leading to scattered logic</li>
<li> Limitations apply, see the WebForms View Engine documentation</li>
<li>Although there is an <a href="http://mono-project.com/">open-source implementation</a> 
    of it, it is <a href="http://mono-project.com/FAQ:_Licensing#Patents"> not patent-free</a>
	and might be discontinued or become unsupported/incompatible in the long term.</li>
	</ul>
	</p>

</section>

<section>
	<title>NVelocity View Engine</title>

	<p>
	<b>Pros:</b>
	<ul>
<li>Limited set of functions forces you to code only view logic (good for separation of concerns)</li>
<li>Easy to learn <a relative="others/nvelocity/index.rails">template language</a></li>
<li>Same syntax as <a href="http://jakarta.apache.org/velocity/">Velocity</a> (for Java), allowing view reuse among different platforms</li>
<li>Reuse skills for people with Java experience</li>
	</ul>
	</p>

	<p>
	<b>Cons:</b>
	<ul>
<li>Interpreted</li>
<li>Community seem very inactive. That forced Castle Project 
to fork NVelocity and work on improvements and bug fixes.</li>
	</ul>
	</p>

</section>

<section>
	<title>Brail</title>

	<p>
	<b>Pros:</b>
	<ul>
<li>Use the wrist friendly and feature-rich 
<a href="http://boo.codehaus.org">Boo language</a> for templates.</li>
<li>Compiled (good performance!)</li>
	</ul>
	</p>

	<p>
	<b>Cons:</b>
	<ul>
<li>Requires additional assemblies</li>
<li>Python syntax (which one can consider as a pro)</li>
	</ul>
	</p>

</section>

<section>
	<title>StringTemplate View Engine</title>

	<p>
	<b>Pros:</b>
	<ul>
<li> ST template engine 'enforces' model-view separation.</li>
<li> Simple but powerful syntax with good documentation and articles. See the <a href="http://www.antlr.org/wiki/display/ST/CSharp+StringTemplate+Documentation">C# StringTemplate docs</a>.</li>
<li> Same syntax as StringTemplate for Java, allowing view reuse among different platforms.</li>
<li> Actively developed and supported with a healthy user community</li>
	</ul>
	</p>

	<p>
	<b>Cons:</b>
	<ul>
<li> Interpreted</li>
<li> Strict model-view separation means ST can't use MonoRail's helpers directly</li>
<li> Custom helpers must be written in StringTemplate language, instead of plain .NET classes</li>
<li> Requires additional assemblies</li>
<li> ViewEngine (integration with MonoRail) still in development</li>
	</ul>
	</p>

</section>

</body>

</document>
