<?xml version="1.0"?>
<document order="10">
  <properties>
    <title>View Engines comparisson</title>
  </properties>

  <body>

<intro>

<p>
<table class="commontable">
<tr>
	<th>Engine</th>
	<th>Language</th>
	<th>Compiled</th>
	<th>Helpers</th>
	<th>ViewComponents</th>
</tr>

<tr>
	<td>WebForms</td>
	<td align="center">Any .net language</td>
	<td align="center">Yes</td>
	<td align="center">Yes</td>
	<td align="center">No</td>
</tr>

<tr>
	<td>NVelocity</td>
	<td align="center">Velocity</td>
	<td align="center">No</td>
	<td align="center">Yes</td>
	<td align="center">Yes</td>
</tr>

<tr>
	<td>Brail</td>
	<td align="center">boo</td>
	<td align="center">Yes</td>
	<td align="center">Yes</td>
	<td align="center">Yes</td>
</tr>

<tr>
	<td>StringTemplate (from Contrib)</td>
	<td align="center">String Template</td>
	<td align="center">No</td>
	<td align="center">Partially</td>
	<td align="center">Yes</td>
</tr>

</table>
</p>

</intro>

<section>
	<title>Web Forms View Engine</title>

Pros: 
* Familiar .NET Syntax
* Set of useful Web Controls

Cons:
* Does not implement nor supports MVC logic, so it's easy to implement more logic than view logic on the web form, leading to scattered logic
* Limitations apply, see also [[MonoRail Reference Manual#Asp.Net_View_Engine]]
* Although there's an [http://mono-project.com/ open-source implementation] of it, it is [http://mono-project.com/FAQ:_Licensing#Patents '''NOT''' patent-free] and might be discontinued or become unsupported/incompatible in long term.

</section>

<section>
	<title>NVelocity View Engine</title>

Pros: 
* Limited set of functions forces you to code only view logic (good for separation of concerns)
* Easy to learn [http://nvelocity.sourceforge.net/ Check NVelocity site]
* Same syntax as [http://jakarta.apache.org/velocity/ Velocity] (for Java), allowing view reuse among different platforms

Cons:
* Interpreted
* Community seem very inactive, that forced Castle Project to fork NVelocity and work on improvements and bug fixes.

</section>

<section>
	<title>Brail</title>

Pros:
* Use the wrist friendly and feature-rich [http://boo.codehaus.org Boo language] for templates.
* Compiled (good performance!)

Cons:
* Requires additional assemblies
* Python syntax (which one can consider as a pro)

</section>

<section>
	<title>StringTemplate View Engine</title>

Pros:
* ST template engine 'enforces' model-view separation.
* Simple but powerful syntax with good documentation and articles. See the [http://www.antlr.org/wiki/display/ST/CSharp+StringTemplate+Documentation C# StringTemplate docs].
* Same syntax as StringTemplate for Java, allowing view reuse among different platforms.
* Actively developed and supported with a healthy user community

Cons:
* Interpreted
* Strict model-view separation means ST can't use MonoRail's helpers directly
* Custom helpers must be written in StringTemplate language, instead of plain .NET classes
* Requires additional assemblies
* ViewEngine (integration with MonoRail) still in development

</section>

</body>

</document>
