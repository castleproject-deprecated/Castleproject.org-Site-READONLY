<?xml version="1.0"?>
<document order="1">
	<properties>
		<title>Validator Component</title>
	</properties>
	<body>
		<intro>
			<p>
				The Validator component is used to validate your objects. It uses an attribute driven syntax making it easy to start adding validation to your classes.
			</p>
		</intro>
		<section>
			<title>Simple Example</title>
			<p>Here is a sample domain object</p>
			<pre format="cs">
			namespace GettingStartedSample.DomainObjects
			{
				using System;
			
				using Castle.Components.Validator;
			
				public class Person
				{
					private String _name;
					
					[ValidateNonEmpty]
					public String Name 
					{
						get { return _name; }
						set { _name = value; }
					}
				}
			}
			</pre>
			<p> Here is a simple test to show its use.</p>
			<pre format="cs">
			namespace GettingStartedSample.DomainObjects.Tests
			{
				using System;
			
				using NUnit.Framework;
				using Castle.Components.Validator;
			
				[TestFixture]
				public class PersonTests
				{
					[Test]
					public void Should_be_invalid_if_name_is_empty()
					{
						ValidatorRunner runner = new ValidatorRunner(new CachedValidationRegistry());
						Person p = new Person()
						Assert.IsNull(p.Name);
						Assert.IsFalse(runner.IsValid(p));
					}
				}
			}
			</pre>
		</section>
	</body>
</document>
