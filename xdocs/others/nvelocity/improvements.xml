<?xml version="1.0"?>
<document order="2">
<properties>
	<title>NVelocity Improvements</title>
</properties>

<body>

<intro>
<p>
Here is a list of improvements made to the original NVelocity code. 
If you download the code from our code repository make sure you check the <tt>Changes.txt</tt>
as we log all changes on it.
</p>

</intro>

<section id="params">
<title>ParamArray methods</title>
	<p>
	Methods that use the <tt>ParamArray</tt> attribute (in C# the <tt>params</tt> keyword 
	defines the attribute) 
	allows the compilers (participants) to define a better syntax for invocation. In fact
	the compiler is in charge of creating the array on the programmers behalf.
	</p>
	
	<p>
	NVelocity is able to make such invocations also creating the correct array for you. 
	For example:
	</p>
	
	<pre format="cs">
public static string SomeMethod(params String[] args)
{
	return String.Join('-', args);
}</pre>
	
	<pre format="html">
$instance.SomeMethod('arg1', 'arg2')	</pre>
	
	<p>Which will output</p>
	
	<pre>
arg1-arg2</pre>
	
	<p>
	The arguments are evaluated normally, so you are free to use references or
	string interpolation as you wish.
	</p>
	
</section>

<section id="dicts">
<title>Built-in support for dictionaries</title>
	<p>
	Dictionaries, if supported natively by a compiler, can make the code 
	more self documented than anything else. Due to the usage
	on MonoRail, dictionary support was introduced to NVelocity.
	</p>
	
	<p>
	All you have to to is construct a string using a special content. 
	It will be matched using a regular expression and the dictionary will be 
	constructed, populated and passed as a parameter for the method instead
	of the string. For example:
	</p>
	
	<pre format="html">
$HtmlHelper.LabelFor('elementid', 'Name:', "%{class='required', accessKey='N'}")</pre>

	<p>
	The code above will construct a dictionary and 
	add the entries <tt>class</tt> and <tt>accessKey</tt>.
	</p>

</section>

<section id="fancyloops">
<title>Fancy foreach loops</title>
	<p>
	Inspired on <a href="http://www.fogcreek.com/CityDesk/2.0/help/Scripting_With_CityScript/FancyLoops.html">
	FogCreek's CityDesk language</a>, the following type of <tt>foreach</tt>
	is supported.
	</p>
		
	<pre format="html">
#foreach($i in $items)
#each (this is optional since its the default section)
       text which appears for each item
#before
       text which appears before each item
#after
       text which appears after each item
#between
       text which appears between each two items
#odd
       text which appears for every other item, including the first
#even
       text which appears for every other item, starting with the second
#nodata
       Content rendered if $items evaluated to null or empty
#beforeall
       text which appears before the loop, only if there are items
       matching condition
#afterall
       text which appears after the loop, only of there are items
       matching condition
#end</pre>

	<p>
	All inner sections are optional, and they can appear in any order 
	multiple times (sections with same name will have their content appended)
	</p>
	<p>
	So for example you can use it to create a table contents with alternating styles: 
	</p>
	
	<pre format="html">
<![CDATA[
#foreach($person in $people)
#beforeall
       <table>
               <tr>
               <th>Name</th>
               <th>Age</th>
               </tr>
#before
       <tr
#odd
       Style='color:gray'>
#even
       Style='color:white'>

#each
       <td>$person.Name</td>
       <td>$person.Age</td>

#after
       </tr>

#between
       <tr><td colspan='2'>$person.bio</td></tr>

#afterall
       </table>

#nodata
       Sorry No Person Found
#end
]]></pre>
	
	<p>Which will output something like:</p>
	
	<pre format="html">
<![CDATA[
<table>
       <tr>
       <th>Name</th>
       <th>Age</th>
       </tr>
       <tr style='color:white'>
               <td>John</td>
               <td>32</td>
       </tr>
       <tr><td colspan='2'>Monorail programmer</td></tr>
       <tr style='color:gray'>
               <td>Jin</td>
               <td>12</td>
       </tr>
       <tr><td colspan='2'>Castle guru</td></tr>
</table>
]]></pre>
	
	<p>If the <tt>$people</tt> variable was null the output would be:</p>

	<pre format="html">
<![CDATA[
Sorry No Person Found
]]></pre>
	
</section>

<section id="enums">
	<title>Binary expressions with enum types</title>

	<p>
	In the old version of NVelocity, enums could only be
	compared if we put the elements on the template context. 
	That was very odd to say the least. 
	</p>

	<p>
	To solve the problem and at the same time
	make the code readable, binary expressions were changed to compare
	enums with their textual representation. For example:
	</p>

	<pre format="cs">
<![CDATA[
public enum OrderStatus
{
  Undefined,
  Created,
  Dispatched
}]]></pre>
	
	<p>You can use it in the following way</p>
	
	<pre format="html">
<![CDATA[
#if($order.Status == "Undefined")
  Sorry, but we don't know this order.
#elseif($order.Status == "Created")
  Your order is being processed. Hold on!
#elseif($order.Status == "Dispatched")
  Your order has been dispatched through UPS. Cross your fingers!
#end
]]></pre>
	
</section>

<section>
	<title>Unreleased features</title>
	
	<p>
	These should be available on Castle Project 1.0 RC 3.
	</p>

	<section>
	<title>Case-insensitive properties and methods</title>

	<p>
	Method calls and properties are no longer case-sensitive. That means you no longer
	need to remember the case of your method and properties while writing your NVelocity
	templates.
	</p>
	</section>

	<section>
	<title>Dictionary support improved</title>

	<p>
	Now it supports string interpolation anywhere and integers and singles:
	</p>
	
	<p>
	<table class="commontable">
		<tr>
			<th>Usage</th>
			<th>Behavior</th>
		</tr>
		
		<tr>
			<td><tt></tt></td>
			<td></td>
		</tr>
		<tr>
			<td><tt>key='value'</tt></td>
			<td>value is treated as String</td>
		</tr>
		<tr>
			<td><tt>key=1</tt></td>
			<td>value is converted to int</td>
		</tr>
		<tr>
			<td><tt>key=1.2</tt></td>
			<td>value is converted to single</td>
		</tr>
		<tr>
			<td><tt>key='1'</tt></td>
			<td>value is treated as String</td>
		</tr>
		<tr>
			<td><tt>$key='value'</tt></td>
			<td>$key will be evaluated (cannot be evaluated to null)</td>
		</tr>
		<tr>
			<td><tt>key=$value</tt></td>
			<td>value is evaluated and the object is added (not converted to string)</td>
		</tr>
		<tr>
			<td><tt>key='some$value'</tt></td>
			<td>value is evaluated and concatenated with the literal value</td>
		</tr>
	</table>
	</p>
	

	</section>
	
</section>

</body>
</document>
