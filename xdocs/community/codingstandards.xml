<?xml version="1.0"?>
<document>
<properties>
	<title>Coding standards</title>
</properties>

<body>

<intro>
<p>
The following establishes the basis of our coding standard. 
Please, be a nice guy and follow this. Also fix all different usages on the code base.
</p>

<note>
<p>
Committers must register any significant changes to the project Changes.txt.
Any features added, removed or any major bug fix. Minor changes do not need 
to be registered, unless you predict some impact or change on the behavior.
</p>
</note>
</intro>

<section id="Indentation">
<title>Indentation</title>

<p>
It was recently discussed and decided that all 
files (source code, xml and html) must use 
tabs for indentation. If you use Resharper 2, 
it will probably configure itself to match this when you 
open a project solution from Castle source repository.
</p>

</section>

<section id="Header">
<title>Header </title>

<p>
The license header is not optional. Every source file must include it, including test cases. No exceptions.
</p>


<pre format="cs">
// Copyright 2004-2006 Castle Project - http://www.castleproject.org/
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
</pre>

</section>

<section id="file">
	<title>Source file layout</title>

	<p>
	Each C# source file should try to follow the layout below:
	</p>
	
	<pre format="cs"><![CDATA[
HEADER (see above)

namespace <namespacename>
{
	usings grouped and each group separated by a new line

	public class <classname>
	{
	}
}	]]></pre>


	<p>
	For example:
	</p>

	<pre format="cs"><![CDATA[
// Copyright 2004-2006 Castle Project - http://www.castleproject.org/
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

namespace Castle.ActiveRecord
{
	using System;
	using System.Collections;

	using Castle.ActiveRecord.Framework;
	using Castle.ActiveRecord.Queries;

	using NHibernate;
	using NHibernate.Expression;

	/// <summary>
	/// Allow custom executions using the NHibernate's ISession.
	/// </summary>
	public delegate object NHibernateDelegate(ISession session, object instance);

	/// <summary>
	/// Base class for all ActiveRecord classes. Implements 
	/// all the functionality to simplify the code on the 
	/// subclasses.
	/// </summary>
	[Serializable]
	public abstract class ActiveRecordBase : ActiveRecordHooksBase
	{
		protected internal static ISessionFactoryHolder holder;

...	
]]></pre>

	
</section>

<section id="codecomments">
	<title>Document Public Types and members</title>

	<p>
	Public types and members documentation is going to be obligatory. 
	So develop the habit as soon as possible.
	</p>


</section>

<section id="typemembers">
	<title>Type Members</title>

<p>
Group members by their types and access levels.
</p>

<p>
<ol>
   <li> Static and readonly fields (public, protected, private in this order)</li>
   <li> Instance fields (public, protected, private in this order)</li>
   <li> Member declarations</li>
   <ol>
		<li>  Constructors (public, protected, private in this order)</li>
		<li>  Methods and Properties (grouped by their access level or interface implementation)</li>
		<li>  Static members and private members at the end </li>
	</ol>
</ol>
</p>

<p>
Nested classes should be on the end or within a region that explains/groups the purpose.
</p>

<pre format="cs">
[Serializable]
public class SomeClass : BaseClass, IInterface
{
	private static readonly int SomeReadonlyFieldConstant = 1;

	private String something;
	private String else;

	public SomeClass()
	{
	}

	protected SomeClass(int someArgument) : this()
	{
	}

	public void SomeMember()
	{
		...
	}

	#region IInterface Members

	public void DoSomething()
	{
		...
	}

	#endregion

	protected void SomeProtectedMethod()
	{
		...
	}

	protected String PropertyX
	{
		...
	}

	private void SomePrivateMethod()
	{
	}
}
</pre>

</section>


<section id="Blocks">
	<title>Blocks </title>

<p>Braces on new line:</p>

<pre format="cs">
public void MyMethod()
{
	if (something)
	{
	}
}
</pre>

<p>
You can skip braces for branch control statements like exit, break 
and continue. In this case put the branch on the same line of the if, 
and use that only if the if statement is really simple.
</p>

<p>
Example:
</p>

<pre format="cs">
private void PopulateConfigNodes(XmlNode section)
{
	foreach(XmlNode node in section.ChildNodes)
	{
		if (node.NodeType != XmlNodeType.Element) continue;

		if (!Config_Node_Name.Equals(node.Name))
		{
			String message = String.Format("Unexpected node. Expect '{0}' found '{1}'", Config_Node_Name, node.Name);
...
</pre>

</section>




<section id="Properties">
	<title>Properties </title>

<p>Prefer the short form for simple properties:</p>

<pre format="cs">
public String Name
{
	get { return name; }
	set { value = value; }
}
</pre>

<p>
However if the property is more complex than that, use the standard form:
</p>

<pre format="cs">
public String Name
{
	get 
	{ 
		if (something)
		{
			return name; 
		}
		return null;
	}
	set { value = value; }
}
</pre>

</section>


<section id="Fields">
	<title>Fields </title>

<p>Group them in some logical order. Static fields first, then the public fields (which btw should be avoided), then protected, then private.</p>

	<section id="Constants">
	<title>Constants  </title>
	
	<p>Prefer a meaningful name, even if it's longer.</p>

	<pre format="cs">
private static readonly int DefaultSmtpPort = 22;</pre>

	</section>

	<section id="MemberFields">
	<title>Static and instance fields </title>


	<pre format="cs">
private static int varName;

private int port;</pre>
	
	</section>
	

</section>


<section id="Avoid1">
	<title>Avoid C style code </title>

	<p>
	For example:
	</p>
	
	<pre format="cs">
public static Array BuildObjectArray(Type t, IEnumerable list, bool distinct)
{
	Set s = (distinct ? new ListSet() : null);

	ICollection c = list as ICollection;
	IList newList = c != null ? new ArrayList(c.Count) : new ArrayList();
	foreach(object o in list)
	{
		object[] p = (o is object[] ? (object[]) o : new object[] {o});
		object el = Activator.CreateInstance(t, p);
		if (s == null || s.Add(el))
			newList.Add(el);
	}

	Array a = Array.CreateInstance(t, newList.Count);
	newList.CopyTo(a, 0);
	return a;
}	</pre>
	
	<p>
	Brevity is good, but at least a minimum of meaningful names is 
	also desirable. Prefer the following format:
	</p>

	<pre format="cs">
public static Array BuildObjectArray(Type type, IEnumerable list, bool distinct)
{
	Set set = (distinct ? new ListSet() : null);

	ICollection coll = list as ICollection;
	IList newList = coll != null ? new ArrayList(coll.Count) : new ArrayList();
			
	foreach(object item in list)
	{
		object[] args = (item is object[] ? (object[]) item : new object[] {item});
		object el = Activator.CreateInstance(type, args);
				
		if (set == null || set.Add(el))
		{
			newList.Add(el);
		}
	}

	Array newArray = Array.CreateInstance(type, newList.Count);
	newList.CopyTo(newArray, 0);
	return newArray;
}	</pre>
	
</section>


</body>
</document>
