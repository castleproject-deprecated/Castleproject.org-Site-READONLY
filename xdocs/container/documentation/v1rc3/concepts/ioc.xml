<?xml version="1.0"?>
<document order="10">
  <properties>
    <title>Inversion of Control</title>
  </properties>

  <body>

<intro>

<p>
Inversion of Control is a principle used by framework as a way 
to allow developers to extend the framework or create applications using it. 
The basic idea is that the framework is aware of the programmer's objects
and makes invocations on them.
</p>

<p>
This is the opposite of using an API, where the developer's code makes the invocations
to the API code. Hence, frameworks invert the control: it is not the 
developer code that is in charge, instead the framework makes the calls 
based on some stimulus.
</p>

<p>
You are probably aware of situations where you have developed under the light
of this principle, even not aware of it. 
</p>

</intro>


<section id="Containers">
	<title>Inversion of Control Container</title>
	
<p>
	An Inversion of Control Container uses the principle stated above to manage
	classes creation and disposal, and to supply the dependencies and 
	configuration required by them. This way classes
	do not need to obtain and configure the 
	classes they depend on. This dramatically reduces coupling in a 
	system, and as a consequence simplifies reuse and testability.
</p>
	
<p>
	There is some confusion created by people that think that
	'Inversion of Control' is a synonym for 'Inversion of Control Container'. 
	As stated, Inversion of control is a broader principle. 
</p>
	
<p>
	Often people think that it is all about "injection", and broadcast
	that this is the primary purpose of IoC containers. In fact, 
	"injection" are a consequence, a means to decouple, not the primary 
	purpose.
</p>
	

</section>

<section id="Articles">
	<title>Articles on Inversion of Control Containers</title>

	<p>
	<ul>
	<li> <a href="http://www.betaversion.org/~stefano/linotype/news/38/">Stefano on Inversion of Control</a></li>
    <li> <a href="http://www.martinfowler.com/articles/injection.html">Martin Fowler on IoC</a> 
	which totally misses the point </li>
	</ul>
	</p>

</section>
	
</body>
</document>
