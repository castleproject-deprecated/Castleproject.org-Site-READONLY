<?xml version="1.0"?>
<document order="1">
  <properties>
    <title>IKernel API Document</title>
  </properties>

  <body>

<intro>
<p>
 The <tt>IKernel</tt> interface exposes all the functionality the MicroKernel implements. 
</p>
<note><p>
 It allows you to register components and request them by the key or the service they implemented. It also allow you to register facilities and subsystem, thus augmenting the functionality exposed by the kernel alone to fits your needs. 
</p></note>
</intro>



<section id="IKernel_Properties">
	<title>Properties</title>

	<p>
	<table class="commontable">
	<tr>
		<th>Name</th>
		<th>Type</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>Item</tt></td>
		<td align="center"><tt>Object</tt></td>
		<td>
 Returns the component instance by the key 
		</td>
	</tr>
	<tr>
		<td><tt>Item</tt></td>
		<td align="center"><tt>Object</tt></td>
		<td>
 Returns the component instance by the service type 
		</td>
	</tr>
	<tr>
		<td><tt>ComponentModelBuilder</tt></td>
		<td align="center"><tt>IComponentModelBuilder</tt></td>
		<td>
 Returns the implementation of <tt>Castle.MicroKernel.IComponentModelBuilder</tt>
		</td>
	</tr>
	<tr>
		<td><tt>HandlerFactory</tt></td>
		<td align="center"><tt>IHandlerFactory</tt></td>
		<td>
 Returns the implementation of <tt>Castle.MicroKernel.IHandlerFactory</tt>
		</td>
	</tr>
	<tr>
		<td><tt>ConfigurationStore</tt></td>
		<td align="center"><tt>IConfigurationStore</tt></td>
		<td>
 Gets or sets the implementation of <tt>Castle.MicroKernel.IConfigurationStore</tt>
		</td>
	</tr>
	<tr>
		<td><tt>ReleasePolicy</tt></td>
		<td align="center"><tt>IReleasePolicy</tt></td>
		<td>
 Gets or sets the implementation for <tt>Castle.MicroKernel.IReleasePolicy</tt>
		</td>
	</tr>
	<tr>
		<td><tt>Resolver</tt></td>
		<td align="center"><tt>IDependencyResolver</tt></td>
		<td>
 Returns the implementation for <tt>Castle.MicroKernel.IDependencyResolver</tt>
		</td>
	</tr>
	<tr>
		<td><tt>ProxyFactory</tt></td>
		<td align="center"><tt>IProxyFactory</tt></td>
		<td>
 Gets or sets the implementation of <tt>Castle.MicroKernel.IProxyFactory</tt> allowing different strategies for proxy creation. 
		</td>
	</tr>
	<tr>
		<td><tt>Parent</tt></td>
		<td align="center"><tt>IKernel</tt></td>
		<td>
 Returns the parent kernel 
		</td>
	</tr>
	<tr>
		<td><tt>GraphNodes</tt></td>
		<td align="center"><tt>GraphNode[]</tt></td>
		<td>
 Graph of components and iteractions. 
		</td>
	</tr>
	</table>
	</p>

</section>




<section id="IKernel_Methods">
	<title>Methods</title>

	<section id="IKernel_Methods1">
	<title>RemoveChildKernel(IKernel kernel) 
</title>

<p>
 Remove child kernel 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>kernel</tt></td>
		<td>

		</td>
	</tr>
	</table>
	</p>
	</section>
	<section id="IKernel_Methods2">
	<title>AddChildKernel(IKernel kernel) 
</title>

<p>
 Support for kernel hierarchy 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>kernel</tt></td>
		<td>

		</td>
	</tr>
	</table>
	</p>
	</section>
	<section id="IKernel_Methods3">
	<title>GetSubSystem(String key) 
: ISubSystem
</title>

<p>
 Returns an implementation of <tt>Castle.MicroKernel.ISubSystem</tt> for the specified key. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>key</tt></td>
		<td>

		</td>
	</tr>
	</table>
	</p>
	</section>
	<section id="IKernel_Methods4">
	<title>AddSubSystem(String key, ISubSystem subsystem) 
</title>

<p>
 Adds (or replaces) an <tt>Castle.MicroKernel.ISubSystem</tt>
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>key</tt></td>
		<td>

		</td>
	</tr>
	<tr>
		<td><tt>subsystem</tt></td>
		<td>

		</td>
	</tr>
	</table>
	</p>
	</section>
	<section id="IKernel_Methods5">
	<title>GetFacilities() 
: IFacility[]
</title>

<p>
 Returns the facilities registered on the kernel. 
</p>



	</section>
	<section id="IKernel_Methods6">
	<title>AddFacility(String key, IFacility facility) 
</title>

<p>
 Adds a <tt>Castle.MicroKernel.IFacility</tt> to the kernel. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>key</tt></td>
		<td>

		</td>
	</tr>
	<tr>
		<td><tt>facility</tt></td>
		<td>

		</td>
	</tr>
	</table>
	</p>
	</section>
	<section id="IKernel_Methods7">
	<title>GetAssignableHandlers(Type service) 
: IHandler[]
</title>

<p>
 Return handlers for components that implements the specified service. The check is made using IsAssignableFrom 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>service</tt></td>
		<td>

		</td>
	</tr>
	</table>
	</p>
	</section>
	<section id="IKernel_Methods8">
	<title>GetHandlers(Type service) 
: IHandler[]
</title>

<p>
 Return handlers for components that implements the specified service. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>service</tt></td>
		<td>

		</td>
	</tr>
	</table>
	</p>
	</section>
	<section id="IKernel_Methods9">
	<title>GetHandler(Type service) 
: IHandler
</title>

<p>
 Returns the <tt>Castle.MicroKernel.IHandler</tt> for the specified service. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>service</tt></td>
		<td>

		</td>
	</tr>
	</table>
	</p>
	</section>
	<section id="IKernel_Methods10">
	<title>GetHandler(String key) 
: IHandler
</title>

<p>
 Returns the <tt>Castle.MicroKernel.IHandler</tt> for the specified component key. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>key</tt></td>
		<td>

		</td>
	</tr>
	</table>
	</p>
	</section>
	<section id="IKernel_Methods11">
	<title>CreateComponentActivator(ComponentModel model) 
: IComponentActivator
</title>

<p>
 Constructs an implementation of <tt>Castle.MicroKernel.IComponentActivator</tt> for the given <tt>Castle.Core.ComponentModel</tt>
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>model</tt></td>
		<td>

		</td>
	</tr>
	</table>
	</p>
	</section>
	<section id="IKernel_Methods12">
	<title>ReleaseComponent(Object instance) 
</title>

<p>
 Releases a component instance. This allows the kernel to execute the proper decomission lifecycles on the component instance. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>instance</tt></td>
		<td>

		</td>
	</tr>
	</table>
	</p>
	</section>
	<section id="IKernel_Methods13">
	<title>RegisterCustomDependencies(String key, IDictionary dependencies) 
</title>

<p>
 Associates objects with a component handler, allowing it to use the specified dictionary when resolving dependencies 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>key</tt></td>
		<td>

		</td>
	</tr>
	<tr>
		<td><tt>dependencies</tt></td>
		<td>

		</td>
	</tr>
	</table>
	</p>
	</section>
	<section id="IKernel_Methods14">
	<title>RegisterCustomDependencies(Type service, IDictionary dependencies) 
</title>

<p>
 Associates objects with a component handler, allowing it to use the specified dictionary when resolving dependencies 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>service</tt></td>
		<td>

		</td>
	</tr>
	<tr>
		<td><tt>dependencies</tt></td>
		<td>

		</td>
	</tr>
	</table>
	</p>
	</section>
	<section id="IKernel_Methods15">
	<title>Resolve(String key, IDictionary arguments) 
: Object
</title>

<p>
 Returns the component instance by the component key using dynamic arguments 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>key</tt></td>
		<td>

		</td>
	</tr>
	<tr>
		<td><tt>arguments</tt></td>
		<td>

		</td>
	</tr>
	</table>
	</p>
	</section>
	<section id="IKernel_Methods16">
	<title>Resolve(Type service, IDictionary arguments) 
: Object
</title>

<p>
 Returns the component instance by the service type using dynamic arguments 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>service</tt></td>
		<td>

		</td>
	</tr>
	<tr>
		<td><tt>arguments</tt></td>
		<td>

		</td>
	</tr>
	</table>
	</p>
	</section>
	<section id="IKernel_Methods17">
	<title>HasComponent(Type service) 
: Boolean
</title>

<p>
 Returns true if the specified service was registered 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>service</tt></td>
		<td>

		</td>
	</tr>
	</table>
	</p>
	</section>
	<section id="IKernel_Methods18">
	<title>HasComponent(String key) 
: Boolean
</title>

<p>
 Returns true if the specified key was registered 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>key</tt></td>
		<td>

		</td>
	</tr>
	</table>
	</p>
	</section>
	<section id="IKernel_Methods19">
	<title>RemoveComponent(String key) 
: Boolean
</title>

<p>
 Returns true if the specified component was found and could be removed (i.e. no other component depends on it) 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>key</tt></td>
		<td>
The component's key
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section id="IKernel_Methods20">
	<title>AddComponentInstance(String key, Type serviceType, Object instance) 
</title>

<p>
 Used mostly by facilities. Adds an instance to be used as a component. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>key</tt></td>
		<td>

		</td>
	</tr>
	<tr>
		<td><tt>serviceType</tt></td>
		<td>

		</td>
	</tr>
	<tr>
		<td><tt>instance</tt></td>
		<td>

		</td>
	</tr>
	</table>
	</p>
	</section>
	<section id="IKernel_Methods21">
	<title>AddComponentInstance(String key, Object instance) 
</title>

<p>
 Used mostly by facilities. Adds an instance to be used as a component. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>key</tt></td>
		<td>

		</td>
	</tr>
	<tr>
		<td><tt>instance</tt></td>
		<td>

		</td>
	</tr>
	</table>
	</p>
	</section>
	<section id="IKernel_Methods22">
	<title>AddCustomComponent(ComponentModel model) 
</title>

<p>
 Adds a custom made <tt>Castle.Core.ComponentModel</tt>. Used by facilities. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>model</tt></td>
		<td>

		</td>
	</tr>
	</table>
	</p>
	</section>
	<section id="IKernel_Methods23">
	<title>AddComponentWithExtendedProperties(String key, Type serviceType, Type classType, IDictionary extendedProperties) 
</title>

<p>
 Adds a concrete class and an interface as a component and specify the extended properties. Used by facilities, mostly. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>key</tt></td>
		<td>

		</td>
	</tr>
	<tr>
		<td><tt>serviceType</tt></td>
		<td>

		</td>
	</tr>
	<tr>
		<td><tt>classType</tt></td>
		<td>

		</td>
	</tr>
	<tr>
		<td><tt>extendedProperties</tt></td>
		<td>

		</td>
	</tr>
	</table>
	</p>
	</section>
	<section id="IKernel_Methods24">
	<title>AddComponentWithExtendedProperties(String key, Type classType, IDictionary extendedProperties) 
</title>

<p>
 Adds a concrete class as a component and specify the extended properties. Used by facilities, mostly. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>key</tt></td>
		<td>

		</td>
	</tr>
	<tr>
		<td><tt>classType</tt></td>
		<td>

		</td>
	</tr>
	<tr>
		<td><tt>extendedProperties</tt></td>
		<td>

		</td>
	</tr>
	</table>
	</p>
	</section>
	<section id="IKernel_Methods25">
	<title>AddComponent(String key, Type serviceType, Type classType, LifestyleType lifestyle, Boolean overwriteLifestyle) 
</title>

<p>
 Adds a concrete class and an interface as a component with the specified <tt>lifestyle</tt>. 
</p>


<note>
<p>
 If you have indicated a lifestyle for the specified <tt>classType</tt> using attributes, this method will not overwrite that lifestyle. To do that, use the <tt>Castle.MicroKernel.IKernel.AddComponent(System.String,System.Type,System.Type,Castle.Core.LifestyleType,System.Boolean)</tt> method. 
</p>
</note>

	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>key</tt></td>
		<td>
The key with which to index the component.
		</td>
	</tr>
	<tr>
		<td><tt>serviceType</tt></td>
		<td>
The service <tt>System.Type</tt> that this component implements.
		</td>
	</tr>
	<tr>
		<td><tt>classType</tt></td>
		<td>
The <tt>System.Type</tt> of the component.
		</td>
	</tr>
	<tr>
		<td><tt>lifestyle</tt></td>
		<td>
The specified <tt>Castle.Core.LifestyleType</tt> for the component.
		</td>
	</tr>
	<tr>
		<td><tt>overwriteLifestyle</tt></td>
		<td>
 If <tt>true</tt>, then ignores all other configurations for lifestyle and uses the value in the <tt>lifestyle</tt> parameter. 
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section id="IKernel_Methods26">
	<title>AddComponent(String key, Type serviceType, Type classType, LifestyleType lifestyle) 
</title>

<p>
 Adds a concrete class and an interface as a component with the specified <tt>lifestyle</tt>. 
</p>


<note>
<p>
 If you have indicated a lifestyle for the specified <tt>classType</tt> using attributes, this method will not overwrite that lifestyle. To do that, use the <tt>Castle.MicroKernel.IKernel.AddComponent(System.String,System.Type,System.Type,Castle.Core.LifestyleType,System.Boolean)</tt> method. 
</p>
</note>

	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>key</tt></td>
		<td>
The key with which to index the component.
		</td>
	</tr>
	<tr>
		<td><tt>serviceType</tt></td>
		<td>
The service <tt>System.Type</tt> that this component implements.
		</td>
	</tr>
	<tr>
		<td><tt>classType</tt></td>
		<td>
The <tt>System.Type</tt> of the component.
		</td>
	</tr>
	<tr>
		<td><tt>lifestyle</tt></td>
		<td>
The specified <tt>Castle.Core.LifestyleType</tt> for the component.
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section id="IKernel_Methods27">
	<title>AddComponent(String key, Type serviceType, Type classType) 
</title>

<p>
 Adds a concrete class and an interface as a component 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>key</tt></td>
		<td>
The key with which to index the component.
		</td>
	</tr>
	<tr>
		<td><tt>serviceType</tt></td>
		<td>
The service <tt>System.Type</tt> that this component implements.
		</td>
	</tr>
	<tr>
		<td><tt>classType</tt></td>
		<td>
The <tt>System.Type</tt> of the component.
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section id="IKernel_Methods28">
	<title>AddComponent(String key, Type classType, LifestyleType lifestyle, Boolean overwriteLifestyle) 
</title>

<p>
Missing summary
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>key</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>classType</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>lifestyle</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>overwriteLifestyle</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section id="IKernel_Methods29">
	<title>AddComponent(String key, Type classType, LifestyleType lifestyle) 
</title>

<p>
 Adds a concrete class as a component with the specified <tt>lifestyle</tt>. 
</p>


<note>
<p>
 If you have indicated a lifestyle for the specified <tt>classType</tt> using attributes, this method will not overwrite that lifestyle. To do that, use the <tt>Castle.MicroKernel.IKernel.AddComponent(System.String,System.Type,Castle.Core.LifestyleType,System.Boolean)</tt> method. 
</p>
</note>

	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>key</tt></td>
		<td>
The key with which to index the component.
		</td>
	</tr>
	<tr>
		<td><tt>classType</tt></td>
		<td>
The <tt>System.Type</tt> of the component.
		</td>
	</tr>
	<tr>
		<td><tt>lifestyle</tt></td>
		<td>
The specified <tt>Castle.Core.LifestyleType</tt> for the component.
		</td>
	</tr>
	</table>
	</p>
	</section>
	<section id="IKernel_Methods30">
	<title>AddComponent(String key, Type classType) 
</title>

<p>
 Adds a concrete class as a component 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>key</tt></td>
		<td>

		</td>
	</tr>
	<tr>
		<td><tt>classType</tt></td>
		<td>

		</td>
	</tr>
	</table>
	</p>
	</section>
</section>

</body>
</document>
