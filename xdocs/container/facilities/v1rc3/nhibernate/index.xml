<?xml version="1.0"?>
<document order="0">
  <properties>
    <title>NHibernate Facility</title>
  </properties>

  <body>

<intro>

<p>
The NHibernate Facility 
enables the usage of NHibernate O/R framework for your components.
</p>

<p>
<table border="0" width="70%">
	<tr>
		<td colspan="2" align="center"><strong>Facility Summary</strong></td>
	</tr>
	
	<tr>
		<td width="50%" align="center" valign="top">
<table class="commontable" style="width: 300px;">
	<tr>
		<th width="70%" align="center">Uses Proxy</th>
		<td align="center">No</td>
	</tr>
	<tr>
		<th align="center">Requires configuration</th>
		<td align="center">Yes</td>
	</tr>
	<tr>
		<th align="center">Uses attribute</th>
		<td align="center">No</td>
	</tr>
</table>
		</td>
		
		<td width="50%" align="center" valign="top">
<table class="commontable" style="width: 300px;">
	<tr>
		<th width="60%" align="center">Version</th>
		<td align="center">Beta 3</td>
	</tr>
	<tr>
		<th align="center">Maturity level</th>
		<td align="center">Medium</td>
	</tr>
</table>
		</td>
	</tr>
</table>
</p>

</intro>

<section id="intro">
	<title>Introduction</title>

	<p>
	The NHibernate facility provides two levels of integration with NHibernate.
	You should pick the one you feel more comfortable with.
    <ul>
	<li>You can just receive the ISessionFactory and Configuration 
	on your components and use it as you wish.</li>
	
	<li>You can use <tt>ISessionManager</tt> component to manage sessions.</li>
	</ul>
	</p>

<section id="level1">
	<title>Integration level 1</title>
	
	<p>
	This example illustrates how you can have fine 
	grained control over ISessionFactory and, thus, ISession.
	</p>
	
	<pre format="cs">
using NHibernate;
using NHibernate.Cfg;

public class MyDataAccessClass
{
	private ISessionFactory _sessFactory;
	private Configuration _cfg;

	public MyDataAccessClass(ISessionFactory sessFactory, Configuration cfg)
	{
		_sessFactory = sessFactory;
		_cfg = cfg;
	}

	public void SaveSomething(object item)
	{
		ISession session = _sessFactory.OpenSession();

		// .. do whatever you want 

		session.Close();
	}
}</pre>

	<p>
	With this scenario you have to control transactions 
	and share sessions instances manually.
	</p>
	
</section>	

<section id="level1">
	<title>Integration level 2</title>

	<p>
	The second level of integration introduce the 
	ISessionManager interface so you can use session 
	and leave to the ISessionManager implementation the responsability 
	of sharing compatible session within an invocation chain and 
	be aware of transactions.
	</p>

</section>	


</section>

<section id="sitemap">
	<title>Site Map</title>

	<p>
	Please consult the others documents to learn more about the
	NHibernate facility.
	</p>
	
	<sitemap select="castle/container/facilities/v1rc3/nhibernate"/>

</section>


<section id="Requiredassemblies">
	<title>Required Assemblies</title>

	<p>
<ul>
<li>Castle.Facilities.NHibernateIntegration.dll</li>
<li>NHibernate assemblies</li>
</ul>
	</p>
	
</section>

</body>
</document>
