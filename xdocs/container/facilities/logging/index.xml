<?xml version="1.0"?>
<document order="0">
  <properties>
    <title>Logging Facility</title>
  </properties>

  <body>

<intro>

<p>
The Logging Facility	provides custom loggers for your components.
</p>

<p>
<table border="0" width="70%">
	<tr>
		<td colspan="2" align="center"><strong>Facility Summary</strong></td>
	</tr>
	
	<tr>
		<td width="50%" align="center" valign="top">
<table class="commontable" style="width: 300px;">
	<tr>
		<th width="70%" align="center">Uses Proxy</th>
		<td align="center">No</td>
	</tr>
	<tr>
		<th align="center">Requires configuration</th>
		<td align="center">Yes</td>
	</tr>
	<tr>
		<th align="center">Uses attribute</th>
		<td align="center">No</td>
	</tr>
</table>
		</td>
		
		<td width="50%" align="center" valign="top">
<table class="commontable" style="width: 300px;">
	<tr>
		<th width="60%" align="center">Version</th>
		<td align="center">1.0 RC 2</td>
	</tr>
	<tr>
		<th align="center">Maturity level</th>
		<td align="center">High</td>
	</tr>
</table>
		</td>
	</tr>
</table>
</p>

</intro>

<section id="intro">
	<title>Introduction</title>

	<p>
The logging facility provides a seemless way to
 add logging capabilities to your application. There are two levels of integration.
	</p>
	
	<p>
	<ul>
    <li>  Allow your classes to 
	receive an ILogger instance for logging support</li>
	
    <li> Allow you to ask for an ILoggerFactory instance to provide 
	logging support to classes that are not managed by Windsor. </li>
	</ul>
	</p>
	
</section>

<section id="logger">
	<title>Loggers</title>

	<p>
You can use the following loggers implementations:
	</p>
	
	<p>
	<ul>
    <li>log4net (requires Castle.Services.Logging.Log4netIntegration.dll)</li> 
    <li>NLog (requires Castle.Services.Logging.NLogIntegration.dll) </li>
    <li>ConsoleLogger  </li>
    <li>DiagnosticsLogger  </li>
    <li>StreamLogger  </li>
    <li>WebLogger (TraceContext) </li>
    <li>NullLogger (used as placeholder) </li>
	</ul>
	</p>
	
</section>

<section id="Quickstart">
	<title>Quick start</title>

	<p>
Your first step is to add the Logging Facility into 
your Windsor container, either by using the configuration schema listed below, or in code.
	</p>

	<pre format="html"><![CDATA[
<?xml version="1.0" encoding="utf-8" ?> 
<configuration>

<facility 
	id="logging"
	type="Castle.Facilities.Logging.LoggingFacility, Castle.Facilities.Logging"
	loggingApi="null|console|diagnostics|web|nlog|log4net|custom"
	customLoggerFactory="type name that implements ILoggerFactory"
	configFile="optional config file location"	/>

</configuration>
]]></pre>

</section>

<section id="BestPractice">
	<title>Best practices</title>

	<p>
	We recommend that you make logging optional
	on your components/services. This way you maximize
	the reusability. For example:
	</p>

	<pre format="cs">
using Castle.Core.Logging;
	
public class CustomerService
{
	private ILogger logger = NullLogger.Instance;

	public CustomerService()
	{
	}
	
	public ILogger Logger
	{
		get { return logger; }
		set { logger = value; }
	}

	...
}</pre>

<p>
With the approach above, the <tt>logger</tt> field 
will never be null. Also, if the logging facility 
was registered on the container, it will be able to supply
a logger instance using the <tt>Logger</tt> property.
</p>
	
</section>

<section id="Requiredassemblies">
	<title>Required Assemblies</title>

	<p>
<ul>
<li>Castle.Facilities.Logging</li>
<li>Castle.Core.dll (contains the ILogger and ILoggerFactory)</li>
</ul>
	</p>
	
</section>

</body>
</document>
