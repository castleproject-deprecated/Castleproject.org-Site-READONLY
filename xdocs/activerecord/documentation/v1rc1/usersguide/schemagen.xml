<?xml version="1.0"?>
<document order="7">
  <properties>
    <title>Schema generation</title>
  </properties>

  <body>

<intro>
<p>
Creating the DDL script and keeping it up-to-date with the code is a time consuming task. There are a number
of different ways to do this, and every every developer has their own preferences. Companies tend to work according 
to their own specific standards.
</p>
<p>
Castle ActiveRecord exposes a NHibernate feature to create and drop schemas. The relevant methods are:
</p>
<ul>
<li><tt>CreateSchema</tt> and <tt>DropSchema</tt> will create and drop the schema against the database</li>
<li><tt>GenerateCreationScripts</tt> and <tt>GenerateDropScripts</tt> generate a file with the scripts</li>
<li><tt>CreateSchemaFromFile</tt> executes a DDL script against the database</li>
</ul>
<p>
All of the above methods are exposed by the <tt>ActiveRecordStarter</tt> class and can only be used after you have invoked 
one of the <a href="configref.html">Initialize method overloads</a>.
</p>
</intro>

<section id="ARSchemaGen">
	<title>Allowing ActiveRecord generate the schema</title>

<p>
Allowing ActiveRecord generate and execute the creation schema is desirable in certain scenarios. For example, to prototype an application or to build a test database. 
</p>

<p>
If you want to use this approach you will need to specify some 
additional properties on your active record attributes. These additional properties, which include <tt>NotNull</tt> and 
<tt>Length</tt>, are used to guide the schema generation. 
For more information see  
<a href="../manual/attributes.html">Attributes</a> article.
</p>

<warning>
<p>
Be aware that the schema generation is not bullet proof. For some complex models the generated script might be buggy. For 95% of the cases it is acceptable.
</p></warning>

<p>
Consider the following <i>ActiveRecord type</i> definition:
</p>

<pre format="cs">
using Castle.ActiveRecord;

[ActiveRecord("Blogs")]
public class Blog : ActiveRecordBase
{
    private int id;
    private String name;
    private String author;

    [PrimaryKey(PrimaryKeyType.Native, "blog_id")]
    public int Id
    {
        get { return id; }
        set { id = value; }
    }

    [Property("blog_name", NotNull=true, Length=25)]
    public String Name
    {
        get { return name; }
        set { name = value; }
    }

    [Property("blog_author", NotNull=true, Length=50)]
    public String Author
    {
        get { return author; }
        set { author = value; }
    }
}</pre>

<p>
The following code will initialize the framework and generate the schema:
</p>

<pre format="cs">
ActiveRecordStarter.Initialize(new XmlConfigurationSource("appconfig.xml"), typeof(Blog));
ActiveRecordStarter.CreateSchema();</pre>

<note>
<p>
The <tt>CreateSchema</tt> method will drop any existing tables with the same name before it creates
new tables. Be very cautious about performing this operation on a production database.
</p>
</note>
	
</section>

<section id="execscriptfile">
	<title>Executing an external script file</title>

	<p>
This may be a better alternative, especially if you work on team that has someone dedicated to keep the database schema up to date.
The SQL files can be part of the project and can be executed during initialization.
</p>

<pre format="cs">
ActiveRecordStarter.Initialize(new XmlConfigurationSource("appconfig.xml"), typeof(Blog) );
ActiveRecordStarter.CreateSchemaFromFile("myscript1.sql");
ActiveRecordStarter.CreateSchemaFromFile("myscript2.sql");</pre>

</section>


</body>
</document>
