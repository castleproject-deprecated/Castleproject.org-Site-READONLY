<?xml version="1.0"?>
<document order="17">
  <properties>
    <title>Generics support</title>
  </properties>

<body>

<intro>
<p>
If you happen to be using .Net Framework 2.0, you might benefit from the
generic version of base classes.
</p>

<p>
It is also possible to use typed collections instead of the 
<tt>IList</tt> or <tt>ISet</tt>
</p>
</intro>

<section id="baseclasses">
	<title>ActiveRecordBase&lt;T&gt;</title>
	
	<p>
	When you inherit from <tt>ActiveRecordBase&lt;T&gt;</tt>
	most of the method that you have to implement if you were using
	<tt>ActiveRecordBase</tt> will be strongly typed and available
	as public methods. For example, given the following <i>ActiveRecord type</i>
	definition:
	</p>
	
	<pre format="cs"><![CDATA[
using Castle.ActiveRecord;

[ActiveRecord]
public class Customer : ActiveRecordBase<Customer>
{
	// Mapping omitted as it is the same
}]]></pre>

	<p>
	We can use several operations without the need to 
	implement them.
	</p>

	<pre format="cs"><![CDATA[
// Find all
Customer[] customers = Customer.FindAll();

// Find by property
customers = Customer.FindAllByProperty("Name", "John doe");

// Find by primary key
Customer cust = Customer.Find( 1 );

]]></pre>

	<section>
	<title>ActiveRecordValidationBase&lt;T&gt;</title>
	
	<p>
	Additionally, a version of <tt>ActiveRecordValidationBase&lt;T&gt;</tt>
	is also available. More information about it on <a href="validation.html">
	Validation Support</a>.
	</p>

	</section>

</section>

<section id="typedcolls">
	<title>Typed collections</title>
	
	<p>
	If you want to use the strongly typed, generic versions of the collections, you'll need a separate extension, called <a href="http://www.ayende.com/projects/nhibernate-query-analyzer/generics.aspx"> NHibernate.Generics</a>. This extension was developed by our fellow Castle member Ayende Rahien, 
	and it can be found at <a href="http://www.ayende.com/projects/nhibernate-query-analyzer/generics.aspx">his web site</a>.
	</p>

	<p>
This article is about combining the use of <tt>NHibernate.Generics</tt> and ActiveRecord to build a domain model that will be natural for programmers in .NET 2.0.
	</p>

	<note>
	<p>
<tt>NHibernate.Generics</tt> depends on <tt>NHibernate 1.0.2</tt>, which is not supported by Castle ActiveRecord versions prior to <tt>RC1</tt>. 
	</p>
	</note>

	<p>
Let's take the following sample tables:
	</p>

<pre format="tsql">
CREATE TABLE [dbo].[Blogs] (
    [blog_id] [int] IDENTITY (1, 1) NOT NULL ,
    [blog_name] [varchar] (50) NULL ,
    [blog_author] [varchar] (50) NULL 
) ON [PRIMARY]

CREATE TABLE [dbo].[Posts] (
    [post_id] [int] IDENTITY (1, 1) NOT NULL ,
    [post_title] [varchar] (50) NULL ,
    [post_contents] [text] NULL ,
    [post_category] [varchar] (50) NULL ,
    [post_blogid] [int] NULL ,
    [post_created] [datetime] NULL ,
    [post_published] [bit] NULL 
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
</pre>

	<p>
The domain model that we want is a <tt>Blog</tt> class that 
holds a collection of <tt>Post</tt>s, and a <tt>Post</tt> class 
that holds a reference to its parent <tt>Blog</tt>.
	</p>

	<p>
	First things first, let's implement the <tt>Blog</tt> class:
	</p>

<pre format="cs"><![CDATA[
[ActiveRecord]
public class Blog : ActiveRecordBase<Blog>
{
	private EntitySet<Post> _posts;
	private int _id;
	private string _name;
	private string _author;
	
	public Blog()
	{
		_posts = new EntitySet<Post>(
				delegate(Post p) { p.Blog = this; },
				delegate(Post p) { p.Blog = null; }
			);
	}
	
	public Blog(string name, string author) : this()
	{
		this._name = name;
		this._author = author;
	}
	
	[PrimaryKey(PrimaryKeyType.Native, "blog_id", Access=PropertyAccess.NoSetterCamelCaseUnderscore)]
	private int Id
	{
		get { return _id; }
	}
	
	[Property("blog_name")]
	public string Name
	{
		get { return _name; }
		set { _name = value; }
	}
	
	[Property("blog_author")]
	public string Author
	{
		get { return _author; }
		set { _author = value; }
	}

	[HasMany(typeof (Post), "post_blogId", "Posts", Inverse=true,
		CustomAccess = Generics.Access,RelationType = RelationType.Set)]
	public ICollection<Post> Posts
	{
		get { return  _posts; }
	}
		
}]]></pre>

<note>
<p>
You must initialize the collection instance when using custom 
accessors like the example above.
</p>
</note>

<p>What we have defined so far:
<ul>

<li> The standard set of properties (name, author)</li>
<li> The primary key is created by the database, so there is no reason to 
expose a setter for it. We are making use of the Access modifier and tells it 
that it should access the field directly when setting it. We are also giving 
it the way to find the field (camel case with leading underscore)</li>
<li>We have an <tt>EntitySet&lt;&gt;</tt> collection and we initialize it in the constructor.
 The <tt>EntitySet&lt;&gt;</tt> is exposed as an <tt>ICollection&lt;Post&gt;</tt>, which is the way you expect to work with collections in .Net 2.0</li>
</ul>
</p>

<warning>
<p> 
The property name must be same as the field name. Otherwise an exception will happen.
</p>
</warning>

<p>
The Posts collections deserves a special attention. 
The attribute decorating it is a complex one, 
so let's take it one piece at a time:
</p>

<p>
<ul>

<li><tt>[HasMany(typeof(Post)</tt>: The property is defined as 
the many side of a one-to-many relation of Posts</li>

<li><tt>"blog_id", "Posts"</tt>...: 
The column to search the current object id and the table to search</li>

<li><tt>Inverse=true</tt>: The relationship is maintained on 
the other end. (We'll see how when we examine the Post class)</li>

<li><tt>CustomAccess=Generics.Access</tt>: This property has a special accessing method, the <tt>Generics.Access</tt> is merely a helper to avoid cluttering the declaration even more. 
We need it for ActiveRecord and <tt>EntitySet</tt> to work together smoothly</li>

<li><tt>RelationType=RelationType.Set]</tt>: 
We need to explicitly state the type of the relationship</li>
</ul>
</p>

<p>
Now that we've taken the attribute apart, all we need to understand is that this lengthy attribute is telling ActiveRecord: this is a generic collection of Posts.
</p>

<p>
Now let's take a look at the constructor, we are doing something very strange there.
</p>

<pre format="cs">
_posts = new EntitySet&lt;Post&gt;{
		delegate(Post p) { p.Blog = this; },
		delegate(Post p) { p.Blog = null; }
	);
</pre>

<p>
We are creating a new <tt>EntitySet</tt> of <tt>Post</tt>s and telling it 
how to maintain the relation between a <tt>Blog</tt> and a <tt>Post</tt>. 
We are using the C# 2.0's anonymous delegate feature, 
which allows us to specify it very cleanly.
</p>

<p>
<ul>

<li><tt>delegate(Post p) { p.Blog = this; }</tt>: 
When a post is added to this collection, set its Blog property to this Blog</li>

<li><tt>delegate(Post p) { p.Blog = null; }</tt>: 
When a post is removed from this collection, clear its Blog property</li>

</ul>
</p>

<p>
And that is all you need to do. The relation is created automatically 
at this point. These definitions allow you to use the following:
</p>

<pre format="cs">
Blog blog = Blog.Load(1);
Post post = new Post("First Post", "My First Post", "Slashdot");
blog.Posts.Add(post);
post.Save();
</pre>

<p>
Now let's take a look at the Post class:
</p>

<pre format="cs"><![CDATA[
[ActiveRecord]
public class Post : ActiveRecordBase<Post>
{
	private int _id;
	private string _title;
	private string _content;
	private string _category;
	private DateTime _created;
	private bool _published;
	private EntityRef<Blog> _blog;
	
	public Post()
	{
		_blog = new EntityRef<Blog>(
				delegate(Tests.Blog b) { b.Posts.Add(this); },
				delegate(Tests.Blog b) { b.Posts.Remove(this); }
			);	
	}
	
	public Post(string title, string content, string category):this()
	{
		this._title = title;
		this._content = content;
		this._category = category;
		this._created = DateTime.Now;
		this._published = false;
	}
	
	[PrimaryKey(PrimaryKeyType.Native,"post_id", Access=PropertyAccess.NoSetterCamelCaseUnderscore)]
	private int Id
	{
		get { return _id; }
	}
	
	[Property("post_title")]
	public string Title
	{
		get { return _title; }
		set { _title = value; }
	}
	
	[Property("post_content")]
	public string Content
	{
		get { return _content; }
		set { _content = value; }
	}
	
	[Property("post_category")]
	public string Category
	{
		get { return _category; }
		set { _category = value; }
	}
	
	[Property("post_created", Access=PropertyAccess.NoSetterCamelCaseUnderscore)]
	public DateTime Created
	{
		get { return _created; }
	}
	
	[Property("post_published")]
	public bool Published
	{
		get { return _published; }
		set { _published = value; }
	}
	
	[BelongsTo("post_blog_id", CustomAccess=Generics.Access)]
	public Blog Blog
	{
		get { return _blog.Value; }
		set { _blog.Value = value; }
	}
	
}]]></pre>

<p>
Most of the definitions here are straightforward, so I'll skip them. 
Now we get to the Blog property, and you can see that we defined an 
<tt>EntityRef&lt;&gt;</tt> object to holds it. The reason for that is that you need to maintain the relationship on this side as well, so we again tell ActiveRecord to use custom access strategy.
</p>

<p>
Then, in the constructor, we are creating the <tt>EntityRef&lt;&gt;</tt> and instructing
 it how to create a connection when it is assigned.
</p>

<pre format="cs">
_blog = new EntityRef&lt;Blog&gt;(
	delegate(Tests.Blog b) { b.Posts.Add(this); },
	delegate(Tests.Blog b) { b.Posts.Remove(this); }
);
</pre>

<p>
<ul>
<li><tt>delegate(Tests.Blog b) { b.Posts.Add(this); }</tt>: Add this post to the Posts collection of the Blog that was assigned to you</li>
<li><tt>delegate(Tests.Blog b) { b.Posts.Remove(this); }</tt>: Remove this post from the Post collection of the previous Blog that this post was attached to</li>
</ul>
</p>

<p>Another thing that we need to pay attention to is the Blog property.</p>

<pre format="cs">
	get { return _blog.Value; }
	set { _blog.Value = value; }
</pre>

<p>
We are not using the <tt>_blog</tt> field directly, 
rather we are getting and setting on its <tt>Value</tt> property. 
This allows the <tt>EntityRef</tt> to handle the relationships correctly.
</p>

<p>
That is all you need to do to add generics capabilities to your domain model.
</p>

</section>

</body>
</document>

