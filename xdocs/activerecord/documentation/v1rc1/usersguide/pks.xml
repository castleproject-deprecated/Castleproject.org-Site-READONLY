<?xml version="1.0"?>
<document order="5">
  <properties>
    <title>Primary key mapping</title>
  </properties>

  <body>

<intro>
<p>
Regular <i>ActiveRecord types</i> must have a primary key. We favor
single keys instead of composite keys, but both are supported. 
If you have control over the database schema, try to add
a surrogate primary key to tables with composite keys. 
</p>
</intro>

<section id="SinglePK">
	<title>Single Primary Key</title>

	<p>
	We consider a single primary key a column used as a row identifier.
	It can be assigned, auto generated (by the database) or use
	one of the strategies to generated non duplicate values. 
	</p>
		
	<p>
	To declare a primary key in your class all you need to do 
	is create a property and use the <tt>PrimaryKeyAttribute</tt>.
	This attribute allows you to inform the generation strategy and
	defaults to native if none is informed (native means the auto generation supported 
	by your database). As example, consider the following table script:
	</p>
	
	<pre format="tsql">
CREATE TABLE Entity (
	[id] [int] IDENTITY (1, 1) NOT NULL
) ON [PRIMARY]
</pre>
	
	<p>
	This table would be easily mapped to an ActiveRecord class:
	</p>
	
	<pre format="cs">
using Castle.ActiveRecord;

[ActiveRecord]
public class Entity : ActiveRecordBase
{
	private int id;
	
	[PrimaryKey(PrimaryKeyType.Native)]
	public int Id
	{
		get { return id; }
		set { id = value; }
	}
}</pre>

	<p>
	For this case, the <tt>PrimaryKeyType</tt> could be omitted as it will default
	to <tt>Native</tt> anyway. ActiveRecord will correctly <b>assume</b>
	that the column name is <tt>Id</tt>.	If the column had a different name, for example 
	<tt>EntityId</tt>, you could use:
	</p>

	<pre format="cs">
	private int id;
	
	[PrimaryKey(PrimaryKeyType.Native, "EntityId")]
	public int Id
	{
		get { return id; }
		set { id = value; }
	}</pre>
	
	<p>You do not need a setter for the primary key, but 
	NHibernate needs to set the value somehow.
	You can then specify the <tt>Access</tt> for it, for example:
	</p>
	
	<pre format="cs">
	private int id;
	
	[PrimaryKey(Access=PropertyAccess.FieldCamelcase)]
	public int Id
	{
		get { return id; }
	}</pre>
	
	<section id="usingsequences">
		<title>Using sequences</title>
		
		<p>
		If your database supports sequences you need
		to use <tt>PrimaryKey.Sequence</tt> and inform the sequence name.
		For example:
		</p>

	<pre format="cs">
	private int id;
	
	[PrimaryKey(PrimaryKeyType.Sequence, SequenceName="entitysequence")]
	public int Id
	{
		get { return id; }
		set { id = value; }
	}</pre>
	
	</section>

	<section id="diffstrategies">
		<title>Different strategies</title>

		<p>
		Different strategies can be used to generate primary key values.
		Please refer to NHibernate documentation for more on them. 
		However, we need to inform that some strategies require more parameters.
		If you use one of those, you can use the <tt>Params</tt>
		property to inform the parameters. For example:
		</p>
		
	<pre format="cs">
	private String id;
	
	[PrimaryKey(PrimaryKeyType.UuidHex, Params="format=D,seperator=-")]
	public String Id
	{
		get { return id; }
		set { id = value; }
	}</pre>
	
		<p>
		Use just need to specify a sequence of <tt>name=value</tt> separated 
		by commas to <tt>Params</tt> property.
		</p>
	
	</section>
	
	<p>
	Please refer to the Reference Manual's 
	<a href="../manual/attributes.html">Attributes</a> article for further information.
	</p>
	
</section>

<section id="CompositePK">
	<title>Composite Primary Keys</title>

	<p>
	composite keys, also known as natural keys, consist of a set of column that 
	define the identifier of a row. 
	</p>

	<note>
	<p>
	Composite keys are highly discouraged. Use only when you have no other alternative.
	</p>
	</note>

	<p>
	To use composite keys with ActiveRecord you need to do two things:
	
	<ol>
	<li>
	Create a class to hold the properties and fields for 
	the columns that make up the key.
	<ul style="padding-top: 10px; padding-left: 13px;">
	<li style="list-style: square; list-style-type: square;">
	mark the class as <tt>Serializable</tt></li>
	<li style="list-style: square; list-style-type: square;">
	Override <tt>Equals</tt> and <tt>GetHashCode</tt></li>
	</ul>
	</li>
	
	<li>
	Declare the property on your <i>ActiveRecord type</i>
	and use the <tt>CompositeKeyAttribute</tt>.
	</li>
	</ol>
	</p>
	
	<p>
	To show an example, consider the following table script:
	</p>

	<pre format="tsql">
CREATE TABLE Users (
	[OrgID] [int] NOT NULL,
	[UserID] [int] NOT NULL,
	[GroupID] [int] NOT NULL,
	[Name] [varchar] (50) NULL,
	[Address] [varchar] (50) NULL,
	[City] [varchar] (50) NULL,
	[State] [varchar] (50) NULL
) ON [PRIMARY]
</pre>
	
	<p>
	The following is the definition of the composite key class <tt>ProductSupplierKey</tt>
	and next is the <i>ActiveRecord type</i>:
	</p>
	
	<pre format="cs">
using Castle.ActiveRecord;

[Serializable]
public class UserKey
{
	private int orgID;
	private int userID;
	
	[KeyProperty]
	public int OrgID
	{
		get { return orgID; }
		set { orgID = value; }
	}

	[KeyProperty]
	public int UserID
	{
		get { return userID; }
		set { userID = value; }
	}
	
	public override int GetHashCode()
	{
		return orgID ^ userID;
	}

	public override bool Equals(object obj)
	{
		if (this == obj)
		{
			return true;
		}
		UserKey key = obj as UserKey;
		if (key == null)
		{
			return false;
		}
		if (ident1 != key.orgID || ident2 != key.userID)
		{
			return false;
		}
		return true;
	}
}

[ActiveRecord("Users")]
public class User : ActiveRecordBase
{
	private UserKey key;
	
	[CompositeKey]
	public UserKey Key
	{
		get { return key; }
		set { key = value; }
	}
}</pre>

	<warning>
		<p>
			See the <b>implications</b> below. As was mentioned above, Composite keys are
			discouraged. However, if you must use them, you will have to address additional
			complexity in how your model is mapped to the database.
		</p>
	</warning>
	
	<section id="implications">
		<title>Implications of using composite keys</title>
		<p>
			An assigned identifier (like all CompositeKeys and string PrimaryKeys) cannot
			be used to determine whether an instance is detached or transient - since its
			value is assigned by the application, it is <i>never</i> null. Therefore,
			you must use another strategy, otherwise NHibernate will misbehave around the way it
			persists the instance to the database.
		</p>
		<p>
		
			To ensure that the data is persisted properly, you must choose one of two methods
			for managing persistence:
		</p>
		<ol>
			<li>
				Use the <tt>VersionAttribute</tt> to set the <tt>UnsavedValue</tt>. Normally, 
				the <tt>UnsavedValue</tt> is used with the <tt>PrimaryKeyAttribute</tt>, where
				the <tt>UnsavedValue</tt> is checked by NHibernate to determine the state of the
				instance... if the field or property is equal to the <tt>UnsavedValue</tt>, then 
				the object has not yet been persisted. However, because the field or property marked
				with the <tt>CompositeKeyAttribute</tt> cannot have an <tt>UnsavedValue</tt> that 
				is understood by NHibernate, another field or property must be used - the one that
				was marked by the <tt>VersionAttribute</tt>. This allows the use of the 
				<tt>Save</tt> method. 
			</li>
			<li>
				Do <i>not</i> use the <tt>Save</tt> method. Instead, use the <tt>Create</tt> and
				<tt>Update</tt> methods to force NHibernate to perform the persistence.
			</li>
		</ol>
		
		</section>
		
		<section id="relations">
			<title>Relations with composite keys</title>
			<p>
				Because a composite key is by nature multi-field, there are additional requirements
				when building the relations between objects that include these keys. The largest part
				of those requirements is that the <tt>HasMany</tt>, <tt>BelongsTo</tt> and
				<tt>HasAndBelongsToMany</tt> attributes will use different properties to determine the
				<tt>Column</tt>s, <tt>ColumnKey</tt>s and <tt>ColumnKeyRef</tt>s.
			</p>
			<p>
				To continue the example used above, we are going to redefine the User class, and add
				<tt>Org</tt> and <tt>Group</tt> classes, and include their relationships.</p>
			<p>	
				First, we will start off with some DDL to create the <tt>Org</tt> 
				and <tt>Group</tt> tables, as well as 
				the association table for the many-to-many 
				relationship between <tt>Users</tt> and <tt>Groups</tt>.
			</p>
			<pre format="tsql">
CREATE TABLE Orgs (
	[ID] [int] NOT NULL,
	[Name] [varchar] (50) NULL
) ON [PRIMARY]

CREATE TABLE Groups (
	[ID] [int] NOT NULL,
	[Name] [varchar] (50) NULL
) ON [PRIMARY]

CREATE TABLE UserGroups (
	[OrgID] [int] NOT NULL,
	[UserID] [int] NOT NULL,
	[GroupID] [int] NOT NULL
) ON [PRIMARY]</pre>
			<p>
				Next, we will redefine the <tt>User</tt> class, 
				adding the appropriate markup to maintain
				the mapping relationships.
			</p>
			<pre format="cs">
using Castle.ActiveRecord;

ActiveRecord("Users")]
public class User : ActiveRecordBase
{
	private UserKey key;
	private ISet groups;
	private Org org;

	public User()
	{
		groups = new HybridSet();
	}

	public User(UserKey userKey) : this()
	{
		key = userKey;
	}

	[CompositeKey]
	public UserKey Key
	{
		get { return key; }
		set { key = value; }
	}

	[HasAndBelongsToMany(typeof(Group),
		Table="UserGroups",
		ColumnRef="GroupID",
		CompositeKeyColumnKeys=new string[]{"OrgID","UserID"},
		Lazy=true,
		Cascade=ManyRelationCascadeEnum.SaveUpdate)
	public ISet Groups
	{
		get { return groups; }
	}

	[BelongsTo("OrgID", Insert=false, Update=false)
	public Org Org
	{
		get { return org; }
		set { org = value; }
	}
}</pre>
			<p>
				Note the <tt>CompositeKeyColumnKeys</tt> array, these are the fields that make up the
				foreign composite key in the association table.
			</p>
			<p>
				Another interesting item when dealing with composite keys, is when you want to build a
				relationship using only a single field of the composite key as the foreign key in a
				traditional one-to-many or many-to-one relationship. You can see the "one" side of that
				mapping in the definition of the "Org" property - setting 
				the <tt>Insert</tt>/<tt>Update</tt> to <tt>false</tt> is
				<b>not</b> optional. This prevents the other side of the relation from attempting to
				insert or update a portion of the composite key (in this case, the "OrgID" field).
			</p>
			<p>
				Now, we will define the other two classes, 
				to illustrate the other side of the relationships.
			</p>
			<pre format="cs">
[ActiveRecord("Orgs")
public class Org : ActiveRecordBase
{
	private int id;
	private ISet users;

	public Org()
	{
		users = new HybridSet();
	}

	[PrimaryKey(PrimaryKeyType.Native)]
	public int ID
	{
		get { return id; }
		set { id = value; }
	}

	[HasMany(typeof(User), Lazy=true)
	public ISet Users
	{
		get { return users; }
	}
}

[ActiveRecord("Groups")]
public class Group : ActiveRecordBase
{
	private int id;
	private ISet users;

	public Group()
	{
		users = new HybridSet();
	}

	[PrimaryKey(PrimaryKeyType.Native)]
	public int ID
	{
		get { return id; }
		set { id = value; }
	}

	[HasAndBelongsToMany(typeof(User),
		Table="UserGroups",
		CompositeKeyColumnRefs=new string[]{"OrgID","UserID"},
		ColumnKey="GroupID",
		Lazy=true,
		Inverse=true,
		Cascade=ManyRelationCascadeEnum.SaveUpdate)
	public ISet Users
	{
		get { return users; }
	}
}</pre>

	<p>
		On the side of the relationship <b>without</b> the composite key, use an array of
		column refs, while on the side of the relationship <b>with</b> the composite key,
		use an array of column keys.
	</p>
	
	
	</section>
	
</section>

</body>
</document>
