<?xml version="1.0"?>
<document order="6">
  <properties>
    <title>Accessing more than one database</title>
  </properties>
  <body>
<intro>
<p>
You can use more than one database with ActiveRecord. In order to do so 
you must create base classes that define, based on the hierarchy, which database is being used.
Those are called <i>Root types</i>. If you use just one database, the <i>root type</i>
is <tt>ActiveRecordBase</tt>.
</p>
</intro>

<section>
	<title>Adding a different database</title>

	<p>
	Let's analyze the steps involved in getting ActiveRecord 
	to work with more than one database. 
	</p>

<section>
	<title>First: Create your root type</title>

	<p>You must create an abstract class. It is recommended that
	this class extends ActiveRecordBase, because all <i>ActiveRecord types</i>
	bound to the second database must use it as the base class.
	This class can be empty. 	
	</p>
	<p>However, it is not necessary to extend ActiveRecordBase. 
	When ActiveRecord is used without base types (using
	ActiveRecordMediator), there is no gain from extending
	ActiveRecordBase, and inheriting from it can be safely omitted.</p>
	
<pre format="cs">
using Castle.ActiveRecord

public abstract class LogisticDatabase : ActiveRecordBase
{
}
</pre>

	<p>The class must not create a table by its own. It cannot
	be used as direct base class for single table or class
	table inheritance as described under 
	<a href="../usersguide/typehierarchy.html">Implementing Type hierarchies</a>.
	</p>
</section>

<section>
	<title>Second: configure the second database</title>

	<p>
	On the existing configuration, you must use add another
	config set bound to the abstract class you have just created.
	For more information on it, see <a href="../manual/xmlconfigref.html">
	Xml Configuration Reference</a>.
	</p>
	
</section>

</section>


</body>
</document>
