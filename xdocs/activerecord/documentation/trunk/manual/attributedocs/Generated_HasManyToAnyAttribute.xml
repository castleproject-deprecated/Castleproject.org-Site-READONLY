<?xml version="1.0"?>
<document order="24">
  <properties>
    <title>HasManyToAnyAttribute</title>
  </properties>

  <body>

<intro>
<p>
 This attribute allows polymorphic association between classes that doesn't have a common root class. In require two columns that would tell it what is the type of the asssoicated entity, and what is the PK of that entity. <remarks> This is supplied for advanced sceanrios. </remarks><example><p> For instnace, let assume that you have two classes (that implement a common interface, but have no base classs) called: - Back Account - Credit Card And you have a set of Payment methods, that can be either. You would define the mapping so: </p><pre format="cs">
[HasManyToAny(typeof(IPayment), "pay_id", "payments_table", typeof(int), "payment_type", "payment_method_id",
    MetaType = typeof(int), RelationType = RelationType.Set)]
</pre> typeof(IPayement) - the common interface tha both classes implement, and the type of all the items in the set. "pay_id" - the column that hold the PK of this entity (the FK column) "payments_table" - the table that has the assoication information (in 1:M scenarios - usuaully the same table, in M:N scenarios the link table). typeof(int) - the type of id column "payment_type" - the column used to find out which class is represented by this row. "payment_method_id" - the column that holds the PK of the assoicated class (either CreditCard or BankAccount). MetaType = typeof(int) - the type of the meta column (payment_type) RelationType = RelationType.Set - specify that we use a set here </example>
</p>


</intro>



<section id="HasManyToAnyAttribute_Constructors">
	<title>Constructors</title>

	<section>
	<title>HasManyToAnyAttribute(System.Type mapType, System.String keyColum, System.String table, System.Type idType, System.String typeColumn, System.String idColumn)</title>

<p>
 Initializes a new instance of the <tt>Castle.ActiveRecord.HasManyToAnyAttribute</tt> class. 
</p>


	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>mapType</tt></td>
		<td>
Type of the map.
		</td>
	</tr>
	<tr>
		<td><tt>keyColum</tt></td>
		<td>
The key colum.
		</td>
	</tr>
	<tr>
		<td><tt>table</tt></td>
		<td>
The table.
		</td>
	</tr>
	<tr>
		<td><tt>idType</tt></td>
		<td>
Type of the id.
		</td>
	</tr>
	<tr>
		<td><tt>typeColumn</tt></td>
		<td>
The type column.
		</td>
	</tr>
	<tr>
		<td><tt>idColumn</tt></td>
		<td>
The id column.
		</td>
	</tr>
	</table>
	</p>

	</section>
	
</section>



<section id="HasManyToAnyAttribute_Properties">
	<title>Properties</title>

	<p>
	<table class="commontable">
	<tr>
		<th>Name</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>TypeColumn</tt></td>
		<td>
 Gets or sets the type column. 
		</td>
	</tr>
	<tr>
		<td><tt>IdColumn</tt></td>
		<td>
 Gets or sets the id column. 
		</td>
	</tr>
	<tr>
		<td><tt>MetaType</tt></td>
		<td>
 Gets or sets the type of the meta column 
		</td>
	</tr>
	<tr>
		<td><tt>IdType</tt></td>
		<td>
 Gets or sets the type of the id column 
		</td>
	</tr>
	<tr>
		<td><tt>ColumnKey</tt></td>
		<td>
 Gets or sets the key column name. 
		</td>
	</tr>
	<tr>
		<td><tt>CompositeKeyColumnKeys</tt></td>
		<td>
 Gets or sets the names of the column in composite key scenarios. 
		</td>
	</tr>
	<tr>
		<td><tt>RelationType</tt></td>
		<td>
 Gets or sets the type of the relation. 
		</td>
	</tr>
	<tr>
		<td><tt>MapType</tt></td>
		<td>
 Gets or sets the type of the map. 
		</td>
	</tr>
	<tr>
		<td><tt>Table</tt></td>
		<td>
 Gets or sets the table for this relation 
		</td>
	</tr>
	<tr>
		<td><tt>Schema</tt></td>
		<td>
 Gets or sets the schema for this relation (dbo., etc) 
		</td>
	</tr>
	<tr>
		<td><tt>Lazy</tt></td>
		<td>
 Gets or sets a value indicating whether this <tt>Castle.ActiveRecord.RelationAttribute</tt> is lazy. 
		</td>
	</tr>
	<tr>
		<td><tt>Inverse</tt></td>
		<td>
 Gets or sets a value indicating whether this <tt>Castle.ActiveRecord.RelationAttribute</tt> is inverse. 
		</td>
	</tr>
	<tr>
		<td><tt>Cascade</tt></td>
		<td>
 Gets or sets the cascade options for this <tt>Castle.ActiveRecord.RelationAttribute</tt>
		</td>
	</tr>
	<tr>
		<td><tt>OrderBy</tt></td>
		<td>
 Gets or sets the order by clause for this relation 
		</td>
	</tr>
	<tr>
		<td><tt>Where</tt></td>
		<td>
 Gets or sets the where clause for this relation 
		</td>
	</tr>
	<tr>
		<td><tt>Sort</tt></td>
		<td>
 Only used with sets 
		</td>
	</tr>
	<tr>
		<td><tt>Index</tt></td>
		<td>
 Only used with maps or list 
		</td>
	</tr>
	<tr>
		<td><tt>IndexType</tt></td>
		<td>
 Only used with maps 
		</td>
	</tr>
	<tr>
		<td><tt>Element</tt></td>
		<td>
 Use for simple types. 
		</td>
	</tr>
	<tr>
		<td><tt>Cache</tt></td>
		<td>
 Gets or sets the cache strategy to use for this property 
		</td>
	</tr>
	<tr>
		<td><tt>Access</tt></td>
		<td>
 Gets or sets the access strategy for this property 
		</td>
	</tr>
	<tr>
		<td><tt>CustomAccess</tt></td>
		<td>
 Gets or sets the custom access strategy 
		</td>
	</tr>
	<tr>
		<td><tt>AccessString</tt></td>
		<td>
 Gets the access strategy string for NHibernate's mapping. 
		</td>
	</tr>
	</table>
	</p>

</section>



</body>
</document>
