<?xml version="1.0"?>
<document order="4">
  <properties>
    <title>Validators</title>
  </properties>

  <body>

<intro>
<p>
A validator performs a rule check and is used in combinator with 
<a href="../usersguide/validation.html">the ActiveRecordValidationBase</a>.
</p>

<p>
There are two classes involved to make the validation work. The first
one is an attribute, that allow the programmer to declaratively 
decorate a property with the validation (or validations) it wants
to perform on its value.
The second one is the implementation of a validator. The attribute 
is responsible for instantiating the validator implementation.
</p>

<p>
When associating a validator with a property, you may optionally override the
error message in the case the validation fails. For example:
</p>

<p>
Note: validation relies on <a href="../../../../components/validator/index.html">Castle.Components.Validator</a>
</p>

<pre format="cs">
[ValidateEmail]
public String Email
{
	get { return email; }
	set { email = value; }
}
</pre>

<p>
If the above validation fails the error message will be 
"Field Email doesn't seem like a valid e-mail". To customize the message, use:
</p>

<pre format="cs">
[ValidateEmail("Not a valid email")]
public String Email
{
	get { return email; }
	set { email = value; }
}
</pre>

</intro>

<section id="TheAvailableValidators">
	<title>The available validators</title>
	
	<p>
	The following sections describe the existing validators.
	</p>

	<section id="ValidateIsUnique">
		<title>ValidateIsUnique</title>
		
		<p>
		Checks that the property value does not 
		exist in the database table.
		</p>
	</section>

	<section id="ValidateRegExp">
		<title>ValidateRegExp</title>
		
		<p>
		Checks the value of the property against a regular
		expression that must be matched.
		</p>
	</section>

	<section id="ValidateEmail">
		<title>ValidateEmail</title>
		
		<p>
		Checks if the property value 
		looks like a valid email. This is 
		done using a regular expression.
		</p>
	</section>

	<section id="ValidateNonEmpty">
		<title>ValidateNonEmpty</title>
		
		<p>
		Checks if the value is not null and not empty.
		</p>
	</section>
	
	<section id="ValidateConfirmation">
		<title>ValidateConfirmation</title>
		
		<p>
		Checks the value of the property has the same value of
		a different property. Useful for Password and Confirm password
		properties.
		</p>
	</section>
	
</section>

<section id="CreatingYourOwn">
	<title>Creating a custom validator</title>

	<p>
	To create your own validator you must start with an attribute 
	that extends from <tt>AbstractValidationAttribute</tt>.
	It must pass on an instance that implements <tt>IValidator</tt>.
	</p>
	
	<p>
	By implementing the <tt>IValidator</tt> interface
	you will get access to the <tt>PropertyInfo</tt>
	the attribute is associated with. You must perform
	the check on the <tt>Perform</tt> method.
	</p>
	
</section>

</body>
</document>
