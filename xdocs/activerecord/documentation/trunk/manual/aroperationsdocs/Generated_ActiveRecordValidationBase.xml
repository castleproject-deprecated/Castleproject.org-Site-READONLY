<?xml version="1.0"?>
<document order="2">
  <properties>
    <title>ActiveRecordValidationBase</title>
  </properties>

  <body>

<intro>
<p>
 Extends <tt>Castle.ActiveRecord.ActiveRecordBase</tt> adding automatic validation support. 
</p>


</intro>

<section>
	<title>Example</title>
	
	<pre format="cs">
public class Customer : ActiveRecordBase
{
    ...
    
    [Property, ValidateNotEmpty]
    public int Name
    {
        get { return _name; }
        set { _name = value; }
    }
    
    [Property, ValidateNotEmpty, ValidateEmail]
    public int Email
    {
        get { return _email; }
        set { _email = value; }
    }
</pre>
</section>

<section id="ActiveRecordValidationBase_Constructors">
	<title>Constructors</title>

	<section>
	<title>ActiveRecordValidationBase()</title>

<p>
 Constructs an ActiveRecordValidationBase 
</p>



	</section>
	
</section>


<section id="ActiveRecordValidationBase_Properties">
	<title>Properties</title>

	<p>
	<table class="commontable">
	<tr>
		<th>Name</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>ValidationErrorMessages</tt></td>
		<td>
 Returns a list of current validation errors messages. 
		</td>
	</tr>
	<tr>
		<td><tt>PropertiesValidationErrorMessage</tt></td>
		<td>
 Maps a specific PropertyInfo to a list of error messages. Useful for frameworks. 
		</td>
	</tr>
	</table>
	</p>

</section>

<section id="ActiveRecordValidationBase_Methods">
	<title>Methods</title>

	<section>
	<title>OnNotValid() 
</title>

<p>
 Throws an exception explaining why the save or update cannot be executed when fields are not ok to pass. 
</p>

<note>
<p>
 You can override this method to declare a better behavior. 
</p>
</note>


	</section>
	<section>
	<title>IsValid() 
: System.Boolean
</title>

<p>
 Performs the fields validation. Returns true if no validation error was found. 
</p>



	</section>
	<section>
	<title>Refresh() 
</title>

<p>
 Refresh the instance from the database. 
</p>



	</section>
	<section>
	<title>Delete() 
</title>

<p>
 Deletes the instance from the database. 
</p>



	</section>
	<section>
	<title>Update() 
</title>

<p>
 Persists the modification on the instance state to the database. 
</p>



	</section>
	<section>
	<title>Create() 
</title>

<p>
 Creates (Saves) a new instance to the database. 
</p>



	</section>
	<section>
	<title>Save() 
</title>

<p>
 Saves the instance information to the database. May Create or Update the instance depending on whether it has a valid ID. 
</p>



	</section>
	<section>
	<title>OnLoad(System.Object id) 
</title>

<p>
 Lifecycle method invoked during Load of the entity 
</p>


	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>id</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>

	</section>
	<section>
	<title>OnDelete() 
</title>

<p>
 Lifecycle method invoked during Delete of the entity 
</p>



	</section>
	<section>
	<title>OnUpdate() 
</title>

<p>
 Lifecycle method invoked during Update of the entity 
</p>



	</section>
	<section>
	<title>OnSave() 
</title>

<p>
 Lifecycle method invoked during Save of the entity 
</p>



	</section>
	<section>
	<title>FindDirty(System.Object id, System.Collections.IDictionary previousState, System.Collections.IDictionary currentState, NHibernate.Type.IType[] types) 
: System.Int32[]
</title>

<p>
 Called from <c>Flush()</c>. The return value determines whether the entity is updated 
</p>


	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>id</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>previousState</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>currentState</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>types</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>

	</section>
	<section>
	<title>IsUnsaved() 
: System.Object
</title>

<p>
 Called when a transient entity is passed to <c>SaveOrUpdate</c>. 
</p>



	</section>
	<section>
	<title>PostFlush() 
</title>

<p>
 Called after a flush that actually ends in execution of the SQL statements required to synchronize in-memory state with the database. 
</p>



	</section>
	<section>
	<title>PreFlush() 
</title>

<p>
 Called before a flush 
</p>



	</section>
	<section>
	<title>BeforeDelete(System.Collections.IDictionary adapter) 
</title>

<p>
 Hook to perform additional tasks before removing the object instance representation from the database. 
</p>


	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>adapter</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>

	</section>
	<section>
	<title>BeforeLoad(System.Collections.IDictionary adapter) 
: System.Boolean
</title>

<p>
 Hook to transform the read data from the database before populating the object instance 
</p>


	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>adapter</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>

	</section>
	<section>
	<title>BeforeSave(System.Collections.IDictionary state) 
: System.Boolean
</title>

<p>
 Hook to change the object state before saving it. 
</p>


	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>state</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>

	</section>
	<section>
	<title>ToString() 
: System.String
</title>

<p>

</p>



	</section>
	<section>
	<title>Execute(Castle.ActiveRecord.NHibernateDelegate call) 
: System.Object
</title>

<p>
 Invokes the specified delegate passing a valid NHibernate session. Used for custom NHibernate queries. 
</p>


	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>call</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>

	</section>
	
</section>


</body>
</document>
