<?xml version="1.0"?>
<document order="1">
  <properties>
    <title>ActiveRecordBase</title>
    <notoc/>
  </properties>

  <body>

<intro>
<p>
 Base class for all ActiveRecord classes. Implements all the functionality to simplify the code on the subclasses. 
</p>


</intro>



<section id="ActiveRecordBase_Constructors">
	<title>Constructors</title>

	<section>
	<title>ActiveRecordBase()</title>

<p>
 Constructs an ActiveRecordBase subclass. 
</p>



	</section>
	
</section>




<section id="ActiveRecordBase_Methods">
	<title>Methods</title>

	<section>
	<title>Refresh() 
</title>

<p>
 Refresh the instance from the database. 
</p>




	</section>
	<section>
	<title>Delete() 
</title>

<p>
 Deletes the instance from the database. 
</p>




	</section>
	<section>
	<title>Update() 
</title>

<p>
 Persists the modification on the instance state to the database. 
</p>




	</section>
	<section>
	<title>Create() 
</title>

<p>
 Creates (Saves) a new instance to the database. 
</p>




	</section>
	<section>
	<title>Save() 
</title>

<p>
 Saves the instance information to the database. May Create or Update the instance depending on whether it has a valid ID. 
</p>




	</section>
	<section>
	<title>OnLoad(System.Object id) 
</title>

<p>
 Lifecycle method invoked during Load of the entity 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>id</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>

	</section>
	<section>
	<title>OnDelete() 
</title>

<p>
 Lifecycle method invoked during Delete of the entity 
</p>




	</section>
	<section>
	<title>OnUpdate() 
</title>

<p>
 Lifecycle method invoked during Update of the entity 
</p>




	</section>
	<section>
	<title>OnSave() 
</title>

<p>
 Lifecycle method invoked during Save of the entity 
</p>




	</section>
	<section>
	<title>FindDirty(System.Object id, System.Collections.IDictionary previousState, System.Collections.IDictionary currentState, NHibernate.Type.IType[] types) 
: System.Int32[]
</title>

<p>
 Called from <c>Flush()</c>. The return value determines whether the entity is updated 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>id</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>previousState</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>currentState</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>types</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>

	</section>
	<section>
	<title>IsUnsaved() 
: System.Object
</title>

<p>
 Called when a transient entity is passed to <c>SaveOrUpdate</c>. 
</p>




	</section>
	<section>
	<title>PostFlush() 
</title>

<p>
 Called after a flush that actually ends in execution of the SQL statements required to synchronize in-memory state with the database. 
</p>




	</section>
	<section>
	<title>PreFlush() 
</title>

<p>
 Called before a flush 
</p>




	</section>
	<section>
	<title>BeforeDelete(System.Collections.IDictionary adapter) 
</title>

<p>
 Hook to perform additional tasks before removing the object instance representation from the database. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>adapter</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>

	</section>
	<section>
	<title>BeforeLoad(System.Collections.IDictionary adapter) 
: System.Boolean
</title>

<p>
 Hook to transform the read data from the database before populating the object instance 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>adapter</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>

	</section>
	<section>
	<title>BeforeSave(System.Collections.IDictionary state) 
: System.Boolean
</title>

<p>
 Hook to change the object state before saving it. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>state</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>

	</section>
	<section>
	<title>ToString() 
: System.String
</title>

<p>
Missing summary
</p>




	</section>
	<section>
	<title>Create(System.Object instance) 
</title>

<p>
 Creates (Saves) a new instance to the database. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>instance</tt></td>
		<td>
The ActiveRecord instance to be created on the database
		</td>
	</tr>
	</table>
	</p>

	</section>
	<section>
	<title>Delete(System.Object instance) 
</title>

<p>
 Deletes the instance from the database. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>instance</tt></td>
		<td>
The ActiveRecord instance to be deleted
		</td>
	</tr>
	</table>
	</p>

	</section>
	<section>
	<title>Refresh(System.Object instance) 
</title>

<p>
 Refresh the instance from the database. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>instance</tt></td>
		<td>
The ActiveRecord instance to be reloaded
		</td>
	</tr>
	</table>
	</p>

	</section>
	<section>
	<title>DeleteAll(System.Type type) 
</title>

<p>
 Deletes all rows for the specified ActiveRecord type 
</p>


<note>
<p>
 This method is usually useful for test cases. 
</p>
</note>

	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>type</tt></td>
		<td>
ActiveRecord type on which the rows on the database should be deleted
		</td>
	</tr>
	</table>
	</p>

	</section>
	<section>
	<title>DeleteAll(System.Type type, System.String where) 
</title>

<p>
 Deletes all rows for the specified ActiveRecord type that matches the supplied HQL condition 
</p>


<note>
<p>
 This method is usually useful for test cases. 
</p>
</note>

	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>type</tt></td>
		<td>
ActiveRecord type on which the rows on the database should be deleted
		</td>
	</tr>
	<tr>
		<td><tt>where</tt></td>
		<td>
HQL condition to select the rows to be deleted
		</td>
	</tr>
	</table>
	</p>

	</section>
	<section>
	<title>DeleteAll(System.Type targetType, System.Collections.IEnumerable pkValues) 
: System.Int32
</title>

<p>
 Deletes all <paramref name="targetType" /> objects, based on the primary keys supplied on <paramref name="pkValues" />. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>targetType</tt></td>
		<td>
The target ActiveRecord type
		</td>
	</tr>
	<tr>
		<td><tt>pkValues</tt></td>
		<td>
A list of primary keys
		</td>
	</tr>
	</table>
	</p>

	</section>
	<section>
	<title>Update(System.Object instance) 
</title>

<p>
 Persists the modification on the instance state to the database. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>instance</tt></td>
		<td>
The ActiveRecord instance to be updated on the database
		</td>
	</tr>
	</table>
	</p>

	</section>
	<section>
	<title>Save(System.Object instance) 
</title>

<p>
 Saves the instance to the database. If the primary key is unitialized it creates the instance on the database. Otherwise it updates it. <p> If the primary key is assigned, then you must invoke <tt>Castle.ActiveRecord.ActiveRecordBase.Create</tt> or <tt>Castle.ActiveRecord.ActiveRecordBase.Update</tt> instead. </p>
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>instance</tt></td>
		<td>
The ActiveRecord instance to be saved
		</td>
	</tr>
	</table>
	</p>

	</section>
	<section>
	<title>Execute(System.Type targetType, Castle.ActiveRecord.NHibernateDelegate call, System.Object instance) 
: System.Object
</title>

<p>
 Invokes the specified delegate passing a valid NHibernate session. Used for custom NHibernate queries. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>targetType</tt></td>
		<td>
The target ActiveRecordType
		</td>
	</tr>
	<tr>
		<td><tt>call</tt></td>
		<td>
The delegate instance
		</td>
	</tr>
	<tr>
		<td><tt>instance</tt></td>
		<td>
The ActiveRecord instance
		</td>
	</tr>
	</table>
	</p>

	</section>
	<section>
	<title>EnumerateQuery(Castle.ActiveRecord.IActiveRecordQuery query) 
: System.Collections.IEnumerable
</title>

<p>
Missing summary
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>query</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>

	</section>
	<section>
	<title>ExecuteQuery(Castle.ActiveRecord.IActiveRecordQuery query) 
: System.Object
</title>

<p>
Missing summary
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>query</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>

	</section>
	<section>
	<title>CountAll(System.Type targetType) 
: System.Int32
</title>

<p>
 Returns the number of records of the specified type in the database 
</p>

<section>
	<title>Example</title>
	
	<pre format="cs">
[ActiveRecord]
public class User : ActiveRecordBase
{
  ...
  
  public static int CountAllUsers()
  {
    return CountAll(typeof(User));
  }
}
</pre>
</section>


	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>targetType</tt></td>
		<td>
Type of the target.
		</td>
	</tr>
	</table>
	</p>

	</section>
	<section>
	<title>CountAll(System.Type targetType, System.String filter, System.Object[] args) 
: System.Int32
</title>

<p>
 Returns the number of records of the specified type in the database 
</p>

<section>
	<title>Example</title>
	
	<pre format="cs">
[ActiveRecord]
public class User : ActiveRecordBase
{
  ...
  
  public static int CountAllUsersLocked()
  {
    return CountAll(typeof(User), "IsLocked = ?", true);
  }
}
</pre>
</section>


	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>targetType</tt></td>
		<td>
Type of the target.
		</td>
	</tr>
	<tr>
		<td><tt>filter</tt></td>
		<td>
A sql where string i.e. Person=? and DOB &gt; ?
		</td>
	</tr>
	<tr>
		<td><tt>args</tt></td>
		<td>
Positional parameters for the filter string
		</td>
	</tr>
	</table>
	</p>

	</section>
	<section>
	<title>Exists(System.Type targetType) 
: System.Boolean
</title>

<p>
 Check if there is any records in the db for the target type 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>targetType</tt></td>
		<td>
Type of the target.
		</td>
	</tr>
	</table>
	</p>

	</section>
	<section>
	<title>Exists(System.Type targetType, System.String filter, System.Object[] args) 
: System.Boolean
</title>

<p>
 Check if there is any records in the db for the target type 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>targetType</tt></td>
		<td>
Type of the target.
		</td>
	</tr>
	<tr>
		<td><tt>filter</tt></td>
		<td>
A sql where string i.e. Person=? and DOB &gt; ?
		</td>
	</tr>
	<tr>
		<td><tt>args</tt></td>
		<td>
Positional parameters for the filter string
		</td>
	</tr>
	</table>
	</p>

	</section>
	<section>
	<title>Exists(System.Type targetType, System.Object id) 
: System.Boolean
</title>

<p>
 Check if the <paramref name="id" /> exists in the database. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>targetType</tt></td>
		<td>
Type of the target.
		</td>
	</tr>
	<tr>
		<td><tt>id</tt></td>
		<td>
The id to check on
		</td>
	</tr>
	</table>
	</p>

	</section>
	<section>
	<title>FindAll(System.Type targetType) 
: System.Array
</title>

<p>
 Returns all instances found for the specified type. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>targetType</tt></td>
		<td>

		</td>
	</tr>
	</table>
	</p>

	</section>
	<section>
	<title>FindAll(System.Type targetType, NHibernate.Expression.Order[] orders, NHibernate.Expression.ICriterion[] criterias) 
: System.Array
</title>

<p>
 Returns all instances found for the specified type using sort orders and criterias. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>targetType</tt></td>
		<td>

		</td>
	</tr>
	<tr>
		<td><tt>orders</tt></td>
		<td>

		</td>
	</tr>
	<tr>
		<td><tt>criterias</tt></td>
		<td>

		</td>
	</tr>
	</table>
	</p>

	</section>
	<section>
	<title>FindAll(System.Type targetType, NHibernate.Expression.ICriterion[] criterias) 
: System.Array
</title>

<p>
 Returns all instances found for the specified type using criterias. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>targetType</tt></td>
		<td>

		</td>
	</tr>
	<tr>
		<td><tt>criterias</tt></td>
		<td>

		</td>
	</tr>
	</table>
	</p>

	</section>
	<section>
	<title>FindAllByProperty(System.Type targetType, System.String property, System.Object value) 
: System.Array
</title>

<p>
 Finds records based on a property value - automatically converts null values to IS NULL style queries. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>targetType</tt></td>
		<td>
The target type
		</td>
	</tr>
	<tr>
		<td><tt>property</tt></td>
		<td>
A property name (not a column name)
		</td>
	</tr>
	<tr>
		<td><tt>value</tt></td>
		<td>
The value to be equals to
		</td>
	</tr>
	</table>
	</p>

	</section>
	<section>
	<title>FindAllByProperty(System.Type targetType, System.String orderByColumn, System.String property, System.Object value) 
: System.Array
</title>

<p>
 Finds records based on a property value - automatically converts null values to IS NULL style queries. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>targetType</tt></td>
		<td>
The target type
		</td>
	</tr>
	<tr>
		<td><tt>orderByColumn</tt></td>
		<td>
The column name to be ordered ASC
		</td>
	</tr>
	<tr>
		<td><tt>property</tt></td>
		<td>
A property name (not a column name)
		</td>
	</tr>
	<tr>
		<td><tt>value</tt></td>
		<td>
The value to be equals to
		</td>
	</tr>
	</table>
	</p>

	</section>
	<section>
	<title>FindByPrimaryKey(System.Type targetType, System.Object id) 
: System.Object
</title>

<p>
 Finds an object instance by an unique ID 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>targetType</tt></td>
		<td>
The AR subclass type
		</td>
	</tr>
	<tr>
		<td><tt>id</tt></td>
		<td>
ID value
		</td>
	</tr>
	</table>
	</p>

	</section>
	<section>
	<title>FindByPrimaryKey(System.Type targetType, System.Object id, System.Boolean throwOnNotFound) 
: System.Object
</title>

<p>
 Finds an object instance by an unique ID 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>targetType</tt></td>
		<td>
The AR subclass type
		</td>
	</tr>
	<tr>
		<td><tt>id</tt></td>
		<td>
ID value
		</td>
	</tr>
	<tr>
		<td><tt>throwOnNotFound</tt></td>
		<td>
<c>true</c> if you want to catch an exception if the object is not found
		</td>
	</tr>
	</table>
	</p>

	</section>
	<section>
	<title>FindFirst(System.Type targetType, NHibernate.Expression.Order[] orders, NHibernate.Expression.ICriterion[] criterias) 
: System.Object
</title>

<p>
 Searches and returns the first row. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>targetType</tt></td>
		<td>
The target type
		</td>
	</tr>
	<tr>
		<td><tt>orders</tt></td>
		<td>
The sort order - used to determine which record is the first one
		</td>
	</tr>
	<tr>
		<td><tt>criterias</tt></td>
		<td>
The criteria expression
		</td>
	</tr>
	</table>
	</p>

	</section>
	<section>
	<title>FindFirst(System.Type targetType, NHibernate.Expression.ICriterion[] criterias) 
: System.Object
</title>

<p>
 Searches and returns the first row. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>targetType</tt></td>
		<td>
The target type
		</td>
	</tr>
	<tr>
		<td><tt>criterias</tt></td>
		<td>
The criteria expression
		</td>
	</tr>
	</table>
	</p>

	</section>
	<section>
	<title>FindOne(System.Type targetType, NHibernate.Expression.ICriterion[] criterias) 
: System.Object
</title>

<p>
 Searches and returns a row. If more than one is found, throws <tt>Castle.ActiveRecord.Framework.ActiveRecordException</tt>
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>targetType</tt></td>
		<td>
The target type
		</td>
	</tr>
	<tr>
		<td><tt>criterias</tt></td>
		<td>
The criteria expression
		</td>
	</tr>
	</table>
	</p>

	</section>
	<section>
	<title>SlicedFindAll(System.Type targetType, System.Int32 firstResult, System.Int32 maxResults, NHibernate.Expression.Order[] orders, NHibernate.Expression.ICriterion[] criterias) 
: System.Array
</title>

<p>
 Returns a portion of the query results (sliced) 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>targetType</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>firstResult</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>maxResults</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>orders</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>criterias</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>

	</section>
	<section>
	<title>SlicedFindAll(System.Type targetType, System.Int32 firstResult, System.Int32 maxResults, NHibernate.Expression.ICriterion[] criterias) 
: System.Array
</title>

<p>
 Returns a portion of the query results (sliced) 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>targetType</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>firstResult</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>maxResults</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	<tr>
		<td><tt>criterias</tt></td>
		<td>
Missing documentation
		</td>
	</tr>
	</table>
	</p>

	</section>
	<section>
	<title>Execute(Castle.ActiveRecord.NHibernateDelegate call) 
: System.Object
</title>

<p>
 Invokes the specified delegate passing a valid NHibernate session. Used for custom NHibernate queries. 
</p>



	<p>
	<table class="commontable">
	<tr>
		<th>Parameter</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><tt>call</tt></td>
		<td>
The delegate instance
		</td>
	</tr>
	</table>
	</p>

	</section>
	
</section>


</body>
</document>
