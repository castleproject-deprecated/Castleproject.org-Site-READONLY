<?xml version="1.0"?>
<document order="4">
  <properties>
    <title>Creating an ActiveRecord class</title>
  </properties>

  <body>

<intro>
<p>
Castle ActiveRecord acts on what we call <i>ActiveRecord types</i>. 
Those are classes that uses the <tt>ActiveRecordAttribute</tt> and extend from
one of the ActiveRecord base classes. Ultimately the base class is 
<tt>ActiveRecordBase</tt>. There is a generic base class documented at 
<a href="generics.thml">Generics support</a> article and 
another one that support validation, documented at
<a href="validation.html">Validation support</a> article.
</p>

</intro>

<section id="ARAttribute">
	<title>The ActiveRecordAttribute</title>
	
	<p>
	The <tt>ActiveRecordAttribute</tt> is used to define a class as 
	an <i>ActiveRecord type</i> and to associate mapping information. 
	</p>
	
	<p>
	The example below uses the parameterless constructor of the attribute:
	</p>

	<pre format="cs">
using Castle.ActiveRecord;

[ActiveRecord]
public class Product : ActiveRecordBase
{
	...</pre>
	
	<p>
	For the situation above the programmer did not made explicit 
	the table name nor the database schema. ActiveRecord then <b>assumes</b>
	the class <tt>Product</tt> is being mapped to a database table with <b>the same
	name</b>. The schema will be <tt>null</tt>.
	</p>
	
	<p>The following code snippet make the table name explicit:</p>

	<pre format="cs">
using Castle.ActiveRecord;

[ActiveRecord("Products")]
public class Product : ActiveRecordBase
{
	...</pre>

	<p>You can also use the <tt>Table</tt> and <tt>Schema</tt> properties to 
	make the information more clear to newcomers:
	</p>

	<pre format="cs">
using Castle.ActiveRecord;

[ActiveRecord(Table="Products",Schema="dbo")]
public class Product : ActiveRecordBase
{
	...</pre>
	
	<p>
	Please refer to the Reference Manual's 
	<a href="../manual/attributes.html">Attributes</a> article for further information.
	</p>

</section>

<section id="ARBase">
	<title>The ActiveRecordBase class</title>

	<note>
	<p>
	An <i>ActiveRecord type</i> must have a parameterless contructor.
	</p>
	</note>
	
	<p>
	The <tt>ActiveRecordBase</tt> is an abstract class that exposes
	public and protected members you are likely to use on your ActiveRecord class.
	The most basic one is to find a record by the primary key.
	</p>

	<pre format="cs">
using Castle.ActiveRecord;

[ActiveRecord]
public class Product : ActiveRecordBase
{
	// mapping omitted
	
	public static Product Find(int id)
	{
		return (Product) FindByPrimaryKey(typeof(Product), id);
	}
}</pre>	

	<p>The mapping is omitted on the class above but it is assumed
	that the primary key's type is <tt>int</tt>. The usage is very simple:</p>

	<pre format="cs">
Product product1 = Product.Find(1); // Exists

Product product2 = Product.Find(10000); // Does not exists, throws NotFoundException</pre>	

	<p>
	Some people prefer to return <tt>null</tt> instead of throwing an exception.
	As Castle Project as a whole is not opinionated software, we allow 
	one to define if he wants an exception or not if a search by primary key
	fails. Check the following example:
	</p>

	<pre format="cs">
using Castle.ActiveRecord;

[ActiveRecord]
public class Product : ActiveRecordBase
{
	// mapping omitted
	
	public static Product Find(int id)
	{
		// Note the 'false' value to the argument 'throwOnNotFound'
		return (Product) FindByPrimaryKey(typeof(Product), id, false);
	}
}</pre>

	<p>
	The <tt>ActiveRecordBase</tt> class also exposes instance members to 
	<tt>Save</tt>, <tt>Create</tt>, <tt>Update</tt> and <tt>Delete</tt>.
	The <tt>Save</tt> operation is able to find out if a class needs to be
	created or updated. <tt>Create</tt> and <tt>Update</tt> do not
	perform this check. 
	</p>
	
	<warning>
	<p>
	If a class has an assigned primary key type (i.e. the primary key is not 
	generated by the database) you <strong>can not</strong> use <tt>Save</tt>.
	For those classes you must use <tt>Create</tt> or <tt>Update</tt> only.
	</p>
	</warning>

	<p>
	Please refer to the Reference Manual's 
	<a href="../manual/aroperations.html">ActiveRecord operations</a> article for further information.
	</p>
	
</section>

</body>
</document>
