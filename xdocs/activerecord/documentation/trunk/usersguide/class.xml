<?xml version="1.0"?>
<document order="3">
  <properties>
    <title>Creating an ActiveRecord class</title>
  </properties>

  <body>

<intro>
<p>
Castle ActiveRecord acts on what is called <i>ActiveRecord types</i>. 
Those are classes that use the <tt>ActiveRecordAttribute</tt>. They can be also extended from
one of the ActiveRecord base classes, although this is not strictly 
necessary. There is a generic base class and 
another one that supports <a href="validation.html">validation</a>.
</p>

</intro>

<section id="ARAttribute">
	<title>The ActiveRecordAttribute</title>
	
	<p>
	The <tt>ActiveRecordAttribute</tt> is used to define a class as 
	an <i>ActiveRecord type</i> and to associate mapping information. 
	</p>
	
	<p>
	The example below uses the parameterless constructor of the attribute:
	</p>

	<pre format="cs"><![CDATA[
using Castle.ActiveRecord;

[ActiveRecord]
public class Product : ActiveRecordBase<Product>
{
	...]]></pre>
	
	<p>
	For the situation above the programmer did not made explicit 
	the table name nor the database schema. ActiveRecord then <b>assumes</b>
	the class <tt>Product</tt> is being mapped to a database table with <b>the same
	name</b>. The schema will be <tt>null</tt>.
	</p>
	
	<p>The following code snippet make the table name explicit:</p>

	<pre format="cs"><![CDATA[
using Castle.ActiveRecord;

[ActiveRecord("Products")]
public class Product : ActiveRecordBase<Product>
{
	...]]></pre>

	<p>You can also use the <tt>Table</tt> and <tt>Schema</tt> properties to 
	make the information more clear to newcomers:
	</p>

	<pre format="cs"><![CDATA[
using Castle.ActiveRecord;

[ActiveRecord(Table="Products",Schema="dbo")]
public class Product : ActiveRecordBase<Product>
{
	...]]></pre>
	
	<p>
	Please refer to the Reference Manual's 
	<a href="../manual/attributedocs/index.html">Attributes</a> article for further information.
	</p>

</section>

<section id="ARBase">
	<title>The ActiveRecordBase class</title>

	<note>
	<p>
	An <i>ActiveRecord type</i> must have a parameterless contructor.
	</p>
	</note>
	
	<p>
	The use of a base class is optional for using ActiveRecord, but using one of
	the base classes adds the functionality of the Active Record pattern to the
	persistent types.
	</p>
	<p>
	The default base class is <tt>ActiveRecordBase&amp;lt;T&amp;gt;</tt>. This class is
	generic by purpose. It defines multiple methods for fetching objects of the
	type from the database that use the generic class as return type. This allows
	the use of those methods without explicitly casting the results down to the
	required class. Example:
	</p>
	<pre format="cs"><![CDATA[
using Castle.ActiveRecord;

[ActiveRecord]
public class Product : ActiveRecordBase<Product>
{
	// mapping omitted
}
	
public class ClientCode
{
	public void UsesFindMethod(int id)
	{
		Product p = Product.Find(id);
		// use p
	}
}]]></pre>	
	
	<p>
	If it is not possible to use a generic baseclass for some reason,
	a non-generic version of <tt>ActiveRecordBase</tt> can be used. The 
	relevant find methods of this class are marked <tt>protected internal</tt>
	and must be overwritten to be used by client code:
	</p>
	<pre format="cs"><![CDATA[
using Castle.ActiveRecord;

[ActiveRecord]
public class Product : ActiveRecordBase
{
	// mapping omitted
	
	public static Product Find(int id)
	{
		return (Product) FindByPrimaryKey(typeof(Product), id);
	}
}]]></pre>	
	<p>
	The <tt>ActiveRecordBase</tt> class also exposes instance members to 
	<tt>Save</tt>, <tt>Create</tt>, <tt>Update</tt> and <tt>Delete</tt>.
	The <tt>Save</tt> operation is able to find out if a class needs to be
	created or updated. <tt>Create</tt> and <tt>Update</tt> do not
	perform this check. More information on these methods can be found
	under <a href="../manual/aroperationsdocs/index.html">ActiveRecord operations</a>
	</p>
	
	<warning>
	<p>
	If a class has an assigned primary key type (i.e. the primary key is not 
	generated by the database) it is necessary to specify a value that marks
	unsaved instances or it is <strong>not possible</strong> to use <tt>Save</tt>.
	For those classes <tt>Create</tt> or <tt>Update</tt> are available only.
	See the section about <a href="pks.html">primary key mappings</a> 
	for more information on this topic.
	</p>
	</warning>
	
</section>

</body>
</document>
