<?xml version="1.0"?>
<document order="5">
  <properties>
    <title>Any and HasManyToAny</title>
  </properties>

  <body>

<intro>

<p>
There are certain cases when you need to make an association from an entity to a range of possible objects that doesn't necessarily share a common base class.
</p>

<warning>
<p>
This is a fairly advanced scenario. Try to find a simpler solution if you can.
</p>
</warning>

</intro>

<section id="any">
	<title>Using Any</title>

<p>
A simple example may be a payment method in an <tt>Order</tt> class, 
where the choices are either a bank account or a credit card, like this:
</p>

<pre format="cs">
using Castle.ActiveRecord;

[ActiveRecord("CreditCards")]
public class CreditCard : ActiveRecordBase, IPaymentMethod
{ ... }

[ActiveRecord("BankAccounts")]
public class BankAccount : ActiveRecordBase, IPaymentMethod
{ ... }</pre>

<p>
A possible <tt>Order</tt> class does not know in advance the payment map, or how to map them.
They are not part of any hierarchy (either in the object model or an ActiveRecord one).
The solution is to map them to this schema:
</p>

<pre format="tsql">
CREATE TABLE Orders
(
  [Id] [int] not null identity(1,1),
  ...
  [Billing_Details_Id] [int] not null, 
  [Billing_Details_Type] [nvarchar] not null
)</pre>

<p>
Together <tt>BillingDetailsId</tt> and <tt>BillingDetailsType</tt>
points to the correct account or credit card that should pay for the order. Here is the attributes declarations. Note that unlike most other attributes, here you need to specify a few properties.
They cannot be infered.
</p>

<pre format="cs">
[Any(typeof(int), MetaType=typeof(string),
	TypeColumn="Billing_Details_Type",
	IdColumn="Billing_Details_Id",
	Cascade=CascadeEnum.SaveUpdate)]
[Any.MetaValue("CREDIT_CARD", typeof(CreditCard))]
[Any.MetaValue("BANK_ACCOUNT", typeof(BankAccount))]
public IPaymentMethod PaymentMethod 
{ 
    get { ... } 
    set { ... } 
}</pre>

<p>
The first parameter is the type of the <tt>Id</tt> column 
(in this case <tt>BillingDetailsId</tt>), 
the second is the <tt>MetaType</tt> definition, which in this 
case mean the type of the the field that defines the type of the id.
</p>

<p>
Next we have the <tt>TypeColumn</tt> and <tt>IdColumn</tt>, 
which match <tt>Billing_Details_Type</tt> and <tt>Billing_Details_Id</tt>.
</p>
<p>
The interesting part is the <tt>Any.MetaValue</tt> attribute. 
Here, we define that when the value in the <tt>Billing_Details_Type</tt> 
column is <tt>"CREDIT_CARD"</tt>, the value in the <tt>Billing_Details_Id</tt> 
column is the primary key of a <tt>CreditCard</tt>, 
and when the <tt>Billing_Details_Type</tt> is <tt>BANK_ACCOUNT</tt>, 
then the value in <tt>Billing_Details_Id</tt> 
should be interpreted as the primary key of a <tt>BankAccount</tt> class.
</p>

<note>
<p>
The type of the property should be of a common type or interface that all the possible objects share (worst case scenario: make it of type <tt>System.Object</tt>).
</p>
</note>

</section>

<section id="hasmanytoany">
	<title>Using HasManyToAny</title>
		
<p>
A natural extention of <tt>Any</tt>, the <tt>HasManyToAnyAttribute</tt> 
provides the same functionality for collections. 
Here is an example of a class that needs a set of payment methods:
</p>

<pre format="cs">
[HasManyToAny(typeof(IPayment), "pay_id", "payments_table", typeof(int), 
	"Billing_Details_Type", "Billing_Details_Id", MetaType=typeof(string))]
[Any.MetaValue("CREDIT_CARD", typeof(CreditCard))]
[Any.MetaValue("BANK_ACCOUNT", typeof(BankAccount))]
public ISet PaymentMethod 
{ 
	get { ... } 
	set { ... } 
}
</pre>

<p>
The parameters for HasManyToAny are (in order of apperances in the constructor):

<ul>
<li><tt>typeof(IPayment)</tt>: the type of the objects in this collection </li>
<li><tt>pay_id</tt>: the key column that maps the values in this collection to this object</li>
<li><tt>payment_table</tt>: the table for this collection</li>
<li><tt>typeof(int)</tt>: the type of the id column - identical to the first parameter of <tt>Any</tt></li>
<li><tt>Billing_Details_Type</tt>: identical in function to the <tt>Billing_Details_Type</tt> mentioned above</li>
<li><tt>Billing_Details_Id</tt>: identical to the <tt>Billing_Details_Id</tt> mentioned above</li>
<li><tt>MetaType=typeof(string)</tt>: the type of the type column / identical to the 
one described above</li>
</ul>
</p>

<p>
More information on the attribute can be found 
at <a href="../../manual/attributes.html">Attributes</a> article.
</p>

</section>

</body>
</document>
