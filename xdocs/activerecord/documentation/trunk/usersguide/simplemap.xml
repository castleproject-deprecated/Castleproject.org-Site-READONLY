<?xml version="1.0"?>
<document order="6">
  <properties>
    <title>Simple column mapping</title>
  </properties>

  <body>

<intro>
<p>
You can map ordinary columns to properties or to fields directly. 
</p>

</intro>

<section id="MappingToProperties">
	<title>Mapping columns to properties</title>

	<p>
	The simplest form to map a property declared on your class
	to a column in the database table is to use <tt>PropertyAttribute</tt> without parameters.
	ActiveRecord will <b>assume</b> that the column name is the same as the property
	name. For example, given the following table script:
	</p>
	
	<pre format="tsql">
CREATE TABLE Entity (
	[id] [int] IDENTITY (1, 1) NOT NULL,
	[name] [varchar] (20) NULL
) ON [PRIMARY]
</pre>

	<p>
	The mapping for this class would be (including the Primary Key):
	</p>
	
	<pre format="cs">
using Castle.ActiveRecord;

[ActiveRecord]
public class Entity : ActiveRecordBase
{
	private int id;
	private string name;
	
	[PrimaryKey(PrimaryKeyType.Native)]
	public int Id
	{
		get { return id; }
		set { id = value; }
	}
	
	[Property]
	public String Name
	{
		get { return name; }
		set { name = value; }
	}

}</pre>

	<p>
	If the column had a different name, for example <tt>EntityName</tt>, you could use:
	</p>

	<pre format="cs">
	private string name;
	
	[Property("name")]
	public String Name
	{
		get { return name; }
		set { name = value; }
	}</pre>
	
	<p>You do not need a setter for the primary key, but 
	NHibernate needs to set the value somehow.
	You can then specify the <tt>Access</tt> for it, for example:
	</p>
	
	<pre format="cs">
	private string name;
	
	[Property(Access=PropertyAccess.FieldCamelcase)]
	public String Name
	{
		get { return name; }
		set { name = value; }
	}</pre>

	<p>
	Please refer to the Reference Manual's 
	<a href="../manual/attributes.html">Attributes</a> article for further information.
	</p>
	
</section>

<section id="MappingToFields">
	<title>Mapping columns to fields</title>

	<p>
	Although property binding seems more natural,
	fields can also be mapped using the 
	<tt>FieldAttribute</tt>. The field can be of any
	visibility.
	</p>
	
	<p>
	The usage is the same as <tt>PropertyAttribute</tt>. 	
	</p>

	<pre format="cs">
	[Field]
	private string name;</pre>

	
	<p>
	Please refer to the Reference Manual's 
	<a href="../manual/attributes.html">Attributes</a> article for further information.
	</p>
	
</section>

<section id="largeobjects">
	<title>Large objects</title>

	<p>
	If your table have columns for large content (text or binary), you must specify the column
	type using the property <tt>ColumnType</tt>, which is present on both <tt>PropertyAttribute</tt> and <tt>FieldAttribute</tt>
	</p>

	<p>
	<table class="commontable">
	<tr>
		<th>Value to use</th>
		<th>.Net type</th>
		<th>Database type</th>
	</tr>
	
	<tr>
		<td align="center"><tt>StringClob</tt></td>
		<td align="center"><tt>string</tt></td>
		<td align="center"><tt>Text</tt></td>
	</tr>
	<tr>
		<td align="center"><tt>BinaryBlob</tt></td>
		<td align="center"><tt>byte[]</tt></td>
		<td align="center"><tt>Binary</tt></td>
	</tr>
	<tr>
		<td align="center"><tt>Serializable</tt></td>
		<td align="center">any object that implements serializable</td>
		<td align="center"><tt>Binary</tt></td>
	</tr>
	
	</table>
	</p>
	
</section>

<section id="specialtypes">
	<title>Nullable types</title>

	<p>
	As you know, value types in .net cannot assume
	a null value. Often however, column on the database
	like ints or DateTime are nullable. 
	</p>
	
	<p>
	For these situation, and if you are using .Net
	Framework 1.1, you should reference 
	the assembly <tt>Nullables</tt>
	and declare the nullable counter part type. For example:	
	</p>

	<pre format="cs">
using Castle.ActiveRecord;
using Nullables;

[ActiveRecord]
public class Entity : ActiveRecordBase
{
	private int id;
	private NullableInt32 age;
	private NullableDateTime created;
	private NullableBoolean accepted;
	
	// omitted primary key
	
	[Property]
	public NullableInt32 Age
	{
		get { return age; }
		set { age = value; }
	}

	[Property]
	public NullableDateTime CreatedAt
	{
		get { return created; }
		set { created = value; }
	}

	[Property]
	public NullableBoolean Accepted
	{
		get { return accepted; }
		set { accepted = value; }
	}
}</pre>

	<p>
	If you happen to be using .Net Framework 2.0
	then you probably know that it does have support
	for nullable types. In that case, the example
	above can be translated to:
	</p>

	<pre format="cs">
using Castle.ActiveRecord;

[ActiveRecord]
public class Entity : ActiveRecordBase
{
	private int id;
	private Int32? age;
	private DateTime? created;
	private Boolean? accepted;
	
	// omitted primary key
	
	[Property]
	public Int32? Age
	{
		get { return age; }
		set { age = value; }
	}

	[Property]
	public DateTime? CreatedAt
	{
		get { return created; }
		set { created = value; }
	}

	[Property]
	public Boolean? Accepted
	{
		get { return accepted; }
		set { accepted = value; }
	}
}</pre>


</section>


</body>
</document>
