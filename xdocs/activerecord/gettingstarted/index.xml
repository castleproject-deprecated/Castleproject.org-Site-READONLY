<?xml version="1.0"?>
<document order="1">
  <properties>
    <title>Getting started with ActiveRecord</title>
  </properties>

  <body>

<intro>
<p>
The <b>Castle ActiveRecord</b> project is an implementation of the 
<a href="http://en.wikipedia.org/wiki/Active_record">ActiveRecord pattern</a> for .NET. 
The ActiveRecord pattern consists on instance methods and properties representing 
rows in the database, and static methods acting on all rows.
</p>
<p>
<b>Castle ActiveRecord</b> is built on top of <a href="http://www.hibernate.org/343.html">NHibernate</a>, but its attribute-based mapping free the developer of writing XML for database-to-object mapping, which is needed when using NHibernate directly.</p>

</intro>

<toc/>

<section id="WhyWouldIUseIt">
<title>Why would I use it?</title>

<p>
With Castle ActiveRecord you won't have to learn NHibernate mapping schema to have a working data access layer in minutes. For most cases you won't need to deal with <tt>ISession</tt> and 
<tt>ISessionFactory</tt> either. Most of the complexity is handled by ActiveRecord, but if you want to do something more advanced, you will be able to do it.
</p>

<p>
Castle ActiveRecord offers a subset of NHibernate mapping functionality. We focused on covering the regular mappings used by most developers. Mapping is done using class, fields and property level attributes. ActiveRecord is able to infer table and column names if you omit them.
</p>

<p>
Just to give you a taste, the following is an example of an ActiveRecord class.
</p>

</section>


</body>
</document>
