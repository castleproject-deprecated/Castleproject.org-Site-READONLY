<?xml version="1.0" encoding="utf-8"?>
<ndoc SchemaVersion="1.3">
	<threadsafety static="true" instance="false" />
	<namespaceHierarchies>
	<namespaceHierarchy name="Castle.ActiveRecord.Framework.Config">
	<hierarchyType id="T:System.Object">
	<hierarchyType id="T:Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource">
	<hierarchyInterfaces>
	<hierarchyInterface id="T:Castle.ActiveRecord.Framework.IConfigurationSource" />
	</hierarchyInterfaces>
	<hierarchyType id="T:Castle.ActiveRecord.Framework.Config.XmlConfigurationSource">
	<hierarchyType id="T:Castle.ActiveRecord.Framework.Config.ActiveRecordSectionHandler">
	<hierarchyInterfaces><hierarchyInterface id="T:System.Configuration.IConfigurationSectionHandler" />
	</hierarchyInterfaces>
	</hierarchyType>
	</hierarchyType>
	</hierarchyType>
	</hierarchyType>
	</namespaceHierarchy>
	
	<namespaceHierarchy name="Castle.ActiveRecord">
	<hierarchyType id="T:System.Object">
	<hierarchyType id="T:Castle.ActiveRecord.ActiveRecordBaseQuery">
	<hierarchyInterfaces>
	<hierarchyInterface id="T:Castle.ActiveRecord.IActiveRecordQuery" />
	<hierarchyInterface id="T:System.ICloneable" />
	</hierarchyInterfaces>
	</hierarchyType>
	<hierarchyType id="T:Castle.ActiveRecord.ActiveRecordHooksBase">
	<hierarchyInterfaces>
	<hierarchyInterface id="T:NHibernate.ILifecycle" />
	</hierarchyInterfaces>
	<hierarchyType id="T:Castle.ActiveRecord.ActiveRecordBase">
	<hierarchyType id="T:Castle.ActiveRecord.ActiveRecordValidationBase">
	<hierarchyInterfaces>
	<hierarchyInterface id="T:NHibernate.IValidatable" />
	</hierarchyInterfaces>
	</hierarchyType>
	</hierarchyType>
	</hierarchyType>
	<hierarchyType id="T:Castle.ActiveRecord.ActiveRecordMediator" />
	<hierarchyType id="T:Castle.ActiveRecord.ActiveRecordStarter" />
	<hierarchyType id="T:Castle.ActiveRecord.Any" />
	<hierarchyType id="T:Castle.ActiveRecord.IActiveRecordQuery" />
	<hierarchyType id="T:Castle.ActiveRecord.ISessionScope">
	<hierarchyInterfaces>
	<hierarchyInterface id="T:System.IDisposable" />
	</hierarchyInterfaces>
	</hierarchyType>
	<hierarchyType id="T:Castle.ActiveRecord.PropertyAccessHelper" />
	<hierarchyType id="T:System.Attribute">
		<hierarchyType id="T:Castle.ActiveRecord.AbstractValidationAttribute">
			<hierarchyType id="T:Castle.ActiveRecord.ValidateConfirmationAttribute" />
			<hierarchyType id="T:Castle.ActiveRecord.ValidateCreditCardAttribute" />
			<hierarchyType id="T:Castle.ActiveRecord.ValidateEmailAttribute" />
			<hierarchyType id="T:Castle.ActiveRecord.ValidateIsUniqueAttribute" />
			<hierarchyType id="T:Castle.ActiveRecord.ValidateLengthAttribute" />
			<hierarchyType id="T:Castle.ActiveRecord.ValidateNotEmptyAttribute" />
			<hierarchyType id="T:Castle.ActiveRecord.ValidateRegExpAttribute" />
		</hierarchyType>
		<hierarchyType id="T:Castle.ActiveRecord.ActiveRecordSkipAttribute" />
		<hierarchyType id="T:Castle.ActiveRecord.Any.MetaValueAttribute" />
		<hierarchyType id="T:Castle.ActiveRecord.CollectionIDAttribute" />
		<hierarchyType id="T:Castle.ActiveRecord.HiloAttribute" />
		<hierarchyType id="T:Castle.ActiveRecord.ImportAttribute" />
		<hierarchyType id="T:Castle.ActiveRecord.JoinedBaseAttribute" />
		<hierarchyType id="T:Castle.ActiveRecord.JoinedKeyAttribute" />
		<hierarchyType id="T:Castle.ActiveRecord.NestedAttribute" />
		<hierarchyType id="T:Castle.ActiveRecord.WithAccessAttribute">
		<hierarchyType id="T:Castle.ActiveRecord.AnyAttribute" />
		<hierarchyType id="T:Castle.ActiveRecord.BaseAttribute">
			<hierarchyType id="T:Castle.ActiveRecord.ActiveRecordAttribute" />
			<hierarchyType id="T:Castle.ActiveRecord.RelationAttribute">
				<hierarchyType id="T:Castle.ActiveRecord.HasAndBelongsToManyAttribute" />
				<hierarchyType id="T:Castle.ActiveRecord.HasManyAttribute">
					<hierarchyType id="T:Castle.ActiveRecord.HasManyToAnyAttribute" />
				</hierarchyType>
			</hierarchyType>
		</hierarchyType>
		<hierarchyType id="T:Castle.ActiveRecord.BelongsToAttribute" />
		<hierarchyType id="T:Castle.ActiveRecord.CompositeKeyAttribute" />
		<hierarchyType id="T:Castle.ActiveRecord.FieldAttribute" />
		<hierarchyType id="T:Castle.ActiveRecord.OneToOneAttribute" />
		<hierarchyType id="T:Castle.ActiveRecord.PrimaryKeyAttribute" />
		<hierarchyType id="T:Castle.ActiveRecord.PropertyAttribute">
		<hierarchyType id="T:Castle.ActiveRecord.KeyPropertyAttribute" />
	</hierarchyType>
	
	<hierarchyType id="T:Castle.ActiveRecord.TimestampAttribute" /><hierarchyType id="T:Castle.ActiveRecord.VersionAttribute" /></hierarchyType></hierarchyType><hierarchyType id="T:System.Delegate"><hierarchyInterfaces><hierarchyInterface id="T:System.ICloneable" /><hierarchyInterface id="T:System.Runtime.Serialization.ISerializable" /></hierarchyInterfaces><hierarchyType id="T:System.MulticastDelegate"><hierarchyType id="T:Castle.ActiveRecord.NHibernateDelegate" /><hierarchyType id="T:Castle.ActiveRecord.SessionFactoryHolderDelegate" /></hierarchyType></hierarchyType><hierarchyType id="T:System.Exception"><hierarchyInterfaces><hierarchyInterface id="T:System.Runtime.Serialization.ISerializable" /></hierarchyInterfaces><hierarchyType id="T:Castle.ActiveRecord.Framework.ActiveRecordException"><hierarchyType id="T:Castle.ActiveRecord.NotFoundException" /><hierarchyType id="T:Castle.ActiveRecord.ValidationException" /></hierarchyType></hierarchyType><hierarchyType id="T:System.MarshalByRefObject"><hierarchyType id="T:Castle.ActiveRecord.Framework.Scopes.AbstractScope"><hierarchyInterfaces><hierarchyInterface id="T:Castle.ActiveRecord.ISessionScope" /><hierarchyInterface id="T:System.IDisposable" /></hierarchyInterfaces><hierarchyType id="T:Castle.ActiveRecord.SessionScope"><hierarchyType id="T:Castle.ActiveRecord.TransactionScope" /></hierarchyType></hierarchyType></hierarchyType><hierarchyType id="T:System.ValueType"><hierarchyType id="T:System.Enum"><hierarchyInterfaces><hierarchyInterface id="T:System.IComparable" /><hierarchyInterface id="T:System.IConvertible" /><hierarchyInterface id="T:System.IFormattable" /></hierarchyInterfaces><hierarchyType id="T:Castle.ActiveRecord.CacheEnum" /><hierarchyType id="T:Castle.ActiveRecord.CascadeEnum" /><hierarchyType id="T:Castle.ActiveRecord.CollectionIDType" /><hierarchyType id="T:Castle.ActiveRecord.FetchEnum" /><hierarchyType id="T:Castle.ActiveRecord.FlushAction" /><hierarchyType id="T:Castle.ActiveRecord.ManyRelationCascadeEnum" /><hierarchyType id="T:Castle.ActiveRecord.OptimisticLocking" /><hierarchyType id="T:Castle.ActiveRecord.OuterJoinEnum" /><hierarchyType id="T:Castle.ActiveRecord.Polymorphism" /><hierarchyType id="T:Castle.ActiveRecord.PrimaryKeyType" /><hierarchyType id="T:Castle.ActiveRecord.PropertyAccess" /><hierarchyType id="T:Castle.ActiveRecord.RelationType" /><hierarchyType id="T:Castle.ActiveRecord.SessionScopeType" /><hierarchyType id="T:Castle.ActiveRecord.TransactionMode" /></hierarchyType></hierarchyType></hierarchyType></namespaceHierarchy><namespaceHierarchy name="Castle.ActiveRecord.Queries.Modifiers"><hierarchyType id="T:System.Object"><hierarchyType id="T:Castle.ActiveRecord.Queries.Modifiers.IQueryModifier" /><hierarchyType id="T:Castle.ActiveRecord.Queries.Modifiers.QueryParameter"><hierarchyInterfaces><hierarchyInterface id="T:Castle.ActiveRecord.Queries.Modifiers.IQueryModifier" /></hierarchyInterfaces></hierarchyType><hierarchyType id="T:Castle.ActiveRecord.Queries.Modifiers.QueryRange"><hierarchyInterfaces><hierarchyInterface id="T:Castle.ActiveRecord.Queries.Modifiers.IQueryModifier" /></hierarchyInterfaces></hierarchyType></hierarchyType></namespaceHierarchy><namespaceHierarchy name="Castle.ActiveRecord.Framework.Scopes"><hierarchyType id="T:System.Object"><hierarchyType id="T:Castle.ActiveRecord.Framework.Scopes.AbstractThreadScopeInfo"><hierarchyInterfaces><hierarchyInterface id="T:Castle.ActiveRecord.Framework.IThreadScopeInfo" /></hierarchyInterfaces><hierarchyType id="T:Castle.ActiveRecord.Framework.Scopes.HybridWebThreadScopeInfo" /><hierarchyType id="T:Castle.ActiveRecord.Framework.Scopes.ThreadScopeInfo" /><hierarchyType id="T:Castle.ActiveRecord.Framework.Scopes.WebThreadScopeInfo" /></hierarchyType><hierarchyType id="T:Castle.ActiveRecord.Framework.Scopes.ThreadScopeAccessor"><hierarchyInterfaces><hierarchyInterface id="T:Castle.ActiveRecord.Framework.IThreadScopeInfo" /></hierarchyInterfaces></hierarchyType><hierarchyType id="T:System.Exception"><hierarchyInterfaces><hierarchyInterface id="T:System.Runtime.Serialization.ISerializable" /></hierarchyInterfaces><hierarchyType id="T:Castle.ActiveRecord.Framework.Scopes.ScopeMachineryException" /></hierarchyType><hierarchyType id="T:System.MarshalByRefObject"><hierarchyType id="T:Castle.ActiveRecord.Framework.Scopes.AbstractScope"><hierarchyInterfaces><hierarchyInterface id="T:Castle.ActiveRecord.ISessionScope" /><hierarchyInterface id="T:System.IDisposable" /></hierarchyInterfaces><hierarchyType id="T:Castle.ActiveRecord.Framework.Scopes.DifferentDatabaseScope" /></hierarchyType></hierarchyType></hierarchyType></namespaceHierarchy><namespaceHierarchy name="Castle.ActiveRecord.Framework.Internal"><hierarchyType id="T:System.Object"><hierarchyType id="T:Castle.ActiveRecord.Framework.Internal.AbstractDepthFirstVisitor"><hierarchyInterfaces><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IVisitor" /></hierarchyInterfaces><hierarchyType id="T:Castle.ActiveRecord.Framework.Internal.GraphConnectorVisitor" /><hierarchyType id="T:Castle.ActiveRecord.Framework.Internal.SemanticVerifierVisitor" /><hierarchyType id="T:Castle.ActiveRecord.Framework.Internal.XmlGenerationVisitor" /></hierarchyType><hierarchyType id="T:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel"><hierarchyInterfaces><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IModelNode" /><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IVisitable" /></hierarchyInterfaces></hierarchyType><hierarchyType id="T:Castle.ActiveRecord.Framework.Internal.ActiveRecordModelBuilder" /><hierarchyType id="T:Castle.ActiveRecord.Framework.Internal.AnyModel"><hierarchyInterfaces><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IModelNode" /><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IVisitable" /></hierarchyInterfaces></hierarchyType><hierarchyType id="T:Castle.ActiveRecord.Framework.Internal.ARSchemaCreator" /><hierarchyType id="T:Castle.ActiveRecord.Framework.Internal.BelongsToModel"><hierarchyInterfaces><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IModelNode" /><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IVisitable" /></hierarchyInterfaces></hierarchyType><hierarchyType id="T:Castle.ActiveRecord.Framework.Internal.CollectionIDModel"><hierarchyInterfaces><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IModelNode" /><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IVisitable" /></hierarchyInterfaces></hierarchyType><hierarchyType id="T:Castle.ActiveRecord.Framework.Internal.CompositeKeyModel"><hierarchyInterfaces><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IModelNode" /><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IVisitable" /></hierarchyInterfaces></hierarchyType><hierarchyType id="T:Castle.ActiveRecord.Framework.Internal.FieldModel"><hierarchyInterfaces><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IModelNode" /><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IVisitable" /></hierarchyInterfaces></hierarchyType><hierarchyType id="T:Castle.ActiveRecord.Framework.Internal.HasAndBelongsToManyModel"><hierarchyInterfaces><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IModelNode" /><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IVisitable" /></hierarchyInterfaces></hierarchyType><hierarchyType id="T:Castle.ActiveRecord.Framework.Internal.HasManyModel"><hierarchyInterfaces><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IModelNode" /><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IVisitable" /></hierarchyInterfaces></hierarchyType><hierarchyType id="T:Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel"><hierarchyInterfaces><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IModelNode" /><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IVisitable" /></hierarchyInterfaces></hierarchyType><hierarchyType id="T:Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel.Config"><hierarchyInterfaces><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IModelNode" /><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IVisitable" /></hierarchyInterfaces></hierarchyType><hierarchyType id="T:Castle.ActiveRecord.Framework.Internal.HiloModel"><hierarchyInterfaces><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IModelNode" /><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IVisitable" /></hierarchyInterfaces></hierarchyType><hierarchyType id="T:Castle.ActiveRecord.Framework.Internal.IModelNode"><hierarchyInterfaces><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IVisitable" /></hierarchyInterfaces></hierarchyType><hierarchyType id="T:Castle.ActiveRecord.Framework.Internal.ImportModel"><hierarchyInterfaces><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IModelNode" /><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IVisitable" /></hierarchyInterfaces></hierarchyType><hierarchyType id="T:Castle.ActiveRecord.Framework.Internal.IVisitable" /><hierarchyType id="T:Castle.ActiveRecord.Framework.Internal.IVisitor" /><hierarchyType id="T:Castle.ActiveRecord.Framework.Internal.KeyModel"><hierarchyInterfaces><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IModelNode" /><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IVisitable" /></hierarchyInterfaces></hierarchyType><hierarchyType id="T:Castle.ActiveRecord.Framework.Internal.NestedModel"><hierarchyInterfaces><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IModelNode" /><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IVisitable" /></hierarchyInterfaces></hierarchyType><hierarchyType id="T:Castle.ActiveRecord.Framework.Internal.OneToOneModel"><hierarchyInterfaces><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IModelNode" /><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IVisitable" /></hierarchyInterfaces></hierarchyType><hierarchyType id="T:Castle.ActiveRecord.Framework.Internal.PrimaryKeyModel"><hierarchyInterfaces><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IModelNode" /><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IVisitable" /></hierarchyInterfaces></hierarchyType><hierarchyType id="T:Castle.ActiveRecord.Framework.Internal.PropertyModel"><hierarchyInterfaces><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IModelNode" /><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IVisitable" /></hierarchyInterfaces></hierarchyType><hierarchyType id="T:Castle.ActiveRecord.Framework.Internal.TimestampModel"><hierarchyInterfaces><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IModelNode" /><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IVisitable" /></hierarchyInterfaces></hierarchyType><hierarchyType id="T:Castle.ActiveRecord.Framework.Internal.VersionModel"><hierarchyInterfaces><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IModelNode" /><hierarchyInterface id="T:Castle.ActiveRecord.Framework.Internal.IVisitable" /></hierarchyInterfaces></hierarchyType><hierarchyType id="T:System.Collections.DictionaryBase"><hierarchyInterfaces><hierarchyInterface id="T:System.Collections.ICollection" /><hierarchyInterface id="T:System.Collections.IDictionary" /><hierarchyInterface id="T:System.Collections.IEnumerable" /></hierarchyInterfaces><hierarchyType id="T:Castle.ActiveRecord.Framework.Internal.ActiveRecordModelCollection" /></hierarchyType></hierarchyType></namespaceHierarchy><namespaceHierarchy name="Castle.ActiveRecord.Queries"><hierarchyType id="T:System.Object"><hierarchyType id="T:Castle.ActiveRecord.ActiveRecordBaseQuery"><hierarchyInterfaces><hierarchyInterface id="T:Castle.ActiveRecord.IActiveRecordQuery" /><hierarchyInterface id="T:System.ICloneable" /></hierarchyInterfaces><hierarchyType id="T:Castle.ActiveRecord.Queries.HqlBasedQuery"><hierarchyType id="T:Castle.ActiveRecord.Queries.CountQuery" /><hierarchyType id="T:Castle.ActiveRecord.Queries.ScalarQuery" /><hierarchyType id="T:Castle.ActiveRecord.Queries.SimpleQuery" /></hierarchyType></hierarchyType></hierarchyType></namespaceHierarchy><namespaceHierarchy name="Castle.ActiveRecord.Framework"><hierarchyType id="T:System.Object"><hierarchyType id="T:Castle.ActiveRecord.Framework.DictionaryAdapter"><hierarchyInterfaces><hierarchyInterface id="T:System.Collections.ICollection" /><hierarchyInterface id="T:System.Collections.IDictionary" /><hierarchyInterface id="T:System.Collections.IEnumerable" /></hierarchyInterfaces></hierarchyType><hierarchyType id="T:Castle.ActiveRecord.Framework.DictionaryAdapter.Entry" /><hierarchyType id="T:Castle.ActiveRecord.Framework.HookDispatcher"><hierarchyInterfaces><hierarchyInterface id="T:NHibernate.IInterceptor" /></hierarchyInterfaces></hierarchyType><hierarchyType id="T:Castle.ActiveRecord.Framework.IConfigurationSource" /><hierarchyType id="T:Castle.ActiveRecord.Framework.ISessionFactoryHolder" /><hierarchyType id="T:Castle.ActiveRecord.Framework.IThreadScopeInfo" /><hierarchyType id="T:Castle.ActiveRecord.Framework.IValidator" /><hierarchyType id="T:Castle.ActiveRecord.Framework.SessionScopeWebModule"><hierarchyInterfaces><hierarchyInterface id="T:System.Web.IHttpModule" /></hierarchyInterfaces></hierarchyType><hierarchyType id="T:Castle.ActiveRecord.Framework.SupportingUtils" /><hierarchyType id="T:System.Delegate"><hierarchyInterfaces><hierarchyInterface id="T:System.ICloneable" /><hierarchyInterface id="T:System.Runtime.Serialization.ISerializable" /></hierarchyInterfaces><hierarchyType id="T:System.MulticastDelegate"><hierarchyType id="T:Castle.ActiveRecord.Framework.RootTypeHandler" /></hierarchyType></hierarchyType><hierarchyType id="T:System.Exception"><hierarchyInterfaces><hierarchyInterface id="T:System.Runtime.Serialization.ISerializable" /></hierarchyInterfaces><hierarchyType id="T:Castle.ActiveRecord.Framework.ActiveRecordException"><hierarchyType id="T:Castle.ActiveRecord.Framework.ActiveRecordInitializationException" /><hierarchyType id="T:Castle.ActiveRecord.Framework.TransactionException" /></hierarchyType></hierarchyType><hierarchyType id="T:System.MarshalByRefObject"><hierarchyType id="T:Castle.ActiveRecord.Framework.SessionFactoryHolder"><hierarchyInterfaces><hierarchyInterface id="T:Castle.ActiveRecord.Framework.ISessionFactoryHolder" /></hierarchyInterfaces></hierarchyType></hierarchyType></hierarchyType></namespaceHierarchy><namespaceHierarchy name="Castle.ActiveRecord.Framework.Validators"><hierarchyType id="T:System.Object"><hierarchyType id="T:Castle.ActiveRecord.Framework.Validators.AbstractValidator"><hierarchyInterfaces><hierarchyInterface id="T:Castle.ActiveRecord.Framework.IValidator" /></hierarchyInterfaces><hierarchyType id="T:Castle.ActiveRecord.Framework.Validators.ConfirmationValidator" /><hierarchyType id="T:Castle.ActiveRecord.Framework.Validators.CreditCardValidator" /><hierarchyType id="T:Castle.ActiveRecord.Framework.Validators.IsUniqueValidator" /><hierarchyType id="T:Castle.ActiveRecord.Framework.Validators.LengthValidator" /><hierarchyType id="T:Castle.ActiveRecord.Framework.Validators.NullCheckValidator" /><hierarchyType id="T:Castle.ActiveRecord.Framework.Validators.RegularExpressionValidator"><hierarchyType id="T:Castle.ActiveRecord.Framework.Validators.EmailValidator" /></hierarchyType></hierarchyType><hierarchyType id="T:System.ValueType"><hierarchyType id="T:System.Enum"><hierarchyInterfaces><hierarchyInterface id="T:System.IComparable" /><hierarchyInterface id="T:System.IConvertible" /><hierarchyInterface id="T:System.IFormattable" /></hierarchyInterfaces><hierarchyType id="T:Castle.ActiveRecord.Framework.Validators.CreditCardValidator.CardType" /></hierarchyType></hierarchyType></hierarchyType></namespaceHierarchy></namespaceHierarchies>
	
	
	<assembly name="Castle.ActiveRecord" filename="Castle.ActiveRecord.dll">
	
	<module name="Castle.ActiveRecord.dll">
	
	<namespace name="Castle.ActiveRecord">
	
	
	<class name="AbstractValidationAttribute" id="T:Castle.ActiveRecord.AbstractValidationAttribute" access="Public" abstract="true" baseType="Attribute"><attribute name="System.SerializableAttribute" /><base name="Attribute" id="T:System.Attribute" type="System.Attribute" /><derivedBy id="T:Castle.ActiveRecord.ValidateConfirmationAttribute" /><derivedBy id="T:Castle.ActiveRecord.ValidateCreditCardAttribute" /><derivedBy id="T:Castle.ActiveRecord.ValidateEmailAttribute" /><derivedBy id="T:Castle.ActiveRecord.ValidateIsUniqueAttribute" /><derivedBy id="T:Castle.ActiveRecord.ValidateLengthAttribute" /><derivedBy id="T:Castle.ActiveRecord.ValidateNotEmptyAttribute" /><derivedBy id="T:Castle.ActiveRecord.ValidateRegExpAttribute" /><constructor name=".ctor" id="M:Castle.ActiveRecord.AbstractValidationAttribute.#ctor(Castle.ActiveRecord.Framework.IValidator)" access="Public" contract="Normal" overload="1"><parameter name="validator" type="Castle.ActiveRecord.Framework.IValidator" valueType="false" /></constructor><constructor name=".ctor" id="M:Castle.ActiveRecord.AbstractValidationAttribute.#ctor(Castle.ActiveRecord.Framework.IValidator,System.String)" access="Public" contract="Normal" overload="2"><parameter name="validator" type="Castle.ActiveRecord.Framework.IValidator" valueType="false" /><parameter name="errorMessage" type="System.String" valueType="false" /></constructor><property name="Validator" id="P:Castle.ActiveRecord.AbstractValidationAttribute.Validator" access="Public" contract="Normal" type="Castle.ActiveRecord.Framework.IValidator" valueType="false" get="true" set="false" /><property name="TypeId" id="P:Castle.ActiveRecord.AbstractValidationAttribute.TypeId" access="Public" contract="Virtual" type="System.Object" valueType="false" declaringType="System.Attribute" get="true" set="false"><documentation><summary>
        <para> When implemented in a derived class, gets a unique identifier for this <see langword="Attribute" />.</para>
      </summary></documentation></property>
	  
	  <method 
		name="IsDefaultAttribute" 
		id="M:Castle.ActiveRecord.AbstractValidationAttribute.IsDefaultAttribute" 
		access="Public" 
		contract="Virtual" 
		returnType="System.Boolean" 
		valueType="true" 
		declaringType="System.Attribute">
		
		<documentation>
	  <summary>
        <para> When overridden in a derived class, returns an indication whether the value of this instance is the default value for the derived class. </para>
		
      </summary></documentation>
	  </method>
	  
	  <method name="Match" id="M:Castle.ActiveRecord.AbstractValidationAttribute.Match(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Attribute"><documentation><summary>
        <para> When overridden in a derived class, returns a value indicating whether this instance equals a specified object. </para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="Finalize" id="M:Castle.ActiveRecord.AbstractValidationAttribute.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Castle.ActiveRecord.AbstractValidationAttribute.GetHashCode" access="Public" contract="Override" returnType="System.Int32" valueType="true" declaringType="System.Attribute"><documentation><summary>
        <para>Returns the hash code for this instance.</para>
      </summary></documentation></method><method name="Equals" id="M:Castle.ActiveRecord.AbstractValidationAttribute.Equals(System.Object)" access="Public" contract="Override" returnType="System.Boolean" valueType="true" declaringType="System.Attribute"><documentation><summary></summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Castle.ActiveRecord.AbstractValidationAttribute.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="GetType" id="M:Castle.ActiveRecord.AbstractValidationAttribute.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Castle.ActiveRecord.AbstractValidationAttribute.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method></class>
      
    <class name="ValidateConfirmationAttribute" 
		id="T:Castle.ActiveRecord.ValidateConfirmationAttribute" 
		access="Public
		 
		baseType="AbstractValidationAttribute">
		
		<attribute name="System.SerializableAttribute" />
		
		<base name="AbstractValidationAttribute" 
			id="T:Castle.ActiveRecord.AbstractValidationAttribute" 
			type="Castle.ActiveRecord.AbstractValidationAttribute">
		
			<base name="Attribute" 
				id="T:System.Attribute" 
				type="System.Attribute" />
		</base>
		
		<constructor 
			name=".ctor" 
			id="M:Castle.ActiveRecord.ValidateConfirmationAttribute.#ctor(System.String)"
			access="Public" 
			contract="Normal" 
			overload="1">
		 <parameter name="confirmationFieldOrProperty" type="System.String" valueType="false" />
		</constructor>
		
		<constructor 
			name=".ctor" 
			id="M:Castle.ActiveRecord.ValidateConfirmationAttribute.#ctor(System.String,System.String)" 
			access="Public" 
			contract="Normal" 
			overload="2">
			
			<parameter name="confirmationFieldOrProperty" type="System.String" valueType="false" />
			<parameter name="errorMessage" type="System.String" valueType="false" />
			
		</constructor>
		
		
			<property name="Validator" 
				id="P:Castle.ActiveRecord.ValidateConfirmationAttribute.Validator" 
				access="Public" 
				contract="Normal" 
				type="Castle.ActiveRecord.Framework.IValidator" 
				valueType="false" 
				declaringType="Castle.ActiveRecord.AbstractValidationAttribute" 
				get="true" 
				set="false">
				<documentation>
				<summary></summary>
				</documentation>
				</property>
				<property name="TypeId" id="P:Castle.ActiveRecord.ValidateConfirmationAttribute.TypeId" 
					access="Public" 
					contract="Virtual" 
					type="System.Object" 
					valueType="false" 
					declaringType="System.Attribute" 
					get="true" 
					set="false">
				<documentation><summary>
        <para> When implemented in a derived class, gets 
        a unique identifier for this <see langword="Attribute" />.
        </para>
      </summary>
      </documentation>
      </property>
      <method name="IsDefaultAttribute" id="M:Castle.ActiveRecord.ValidateConfirmationAttribute.IsDefaultAttribute" 
      access="Public" 
      contract="Virtual" 
      returnType="System.Boolean" 
      valueType="true" 
      declaringType="System.Attribute">
      <documentation>
      <summary>
        <para> When overridden in a derived class, returns an 
        indication whether the value of 
        this instance is the default value for the derived class. 
        </para>
      </summary>
      </documentation>
      </method><method name="Match" id="M:Castle.ActiveRecord.ValidateConfirmationAttribute.Match(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Attribute"><documentation><summary>
        <para> When overridden in a derived class, returns a value indicating whether this instance equals a specified object. </para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="Finalize" id="M:Castle.ActiveRecord.ValidateConfirmationAttribute.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Castle.ActiveRecord.ValidateConfirmationAttribute.GetHashCode" access="Public" contract="Override" returnType="System.Int32" valueType="true" declaringType="System.Attribute"><documentation><summary>
        <para>Returns the hash code for this instance.</para>
      </summary></documentation></method>
	  
	  
	  <method name="Equals" id="M:Castle.ActiveRecord.ValidateConfirmationAttribute.Equals(System.Object)" access="Public" contract="Override" returnType="System.Boolean" valueType="true" declaringType="System.Attribute"><documentation><summary></summary></documentation>
	  
	  <parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Castle.ActiveRecord.ValidateConfirmationAttribute.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="GetType" id="M:Castle.ActiveRecord.ValidateConfirmationAttribute.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Castle.ActiveRecord.ValidateConfirmationAttribute.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method>
      
      </class>
      
      
      
      
      
      
      <class name="WithAccessAttribute" id="T:Castle.ActiveRecord.WithAccessAttribute" access="Public" baseType="Attribute">
		<attribute name="System.SerializableAttribute" />
		<base name="Attribute" id="T:System.Attribute" type="System.Attribute" />
		<derivedBy id="T:Castle.ActiveRecord.AnyAttribute" />
		<derivedBy id="T:Castle.ActiveRecord.BaseAttribute" />
		<derivedBy id="T:Castle.ActiveRecord.BelongsToAttribute" />
		<derivedBy id="T:Castle.ActiveRecord.CompositeKeyAttribute" />
		<derivedBy id="T:Castle.ActiveRecord.FieldAttribute" />
		<derivedBy id="T:Castle.ActiveRecord.OneToOneAttribute" />
		<derivedBy id="T:Castle.ActiveRecord.PrimaryKeyAttribute" />
        <derivedBy id="T:Castle.ActiveRecord.PropertyAttribute" />
        <derivedBy id="T:Castle.ActiveRecord.TimestampAttribute" />
        <derivedBy id="T:Castle.ActiveRecord.VersionAttribute" />
		<constructor name=".ctor" id="M:Castle.ActiveRecord.WithAccessAttribute.#ctor" access="Public" contract="Normal">
		<documentation><summary>Initializes a new instance of the <see cref="T:Castle.ActiveRecord.WithAccessAttribute" /> 
		class.
		</summary></documentation>
		</constructor>
		<property name="Access" id="P:Castle.ActiveRecord.WithAccessAttribute.Access" access="Public" contract="Normal" type="Castle.ActiveRecord.PropertyAccess" valueType="true" get="true" set="true" />
		<property name="CustomAccess" id="P:Castle.ActiveRecord.WithAccessAttribute.CustomAccess" access="Public" contract="Normal" type="System.String" valueType="false" get="true" set="true" />
		<property name="AccessString" id="P:Castle.ActiveRecord.WithAccessAttribute.AccessString" access="Public" contract="Normal" type="System.String" valueType="false" get="true" set="false" />
		<property name="TypeId" id="P:Castle.ActiveRecord.WithAccessAttribute.TypeId" access="Public" contract="Virtual" type="System.Object" valueType="false" declaringType="System.Attribute" get="true" set="false">
		<documentation>
		<summary>
        <para> When implemented in a derived class, gets a unique identifier for this <see langword="Attribute" />.
        </para>
        </summary>
        </documentation>
        </property>
        <method name="IsDefaultAttribute" id="M:Castle.ActiveRecord.WithAccessAttribute.IsDefaultAttribute" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Attribute">
        <documentation><summary>
        <para> When overridden in a derived class, returns an indication whether the value of this instance is the default value for the derived class. </para>
      </summary></documentation></method><method name="Match" id="M:Castle.ActiveRecord.WithAccessAttribute.Match(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Attribute"><documentation><summary>
        <para> When overridden in a derived class, returns a value indicating whether this instance equals a specified object. </para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="Finalize" id="M:Castle.ActiveRecord.WithAccessAttribute.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Castle.ActiveRecord.WithAccessAttribute.GetHashCode" access="Public" contract="Override" returnType="System.Int32" valueType="true" declaringType="System.Attribute"><documentation><summary>
        <para>Returns the hash code for this instance.</para>
      </summary></documentation></method><method name="Equals" id="M:Castle.ActiveRecord.WithAccessAttribute.Equals(System.Object)" access="Public" contract="Override" returnType="System.Boolean" valueType="true" declaringType="System.Attribute"><documentation><summary></summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Castle.ActiveRecord.WithAccessAttribute.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="GetType" id="M:Castle.ActiveRecord.WithAccessAttribute.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Castle.ActiveRecord.WithAccessAttribute.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method>
    </class>
      
    <class name="BaseAttribute" 
		id="T:Castle.ActiveRecord.BaseAttribute" 
		access="Public" 
		abstract="true" 
		baseType="WithAccessAttribute">
		<documentation><summary> Implement common properties shared by some attributes </summary></documentation><attribute name="System.SerializableAttribute" /><base name="WithAccessAttribute" id="T:Castle.ActiveRecord.WithAccessAttribute" type="Castle.ActiveRecord.WithAccessAttribute"><base name="Attribute" id="T:System.Attribute" type="System.Attribute" /></base><derivedBy id="T:Castle.ActiveRecord.ActiveRecordAttribute" /><derivedBy id="T:Castle.ActiveRecord.RelationAttribute" /><constructor name=".ctor" id="M:Castle.ActiveRecord.BaseAttribute.#ctor" access="Family" contract="Normal"><documentation><summary>Initializes a new instance of the <see cref="T:Castle.ActiveRecord.BaseAttribute" /> class.</summary></documentation></constructor><property name="Cache" id="P:Castle.ActiveRecord.BaseAttribute.Cache" access="Public" contract="Normal" type="Castle.ActiveRecord.CacheEnum" valueType="true" get="true" set="true" /><property name="Access" id="P:Castle.ActiveRecord.BaseAttribute.Access" access="Public" contract="Normal" type="Castle.ActiveRecord.PropertyAccess" valueType="true" declaringType="Castle.ActiveRecord.WithAccessAttribute" get="true" set="true"><documentation><summary></summary></documentation></property><property name="CustomAccess" id="P:Castle.ActiveRecord.BaseAttribute.CustomAccess" access="Public" contract="Normal" type="System.String" valueType="false" declaringType="Castle.ActiveRecord.WithAccessAttribute" get="true" set="true"><documentation><summary></summary></documentation></property><property name="AccessString" id="P:Castle.ActiveRecord.BaseAttribute.AccessString" access="Public" contract="Normal" type="System.String" valueType="false" declaringType="Castle.ActiveRecord.WithAccessAttribute" get="true" set="false"><documentation><summary></summary></documentation></property><property name="TypeId" id="P:Castle.ActiveRecord.BaseAttribute.TypeId" access="Public" contract="Virtual" type="System.Object" valueType="false" declaringType="System.Attribute" get="true" set="false"><documentation><summary>
        <para> When implemented in a derived class, gets a unique identifier for this <see langword="Attribute" />.</para>
      </summary></documentation></property><method name="IsDefaultAttribute" id="M:Castle.ActiveRecord.BaseAttribute.IsDefaultAttribute" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Attribute"><documentation><summary>
        <para> When overridden in a derived class, returns an indication whether the value of this instance is the default value for the derived class. </para>
      </summary></documentation></method><method name="Match" id="M:Castle.ActiveRecord.BaseAttribute.Match(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Attribute"><documentation><summary>
        <para> When overridden in a derived class, returns a value indicating whether this instance equals a specified object. </para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="Finalize" id="M:Castle.ActiveRecord.BaseAttribute.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Castle.ActiveRecord.BaseAttribute.GetHashCode" access="Public" contract="Override" returnType="System.Int32" valueType="true" declaringType="System.Attribute"><documentation><summary>
        <para>Returns the hash code for this instance.</para>
      </summary></documentation></method><method name="Equals" id="M:Castle.ActiveRecord.BaseAttribute.Equals(System.Object)" access="Public" contract="Override" returnType="System.Boolean" valueType="true" declaringType="System.Attribute"><documentation><summary></summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Castle.ActiveRecord.BaseAttribute.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="GetType" id="M:Castle.ActiveRecord.BaseAttribute.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Castle.ActiveRecord.BaseAttribute.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method>
      
      </class>
      
      
      <class 
		name="ActiveRecordAttribute" 
		id="T:Castle.ActiveRecord.ActiveRecordAttribute" 
		access="Public" 
		baseType="BaseAttribute">
		
		<documentation>
		<summary> Associate meta information related to the desired table mapping. </summary>
            <example>
            <code>[ActiveRecord("tb_Order")]
public class Order : ActiveRecordBase
{
}
</code>
            </example>
            <remarks> If no table is specified, the class name is used as table name </remarks>
            
        </documentation>
            
            <base 
				name="BaseAttribute" 
				id="T:Castle.ActiveRecord.BaseAttribute" 
				type="Castle.ActiveRecord.BaseAttribute">
				<base name="WithAccessAttribute" 
					id="T:Castle.ActiveRecord.WithAccessAttribute" 
					type="Castle.ActiveRecord.WithAccessAttribute">
					<base name="Attribute" id="T:System.Attribute" type="System.Attribute" />
				</base>
			</base>
			<constructor name=".ctor" id="M:Castle.ActiveRecord.ActiveRecordAttribute.#ctor" 
				access="Public" 
				contract="Normal" 
				overload="1">
			<documentation>
			<summary> Uses the class name as table name </summary></documentation>
			</constructor>
			<constructor 
				name=".ctor" 
				id="M:Castle.ActiveRecord.ActiveRecordAttribute.#ctor(System.String)" 
				access="Public" 
				contract="Normal"
				overload="2">
				<documentation>
				<summary> Associates the specified table with the target type </summary>
				<param name="table"></param>
				</documentation>
				<parameter name="table" type="System.String" valueType="false" />
			</constructor>
			
			<constructor 
				name=".ctor" 
				id="M:Castle.ActiveRecord.ActiveRecordAttribute.#ctor(System.String,System.String)" 
				access="Public" 
				contract="Normal" 
				overload="3">
			<documentation>
			<summary> 
			Associates the specified table and schema with the target type 
			</summary>
			</documentation>
				<parameter name="table" type="System.String" valueType="false" />
				<parameter name="schema" type="System.String" valueType="false" />
			</constructor>
			
			<property 
				name="Table" 
				id="P:Castle.ActiveRecord.ActiveRecordAttribute.Table" 
				access="Public" 
				contract="Normal" 
				type="System.String" 
				valueType="false" 
				get="true" 
				set="true">
				
				<documentation>
				<summary> Gets or sets the table name associated with the type </summary>
				</documentation>
			</property>
			
			<property name="Schema" id="P:Castle.ActiveRecord.ActiveRecordAttribute.Schema" access="Public" contract="Normal" type="System.String" valueType="false" get="true" set="true"><documentation><summary> Gets or sets the schema name associated with the type </summary></documentation></property>
			
			<property name="Proxy" id="P:Castle.ActiveRecord.ActiveRecordAttribute.Proxy" access="Public" contract="Normal" type="System.Type" valueType="false" get="true" set="true"><documentation><summary> Associates a proxy type with the target type </summary></documentation></property>
			
			<property name="DiscriminatorColumn" id="P:Castle.ActiveRecord.ActiveRecordAttribute.DiscriminatorColumn" access="Public" contract="Normal" type="System.String" valueType="false" get="true" set="true"><documentation><summary> Gets or sets the Discriminator column for a table inheritance modeling </summary></documentation></property>
			
			<property name="DiscriminatorType" id="P:Castle.ActiveRecord.ActiveRecordAttribute.DiscriminatorType" access="Public" contract="Normal" type="System.String" valueType="false" get="true" set="true"><documentation><summary> Gets or sets the column type (like string or integer) for the discriminator column </summary></documentation></property>
			
			<property name="DiscriminatorValue" id="P:Castle.ActiveRecord.ActiveRecordAttribute.DiscriminatorValue" access="Public" contract="Normal" type="System.String" valueType="false" get="true" set="true"><documentation><summary> Gets or sets the value that represents the target class on the discriminator column </summary></documentation></property>
			
			<property name="Where" id="P:Castle.ActiveRecord.ActiveRecordAttribute.Where" access="Public" contract="Normal" type="System.String" valueType="false" get="true" set="true"><documentation><summary> SQL condition to retrieve objects </summary></documentation></property>
			
			<property name="Lazy" id="P:Castle.ActiveRecord.ActiveRecordAttribute.Lazy" access="Public" contract="Normal" type="System.Boolean" valueType="true" get="true" set="true"><documentation><summary> Enable lazy loading for the type </summary></documentation></property>
			
			<property name="DynamicUpdate" id="P:Castle.ActiveRecord.ActiveRecordAttribute.DynamicUpdate" access="Public" contract="Normal" type="System.Boolean" valueType="true" get="true" set="true"><documentation><summary> From NHibernate documentation: Specifies that UPDATE SQL should be generated at runtime and contain only those columns whose values have changed. </summary></documentation></property>
			
			<property name="DynamicInsert" id="P:Castle.ActiveRecord.ActiveRecordAttribute.DynamicInsert" access="Public" contract="Normal" type="System.Boolean" valueType="true" get="true" set="true"><documentation><summary> From NHibernate documentation: Specifies that INSERT SQL should be generated at runtime and contain only the columns whose values are not null. </summary></documentation></property>
			
			<property name="Persister" id="P:Castle.ActiveRecord.ActiveRecordAttribute.Persister" access="Public" contract="Normal" type="System.Type" valueType="false" get="true" set="true"><documentation><summary> From NHibernate documentation: Specifies a custom <see cref="T:NHibernate.Persister.IClassPersister" />. </summary></documentation></property>
			
			<property name="SelectBeforeUpdate" id="P:Castle.ActiveRecord.ActiveRecordAttribute.SelectBeforeUpdate" access="Public" contract="Normal" type="System.Boolean" valueType="true" get="true" set="true"><documentation><summary> From NHibernate documentation: Specifies that NHibernate should never perform an SQL UPDATE unless it is certain that an object is actually modified. In certain cases (actually, only when a transient object has been associated with a new session using update()), this means that NHibernate will perform an extra SQL SELECT to determine if an UPDATE is actually required. </summary></documentation></property>
			
			<property name="Polymorphism" id="P:Castle.ActiveRecord.ActiveRecordAttribute.Polymorphism" access="Public" contract="Normal" type="Castle.ActiveRecord.Polymorphism" valueType="true" get="true" set="true"><documentation><summary> From NHibernate documentation: Determines whether implicit or explicit query polymorphism is used. </summary></documentation></property>
			
			<property name="Mutable" id="P:Castle.ActiveRecord.ActiveRecordAttribute.Mutable" access="Public" contract="Normal" type="System.Boolean" valueType="true" get="true" set="true"><documentation><summary> From NHibernate documentation: Specifies that instances of the class are (not) mutable. </summary></documentation></property>
			
			<property name="BatchSize" id="P:Castle.ActiveRecord.ActiveRecordAttribute.BatchSize" access="Public" contract="Normal" type="System.Int32" valueType="true" get="true" set="true"><documentation><summary> From NHibernate documentation: Specify a "batch size" for fetching instances of this class by identifier. </summary></documentation></property>
			
			<property 
				name="Locking" 
				id="P:Castle.ActiveRecord.ActiveRecordAttribute.Locking" 
				access="Public" 
				contract="Normal" 
				type="Castle.ActiveRecord.OptimisticLocking" 
				valueType="true" 
				get="true" 
				set="true">
				
				<documentation>
				<summary> 
				From NHibernate documentation: Determines the optimistic locking strategy. 
				</summary></documentation>
			</property>
			
			<property name="UseAutoImport" id="P:Castle.ActiveRecord.ActiveRecordAttribute.UseAutoImport" access="Public" contract="Normal" type="System.Boolean" valueType="true" get="true" set="true"><documentation><summary> From NHibernate documentation: The auto-import attribute lets us use unqualified class names in the query language, by default. The assembly and namespace attributes specify the assembly where persistent classes are located and the namespace they are declared in. </summary></documentation></property>
			
			<property name="Cache" id="P:Castle.ActiveRecord.ActiveRecordAttribute.Cache" access="Public" contract="Normal" type="Castle.ActiveRecord.CacheEnum" valueType="true" 
			declaringType="Castle.ActiveRecord.BaseAttribute" get="true" set="true"><documentation><summary></summary></documentation></property>
			
			<property name="Access" id="P:Castle.ActiveRecord.ActiveRecordAttribute.Access" access="Public" contract="Normal" type="Castle.ActiveRecord.PropertyAccess" valueType="true" declaringType="Castle.ActiveRecord.WithAccessAttribute" get="true" set="true"><documentation><summary></summary></documentation></property>
			
			<property name="CustomAccess" id="P:Castle.ActiveRecord.ActiveRecordAttribute.CustomAccess" access="Public" contract="Normal" type="System.String" valueType="false" declaringType="Castle.ActiveRecord.WithAccessAttribute" get="true" set="true"><documentation><summary></summary></documentation></property>
			
			<property name="AccessString" id="P:Castle.ActiveRecord.ActiveRecordAttribute.AccessString" access="Public" contract="Normal" type="System.String" valueType="false" declaringType="Castle.ActiveRecord.WithAccessAttribute" get="true" set="false"><documentation><summary></summary></documentation></property>
			
			<property name="TypeId" id="P:Castle.ActiveRecord.ActiveRecordAttribute.TypeId" access="Public" contract="Virtual" type="System.Object" valueType="false" declaringType="System.Attribute" get="true" set="false">
			<documentation><summary>
				<para> When implemented in a derived class, gets a unique identifier for this <see langword="Attribute" />.
				</para>
      </summary></documentation></property>
      
      
      <method name="IsDefaultAttribute" id="M:Castle.ActiveRecord.ActiveRecordAttribute.IsDefaultAttribute" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Attribute"><documentation><summary>
        <para> When overridden in a derived class, returns an indication whether the value of this instance is the default value for the derived class. </para>
      </summary></documentation></method><method name="Match" id="M:Castle.ActiveRecord.ActiveRecordAttribute.Match(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Attribute"><documentation><summary>
        <para> When overridden in a derived class, returns a value indicating whether this instance equals a specified object. </para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="Finalize" id="M:Castle.ActiveRecord.ActiveRecordAttribute.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Castle.ActiveRecord.ActiveRecordAttribute.GetHashCode" access="Public" contract="Override" returnType="System.Int32" valueType="true" declaringType="System.Attribute"><documentation><summary>
        <para>Returns the hash code for this instance.</para>
      </summary></documentation></method><method name="Equals" id="M:Castle.ActiveRecord.ActiveRecordAttribute.Equals(System.Object)" access="Public" contract="Override" returnType="System.Boolean" valueType="true" declaringType="System.Attribute"><documentation><summary></summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Castle.ActiveRecord.ActiveRecordAttribute.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="GetType" id="M:Castle.ActiveRecord.ActiveRecordAttribute.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Castle.ActiveRecord.ActiveRecordAttribute.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method></class>
      
   
   
   
   
   
   
   
   
   
   
   
   
   

      
      <interface name="IActiveRecordQuery" id="T:Castle.ActiveRecord.IActiveRecordQuery" access="Public"><documentation><summary> Represents an ActiveRecord Query. </summary></documentation><implementedBy id="T:Castle.ActiveRecord.ActiveRecordBaseQuery" /><implementedBy id="T:Castle.ActiveRecord.Queries.CountQuery" /><implementedBy id="T:Castle.ActiveRecord.Queries.HqlBasedQuery" /><implementedBy id="T:Castle.ActiveRecord.Queries.ScalarQuery" /><implementedBy id="T:Castle.ActiveRecord.Queries.SimpleQuery" /><property name="Target" id="P:Castle.ActiveRecord.IActiveRecordQuery.Target" access="Public" contract="Abstract" type="System.Type" valueType="false" get="true" set="false" /><method name="Enumerate" id="M:Castle.ActiveRecord.IActiveRecordQuery.Enumerate(NHibernate.ISession)" access="Public" contract="Abstract" returnType="System.Collections.IEnumerable" valueType="false"><parameter name="session" type="NHibernate.ISession" valueType="false" /></method><method name="Execute" id="M:Castle.ActiveRecord.IActiveRecordQuery.Execute(NHibernate.ISession)" access="Public" contract="Abstract" returnType="System.Object" valueType="false"><parameter name="session" type="NHibernate.ISession" valueType="false" /></method></interface><interface name="ISessionScope" id="T:Castle.ActiveRecord.ISessionScope" access="Public"><documentation><summary> Contract for implementation of scopes. </summary>
            <remarks> A scope can implement a logic that affects AR for the scope lifetime. Session cache and transaction are the best examples, but you can create new scopes adding new semantics. <para> The methods on this interface are mostly invoked by the <see cref="T:Castle.ActiveRecord.Framework.ISessionFactoryHolder" /> implementation </para>
            </remarks></documentation><implements type="System.IDisposable" /><implementedBy id="T:Castle.ActiveRecord.Framework.Scopes.AbstractScope" /><implementedBy id="T:Castle.ActiveRecord.Framework.Scopes.DifferentDatabaseScope" /><implementedBy id="T:Castle.ActiveRecord.SessionScope" /><implementedBy id="T:Castle.ActiveRecord.TransactionScope" /><property name="FlushAction" id="P:Castle.ActiveRecord.ISessionScope.FlushAction" access="Public" contract="Abstract" type="Castle.ActiveRecord.FlushAction" valueType="true" get="true" set="false"><documentation><summary> Returns the <see cref="P:Castle.ActiveRecord.ISessionScope.FlushAction" nolink="true" /> defined for this scope </summary></documentation></property><property name="ScopeType" id="P:Castle.ActiveRecord.ISessionScope.ScopeType" access="Public" contract="Abstract" type="Castle.ActiveRecord.SessionScopeType" valueType="true" get="true" set="false"><documentation><summary> Returns the <see cref="T:Castle.ActiveRecord.SessionScopeType" /> defined for this scope </summary></documentation></property><property name="WantsToCreateTheSession" id="P:Castle.ActiveRecord.ISessionScope.WantsToCreateTheSession" access="Public" contract="Abstract" type="System.Boolean" valueType="true" get="true" set="false"><documentation><summary> Implementors should return true if they want that their scope implementation be in charge of creating the session </summary></documentation></property><method name="OpenSession" id="M:Castle.ActiveRecord.ISessionScope.OpenSession(NHibernate.ISessionFactory,NHibernate.IInterceptor)" access="Public" contract="Abstract" returnType="NHibernate.ISession" valueType="false"><documentation><summary> If the <see cref="P:Castle.ActiveRecord.ISessionScope.WantsToCreateTheSession" /> returned <c>true</c> then this method is invoked to allow the scope to create a properly configured session </summary>
            <param name="sessionFactory">From where to open the session</param>
            <param name="interceptor">the NHibernate interceptor</param>
            <returns>the newly created session</returns></documentation><parameter name="sessionFactory" type="NHibernate.ISessionFactory" valueType="false" /><parameter name="interceptor" type="NHibernate.IInterceptor" valueType="false" /></method><method name="GetSession" id="M:Castle.ActiveRecord.ISessionScope.GetSession(System.Object)" access="Public" contract="Abstract" returnType="NHibernate.ISession" valueType="false"><documentation><summary> This method should return the session instance associated with the key. </summary>
            <param name="key">an object instance</param>
            <returns>the session instance or null if none was found</returns></documentation><parameter name="key" type="System.Object" valueType="false" /></method><method name="IsKeyKnown" id="M:Castle.ActiveRecord.ISessionScope.IsKeyKnown(System.Object)" access="Public" contract="Abstract" returnType="System.Boolean" valueType="true"><documentation><summary> This method is invoked when the <see cref="T:Castle.ActiveRecord.Framework.ISessionFactoryHolder" /> instance needs a session instance. Instead of creating one it interrogates the active scope for one. The scope implementation must check if it has a session registered for the given key. <seealso cref="M:Castle.ActiveRecord.ISessionScope.RegisterSession(System.Object,NHibernate.ISession)" />
            </summary>
            <param name="key">an object instance</param>
            <returns><c>true</c> if the key exists within this scope instance</returns></documentation><parameter name="key" type="System.Object" valueType="false" /></method><method name="RegisterSession" id="M:Castle.ActiveRecord.ISessionScope.RegisterSession(System.Object,NHibernate.ISession)" access="Public" contract="Abstract" returnType="System.Void" valueType="true"><documentation><summary> This method is invoked when no session was available at and the <see cref="T:Castle.ActiveRecord.Framework.ISessionFactoryHolder" /> just created one. So it registers the session created within this scope using a key. The scope implementation shouldn't make any assumption on what the key actually is as we reserve the right to change it <seealso cref="M:Castle.ActiveRecord.ISessionScope.IsKeyKnown(System.Object)" />
            </summary>
            <param name="key">an object instance</param>
            <param name="session">An instance of <c>ISession</c></param></documentation><parameter name="key" type="System.Object" valueType="false" /><parameter name="session" type="NHibernate.ISession" valueType="false" /></method><method name="Flush" id="M:Castle.ActiveRecord.ISessionScope.Flush" access="Public" contract="Abstract" returnType="System.Void" valueType="true"><documentation><summary> Flushes the sessions that this scope is maintaining </summary></documentation></method></interface><delegate name="NHibernateDelegate" id="T:Castle.ActiveRecord.NHibernateDelegate" access="Public" returnType="System.Object" valueType="false"><documentation><summary> Allow custom executions using the NHibernate's ISession. </summary></documentation><attribute name="System.SerializableAttribute" /><parameter name="session" type="NHibernate.ISession" valueType="false" /><parameter name="instance" type="System.Object" valueType="false" /></delegate><delegate name="SessionFactoryHolderDelegate" id="T:Castle.ActiveRecord.SessionFactoryHolderDelegate" access="Public" returnType="System.Void" valueType="true"><attribute name="System.SerializableAttribute" /><parameter name="holder" type="Castle.ActiveRecord.Framework.ISessionFactoryHolder" valueType="false" />
       </delegate>
            
       <enumeration 
				name="CascadeEnum" 
				id="T:Castle.ActiveRecord.CascadeEnum" 
				access="Public"><documentation><summary> 
            Defines the cascading behaviour of this association. 
            </summary>
            </documentation>
            <attribute name="System.SerializableAttribute" />

				<field 
					name="None" 
					id="F:Castle.ActiveRecord.CascadeEnum.None" 
					access="Public" 
					contract="Static" 
					type="Castle.ActiveRecord.CascadeEnum" 
					valueType="true" 
					literal="true" 
					value="0">
					<documentation><summary> 
					No cascading. This is the default. 
					</summary></documentation>
				</field>
				
				<field 
					name="All" 
					id="F:Castle.ActiveRecord.CascadeEnum.All" 
					access="Public" 
					contract="Static" 
					type="Castle.ActiveRecord.CascadeEnum" 
					valueType="true" 
					literal="true" 
					value="1">
					<documentation><summary> Cascade save, update and delete. </summary></documentation>
				</field>
				
				<field 
					name="SaveUpdate" 
					id="F:Castle.ActiveRecord.CascadeEnum.SaveUpdate" 
					access="Public" 
					contract="Static" 
					type="Castle.ActiveRecord.CascadeEnum" 
					valueType="true" 
					literal="true" 
					value="2">
					<documentation><summary> Cascade save and update. </summary></documentation>
				</field>
				
				<field 
					name="Delete" 
					id="F:Castle.ActiveRecord.CascadeEnum.Delete" 
					access="Public" 
					contract="Static" 
					type="Castle.ActiveRecord.CascadeEnum" 
					valueType="true" 
					literal="true" 
					value="3">
					<documentation><summary> Cascade delete. </summary></documentation>
				</field>
				</enumeration>
				
				<enumeration 
					name="CollectionIDType" 
					id="T:Castle.ActiveRecord.CollectionIDType" 
					access="Public">
				<attribute name="System.SerializableAttribute" />
				<field 
					name="Identity" 
					id="F:Castle.ActiveRecord.CollectionIDType.Identity" 
					access="Public" 
					contract="Static" 
					type="Castle.ActiveRecord.CollectionIDType" 
					valueType="true" 
					literal="true" 
					value="0" />
					<field name="Sequence" 
					id="F:Castle.ActiveRecord.CollectionIDType.Sequence" 
					access="Public" 
					contract="Static" 
					type="Castle.ActiveRecord.CollectionIDType" 
					valueType="true" 
					literal="true" 
					value="1" /><field name="HiLo" id="F:Castle.ActiveRecord.CollectionIDType.HiLo" access="Public" contract="Static" type="Castle.ActiveRecord.CollectionIDType" valueType="true" literal="true" value="2" /><field name="SeqHiLo" id="F:Castle.ActiveRecord.CollectionIDType.SeqHiLo" access="Public" contract="Static" type="Castle.ActiveRecord.CollectionIDType" valueType="true" literal="true" value="3" /><field name="UuidHex" id="F:Castle.ActiveRecord.CollectionIDType.UuidHex" access="Public" contract="Static" type="Castle.ActiveRecord.CollectionIDType" valueType="true" literal="true" value="4" /><field name="UuidString" id="F:Castle.ActiveRecord.CollectionIDType.UuidString" access="Public" contract="Static" type="Castle.ActiveRecord.CollectionIDType" valueType="true" literal="true" value="5" /><field name="Guid" id="F:Castle.ActiveRecord.CollectionIDType.Guid" access="Public" contract="Static" type="Castle.ActiveRecord.CollectionIDType" valueType="true" literal="true" value="6" /><field name="GuidComb" id="F:Castle.ActiveRecord.CollectionIDType.GuidComb" access="Public" contract="Static" type="Castle.ActiveRecord.CollectionIDType" valueType="true" literal="true" value="7" /><field name="Assigned" id="F:Castle.ActiveRecord.CollectionIDType.Assigned" access="Public" contract="Static" type="Castle.ActiveRecord.CollectionIDType" valueType="true" literal="true" value="8" /><field name="Foreign" id="F:Castle.ActiveRecord.CollectionIDType.Foreign" access="Public" contract="Static" type="Castle.ActiveRecord.CollectionIDType" valueType="true" literal="true" value="9" /></enumeration>
					
			<enumeration 
				name="OptimisticLocking" 
				id="T:Castle.ActiveRecord.OptimisticLocking" 
				access="Public">
				
				<attribute name="System.SerializableAttribute" />
				
				<field name="None" id="F:Castle.ActiveRecord.OptimisticLocking.None" access="Public" contract="Static" type="Castle.ActiveRecord.OptimisticLocking" valueType="true" literal="true" value="0">
				
				<documentation><summary> do not use optimistic locking </summary></documentation>
				
				</field>
				
				<field name="Version" id="F:Castle.ActiveRecord.OptimisticLocking.Version" access="Public" contract="Static" type="Castle.ActiveRecord.OptimisticLocking" valueType="true" literal="true" value="1">
				
				<documentation><summary> check the version/timestamp columns </summary></documentation>
				
				</field>
				
				<field name="Dirty" id="F:Castle.ActiveRecord.OptimisticLocking.Dirty" access="Public" contract="Static" type="Castle.ActiveRecord.OptimisticLocking" valueType="true" literal="true" value="2">
				
				<documentation><summary> check the changed columns </summary>
				
				</documentation>
				
				</field>
				
				<field name="All" id="F:Castle.ActiveRecord.OptimisticLocking.All" access="Public" contract="Static" type="Castle.ActiveRecord.OptimisticLocking" valueType="true" literal="true" value="3">
				
				<documentation><summary> check all columns </summary></documentation>
				
				</field>
				
			</enumeration>
				
				<enumeration name="Polymorphism" id="T:Castle.ActiveRecord.Polymorphism" access="Public"><attribute name="System.SerializableAttribute" /><field name="Implicit" id="F:Castle.ActiveRecord.Polymorphism.Implicit" access="Public" contract="Static" type="Castle.ActiveRecord.Polymorphism" valueType="true" literal="true" value="0" /><field name="Explicit" id="F:Castle.ActiveRecord.Polymorphism.Explicit" access="Public" contract="Static" type="Castle.ActiveRecord.Polymorphism" valueType="true" literal="true" value="1" /></enumeration><enumeration name="CacheEnum" id="T:Castle.ActiveRecord.CacheEnum" access="Public"><attribute name="System.SerializableAttribute" /><field name="Undefined" id="F:Castle.ActiveRecord.CacheEnum.Undefined" access="Public" contract="Static" type="Castle.ActiveRecord.CacheEnum" valueType="true" literal="true" value="0" /><field name="ReadOnly" id="F:Castle.ActiveRecord.CacheEnum.ReadOnly" access="Public" contract="Static" type="Castle.ActiveRecord.CacheEnum" valueType="true" literal="true" value="1" /><field name="ReadWrite" id="F:Castle.ActiveRecord.CacheEnum.ReadWrite" access="Public" contract="Static" type="Castle.ActiveRecord.CacheEnum" valueType="true" literal="true" value="2" /><field name="NonStrictReadWrite" id="F:Castle.ActiveRecord.CacheEnum.NonStrictReadWrite" access="Public" contract="Static" type="Castle.ActiveRecord.CacheEnum" valueType="true" literal="true" value="3" /></enumeration><enumeration name="OuterJoinEnum" id="T:Castle.ActiveRecord.OuterJoinEnum" access="Public"><attribute name="System.SerializableAttribute" /><field name="Auto" id="F:Castle.ActiveRecord.OuterJoinEnum.Auto" access="Public" contract="Static" type="Castle.ActiveRecord.OuterJoinEnum" valueType="true" literal="true" value="0" /><field name="True" id="F:Castle.ActiveRecord.OuterJoinEnum.True" access="Public" contract="Static" type="Castle.ActiveRecord.OuterJoinEnum" valueType="true" literal="true" value="1" /><field name="False" id="F:Castle.ActiveRecord.OuterJoinEnum.False" access="Public" contract="Static" type="Castle.ActiveRecord.OuterJoinEnum" valueType="true" literal="true" value="2" /></enumeration><enumeration name="ManyRelationCascadeEnum" id="T:Castle.ActiveRecord.ManyRelationCascadeEnum" access="Public"><attribute name="System.SerializableAttribute" /><field name="None" id="F:Castle.ActiveRecord.ManyRelationCascadeEnum.None" access="Public" contract="Static" type="Castle.ActiveRecord.ManyRelationCascadeEnum" valueType="true" literal="true" value="0" /><field name="All" id="F:Castle.ActiveRecord.ManyRelationCascadeEnum.All" access="Public" contract="Static" type="Castle.ActiveRecord.ManyRelationCascadeEnum" valueType="true" literal="true" value="1" /><field name="SaveUpdate" id="F:Castle.ActiveRecord.ManyRelationCascadeEnum.SaveUpdate" access="Public" contract="Static" type="Castle.ActiveRecord.ManyRelationCascadeEnum" valueType="true" literal="true" value="2" /><field name="Delete" id="F:Castle.ActiveRecord.ManyRelationCascadeEnum.Delete" access="Public" contract="Static" type="Castle.ActiveRecord.ManyRelationCascadeEnum" valueType="true" literal="true" value="3" /><field name="AllDeleteOrphan" id="F:Castle.ActiveRecord.ManyRelationCascadeEnum.AllDeleteOrphan" access="Public" contract="Static" type="Castle.ActiveRecord.ManyRelationCascadeEnum" valueType="true" literal="true" value="4" /></enumeration><enumeration name="FetchEnum" id="T:Castle.ActiveRecord.FetchEnum" access="Public"><documentation><summary>
            
            </summary></documentation><attribute name="System.SerializableAttribute" /><field name="Unspecified" id="F:Castle.ActiveRecord.FetchEnum.Unspecified" access="Public" contract="Static" type="Castle.ActiveRecord.FetchEnum" valueType="true" literal="true" value="0" /><field name="Join" id="F:Castle.ActiveRecord.FetchEnum.Join" access="Public" contract="Static" type="Castle.ActiveRecord.FetchEnum" valueType="true" literal="true" value="1" /><field name="Select" id="F:Castle.ActiveRecord.FetchEnum.Select" access="Public" contract="Static" type="Castle.ActiveRecord.FetchEnum" valueType="true" literal="true" value="2" /></enumeration><enumeration name="PrimaryKeyType" id="T:Castle.ActiveRecord.PrimaryKeyType" access="Public"><attribute name="System.SerializableAttribute" /><field name="Identity" id="F:Castle.ActiveRecord.PrimaryKeyType.Identity" access="Public" contract="Static" type="Castle.ActiveRecord.PrimaryKeyType" valueType="true" literal="true" value="0" /><field name="Sequence" id="F:Castle.ActiveRecord.PrimaryKeyType.Sequence" access="Public" contract="Static" type="Castle.ActiveRecord.PrimaryKeyType" valueType="true" literal="true" value="1" /><field name="HiLo" id="F:Castle.ActiveRecord.PrimaryKeyType.HiLo" access="Public" contract="Static" type="Castle.ActiveRecord.PrimaryKeyType" valueType="true" literal="true" value="2" /><field name="SeqHiLo" id="F:Castle.ActiveRecord.PrimaryKeyType.SeqHiLo" access="Public" contract="Static" type="Castle.ActiveRecord.PrimaryKeyType" valueType="true" literal="true" value="3" /><field name="UuidHex" id="F:Castle.ActiveRecord.PrimaryKeyType.UuidHex" access="Public" contract="Static" type="Castle.ActiveRecord.PrimaryKeyType" valueType="true" literal="true" value="4" /><field name="UuidString" id="F:Castle.ActiveRecord.PrimaryKeyType.UuidString" access="Public" contract="Static" type="Castle.ActiveRecord.PrimaryKeyType" valueType="true" literal="true" value="5" /><field name="Guid" id="F:Castle.ActiveRecord.PrimaryKeyType.Guid" access="Public" contract="Static" type="Castle.ActiveRecord.PrimaryKeyType" valueType="true" literal="true" value="6" /><field name="GuidComb" id="F:Castle.ActiveRecord.PrimaryKeyType.GuidComb" access="Public" contract="Static" type="Castle.ActiveRecord.PrimaryKeyType" valueType="true" literal="true" value="7" /><field name="Native" id="F:Castle.ActiveRecord.PrimaryKeyType.Native" access="Public" contract="Static" type="Castle.ActiveRecord.PrimaryKeyType" valueType="true" literal="true" value="8" /><field name="Assigned" id="F:Castle.ActiveRecord.PrimaryKeyType.Assigned" access="Public" contract="Static" type="Castle.ActiveRecord.PrimaryKeyType" valueType="true" literal="true" value="9" /><field name="Foreign" id="F:Castle.ActiveRecord.PrimaryKeyType.Foreign" access="Public" contract="Static" type="Castle.ActiveRecord.PrimaryKeyType" valueType="true" literal="true" value="10" /></enumeration><enumeration name="PropertyAccess" id="T:Castle.ActiveRecord.PropertyAccess" access="Public"><attribute name="System.SerializableAttribute" /><field name="Property" id="F:Castle.ActiveRecord.PropertyAccess.Property" access="Public" contract="Static" type="Castle.ActiveRecord.PropertyAccess" valueType="true" literal="true" value="0" /><field name="Field" id="F:Castle.ActiveRecord.PropertyAccess.Field" access="Public" contract="Static" type="Castle.ActiveRecord.PropertyAccess" valueType="true" literal="true" value="1" /><field name="FieldCamelcase" id="F:Castle.ActiveRecord.PropertyAccess.FieldCamelcase" access="Public" contract="Static" type="Castle.ActiveRecord.PropertyAccess" valueType="true" literal="true" value="2" /><field name="FieldCamelcaseUnderscore" id="F:Castle.ActiveRecord.PropertyAccess.FieldCamelcaseUnderscore" access="Public" contract="Static" type="Castle.ActiveRecord.PropertyAccess" valueType="true" literal="true" value="3" /><field name="FieldPascalcaseMUnderscore" id="F:Castle.ActiveRecord.PropertyAccess.FieldPascalcaseMUnderscore" access="Public" contract="Static" type="Castle.ActiveRecord.PropertyAccess" valueType="true" literal="true" value="4" /><field name="FieldLowercaseUnderscore" id="F:Castle.ActiveRecord.PropertyAccess.FieldLowercaseUnderscore" access="Public" contract="Static" type="Castle.ActiveRecord.PropertyAccess" valueType="true" literal="true" value="5" /><field name="NosetterCamelcase" id="F:Castle.ActiveRecord.PropertyAccess.NosetterCamelcase" access="Public" contract="Static" type="Castle.ActiveRecord.PropertyAccess" valueType="true" literal="true" value="6" /><field name="NosetterCamelcaseUnderscore" id="F:Castle.ActiveRecord.PropertyAccess.NosetterCamelcaseUnderscore" access="Public" contract="Static" type="Castle.ActiveRecord.PropertyAccess" valueType="true" literal="true" value="7" /><field name="NosetterPascalcaseMUndersc" id="F:Castle.ActiveRecord.PropertyAccess.NosetterPascalcaseMUndersc" access="Public" contract="Static" type="Castle.ActiveRecord.PropertyAccess" valueType="true" literal="true" value="8" /><field name="NosetterLowercaseUnderscore" id="F:Castle.ActiveRecord.PropertyAccess.NosetterLowercaseUnderscore" access="Public" contract="Static" type="Castle.ActiveRecord.PropertyAccess" valueType="true" literal="true" value="9" /></enumeration><enumeration name="RelationType" id="T:Castle.ActiveRecord.RelationType" access="Public"><attribute name="System.SerializableAttribute" /><field name="Guess" id="F:Castle.ActiveRecord.RelationType.Guess" access="Public" contract="Static" type="Castle.ActiveRecord.RelationType" valueType="true" literal="true" value="0" /><field name="Bag" id="F:Castle.ActiveRecord.RelationType.Bag" access="Public" contract="Static" type="Castle.ActiveRecord.RelationType" valueType="true" literal="true" value="1" /><field name="Set" id="F:Castle.ActiveRecord.RelationType.Set" access="Public" contract="Static" type="Castle.ActiveRecord.RelationType" valueType="true" literal="true" value="2" /><field name="IdBag" id="F:Castle.ActiveRecord.RelationType.IdBag" access="Public" contract="Static" type="Castle.ActiveRecord.RelationType" valueType="true" literal="true" value="3" /><field name="Map" id="F:Castle.ActiveRecord.RelationType.Map" access="Public" contract="Static" type="Castle.ActiveRecord.RelationType" valueType="true" literal="true" value="4" /><field name="List" id="F:Castle.ActiveRecord.RelationType.List" access="Public" contract="Static" type="Castle.ActiveRecord.RelationType" valueType="true" literal="true" value="5" /></enumeration><enumeration name="FlushAction" id="T:Castle.ActiveRecord.FlushAction" access="Public"><documentation><summary> Pendent </summary></documentation><attribute name="System.SerializableAttribute" /><field name="Auto" id="F:Castle.ActiveRecord.FlushAction.Auto" access="Public" contract="Static" type="Castle.ActiveRecord.FlushAction" valueType="true" literal="true" value="0"><documentation><summary> Original behavior. Changes are persisted at the end or before some queries. </summary></documentation></field><field name="Never" id="F:Castle.ActiveRecord.FlushAction.Never" access="Public" contract="Static" type="Castle.ActiveRecord.FlushAction" valueType="true" literal="true" value="1"><documentation><summary> Flush need to be controlled manually. Best choice for readonly operations </summary></documentation></field></enumeration><enumeration name="SessionScopeType" id="T:Castle.ActiveRecord.SessionScopeType" access="Public"><attribute name="System.SerializableAttribute" /><field name="Undefined" id="F:Castle.ActiveRecord.SessionScopeType.Undefined" access="Public" contract="Static" type="Castle.ActiveRecord.SessionScopeType" valueType="true" literal="true" value="0" /><field name="Simple" id="F:Castle.ActiveRecord.SessionScopeType.Simple" access="Public" contract="Static" type="Castle.ActiveRecord.SessionScopeType" valueType="true" literal="true" value="1" /><field name="Transactional" id="F:Castle.ActiveRecord.SessionScopeType.Transactional" access="Public" contract="Static" type="Castle.ActiveRecord.SessionScopeType" valueType="true" literal="true" value="2" /><field name="Custom" id="F:Castle.ActiveRecord.SessionScopeType.Custom" access="Public" contract="Static" type="Castle.ActiveRecord.SessionScopeType" valueType="true" literal="true" value="3" /></enumeration><enumeration name="TransactionMode" id="T:Castle.ActiveRecord.TransactionMode" access="Public"><documentation><summary> Defines the transaction scope behavior </summary></documentation><attribute name="System.SerializableAttribute" /><field name="Inherits" id="F:Castle.ActiveRecord.TransactionMode.Inherits" access="Public" contract="Static" type="Castle.ActiveRecord.TransactionMode" valueType="true" literal="true" value="0"><documentation><summary> Inherits a transaction previously create on the current context. </summary></documentation></field><field name="New" id="F:Castle.ActiveRecord.TransactionMode.New" access="Public" contract="Static" type="Castle.ActiveRecord.TransactionMode" valueType="true" literal="true" value="1"><documentation><summary> Always create an isolated transaction context. </summary></documentation></field></enumeration></namespace><namespace name="Castle.ActiveRecord.Framework"><class name="ActiveRecordException" id="T:Castle.ActiveRecord.Framework.ActiveRecordException" access="Public" baseType="Exception"><attribute name="System.SerializableAttribute" /><base name="Exception" id="T:System.Exception" type="System.Exception" /><derivedBy id="T:Castle.ActiveRecord.Framework.ActiveRecordInitializationException" /><derivedBy id="T:Castle.ActiveRecord.Framework.TransactionException" /><derivedBy id="T:Castle.ActiveRecord.NotFoundException" /><derivedBy id="T:Castle.ActiveRecord.ValidationException" /><implements type="System.Runtime.Serialization.ISerializable" inherited="true" /><constructor name=".ctor" id="M:Castle.ActiveRecord.Framework.ActiveRecordException.#ctor(System.String)" access="Public" contract="Normal" overload="1"><parameter name="message" type="System.String" valueType="false" /></constructor><constructor name=".ctor" id="M:Castle.ActiveRecord.Framework.ActiveRecordException.#ctor(System.String,System.Exception)" access="Public" contract="Normal" overload="2"><parameter name="message" type="System.String" valueType="false" /><parameter name="innerException" type="System.Exception" valueType="false" /></constructor><constructor name=".ctor" id="M:Castle.ActiveRecord.Framework.ActiveRecordException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" access="Family" contract="Normal" overload="3"><parameter name="info" type="System.Runtime.Serialization.SerializationInfo" valueType="false" /><parameter name="context" type="System.Runtime.Serialization.StreamingContext" valueType="true" /></constructor><property name="Message" id="P:Castle.ActiveRecord.Framework.ActiveRecordException.Message" access="Public" contract="Virtual" type="System.String" valueType="false" declaringType="System.Exception" get="true" set="false"><documentation><summary>
        <para> Gets a message that describes the current exception.</para>
      </summary></documentation></property><property name="InnerException" id="P:Castle.ActiveRecord.Framework.ActiveRecordException.InnerException" access="Public" contract="Normal" type="System.Exception" valueType="false" declaringType="System.Exception" get="true" set="false"><documentation><summary>
        <para> Gets the <see cref="T:System.Exception" /> instance that caused the current exception.</para>
      </summary></documentation></property><property name="TargetSite" id="P:Castle.ActiveRecord.Framework.ActiveRecordException.TargetSite" access="Public" contract="Normal" type="System.Reflection.MethodBase" valueType="false" declaringType="System.Exception" get="true" set="false"><documentation><summary>
        <para> Gets the method that throws the current exception.</para>
      </summary></documentation></property><property name="StackTrace" id="P:Castle.ActiveRecord.Framework.ActiveRecordException.StackTrace" access="Public" contract="Virtual" type="System.String" valueType="false" declaringType="System.Exception" get="true" set="false"><documentation><summary>
        <para> Gets a string representation of the frames on the call stack at the time the current exception was thrown.</para>
      </summary></documentation></property><property name="HelpLink" id="P:Castle.ActiveRecord.Framework.ActiveRecordException.HelpLink" access="Public" contract="Virtual" type="System.String" valueType="false" declaringType="System.Exception" get="true" set="true"><documentation><summary>
        <para>Gets or sets a link to the help file associated with this exception.</para>
      </summary></documentation></property><property name="Source" id="P:Castle.ActiveRecord.Framework.ActiveRecordException.Source" access="Public" contract="Virtual" type="System.String" valueType="false" declaringType="System.Exception" get="true" set="true"><documentation><summary>
        <para> Gets or sets the name of the application or the object that causes the error.</para>
      </summary></documentation></property><property name="HResult" id="P:Castle.ActiveRecord.Framework.ActiveRecordException.HResult" access="Family" contract="Normal" type="System.Int32" valueType="true" declaringType="System.Exception" get="true" set="true"><documentation><summary>
        <para>Gets or sets HRESULT, a coded numerical value that is assigned to a specific exception.</para>
      </summary></documentation></property><method name="GetObjectData" id="M:Castle.ActiveRecord.Framework.ActiveRecordException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" access="Public" contract="Virtual" returnType="System.Void" valueType="true" declaringType="System.Exception"><documentation><summary>
        <para>When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.</para>
      </summary></documentation><parameter name="info" type="System.Runtime.Serialization.SerializationInfo" valueType="false" /><parameter name="context" type="System.Runtime.Serialization.StreamingContext" valueType="true" /><implements name="GetObjectData" id="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" interface="ISerializable" interfaceId="T:System.Runtime.Serialization.ISerializable" declaringType="System.Runtime.Serialization.ISerializable" /></method><method name="GetBaseException" id="M:Castle.ActiveRecord.Framework.ActiveRecordException.GetBaseException" access="Public" contract="Virtual" returnType="System.Exception" valueType="false" declaringType="System.Exception"><documentation><summary>
        <para> When overridden in a derived class, returns the <see cref="T:System.Exception" /> that is the root cause of one or more subsequent exceptions.</para>
      </summary></documentation></method><method name="Finalize" id="M:Castle.ActiveRecord.Framework.ActiveRecordException.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Castle.ActiveRecord.Framework.ActiveRecordException.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Castle.ActiveRecord.Framework.ActiveRecordException.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Castle.ActiveRecord.Framework.ActiveRecordException.ToString" access="Public" contract="Override" returnType="System.String" valueType="false" declaringType="System.Exception"><documentation><summary>
        <para> Creates and returns a string representation of the current exception.</para>
      </summary></documentation></method><method name="GetType" id="M:Castle.ActiveRecord.Framework.ActiveRecordException.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Castle.ActiveRecord.Framework.ActiveRecordException.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method></class><class name="ActiveRecordInitializationException" id="T:Castle.ActiveRecord.Framework.ActiveRecordInitializationException" access="Public" baseType="ActiveRecordException"><documentation><summary> Exception thrown when an error is detected on the ActiveRecord initialization phase. </summary></documentation><attribute name="System.SerializableAttribute" /><base name="ActiveRecordException" id="T:Castle.ActiveRecord.Framework.ActiveRecordException" type="Castle.ActiveRecord.Framework.ActiveRecordException"><base name="Exception" id="T:System.Exception" type="System.Exception" /></base><implements type="System.Runtime.Serialization.ISerializable" inherited="true" /><constructor name=".ctor" id="M:Castle.ActiveRecord.Framework.ActiveRecordInitializationException.#ctor(System.String)" access="Public" contract="Normal" overload="1"><parameter name="message" type="System.String" valueType="false" /></constructor><constructor name=".ctor" id="M:Castle.ActiveRecord.Framework.ActiveRecordInitializationException.#ctor(System.String,System.Exception)" access="Public" contract="Normal" overload="2"><parameter name="message" type="System.String" valueType="false" /><parameter name="innerException" type="System.Exception" valueType="false" /></constructor><constructor name=".ctor" id="M:Castle.ActiveRecord.Framework.ActiveRecordInitializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" access="Family" contract="Normal" overload="3"><parameter name="info" type="System.Runtime.Serialization.SerializationInfo" valueType="false" /><parameter name="context" type="System.Runtime.Serialization.StreamingContext" valueType="true" /></constructor><property name="Message" id="P:Castle.ActiveRecord.Framework.ActiveRecordInitializationException.Message" access="Public" contract="Virtual" type="System.String" valueType="false" declaringType="System.Exception" get="true" set="false"><documentation><summary>
        <para> Gets a message that describes the current exception.</para>
      </summary></documentation></property><property name="InnerException" id="P:Castle.ActiveRecord.Framework.ActiveRecordInitializationException.InnerException" access="Public" contract="Normal" type="System.Exception" valueType="false" declaringType="System.Exception" get="true" set="false"><documentation><summary>
        <para> Gets the <see cref="T:System.Exception" /> instance that caused the current exception.</para>
      </summary></documentation></property><property name="TargetSite" id="P:Castle.ActiveRecord.Framework.ActiveRecordInitializationException.TargetSite" access="Public" contract="Normal" type="System.Reflection.MethodBase" valueType="false" declaringType="System.Exception" get="true" set="false"><documentation><summary>
        <para> Gets the method that throws the current exception.</para>
      </summary></documentation></property><property name="StackTrace" id="P:Castle.ActiveRecord.Framework.ActiveRecordInitializationException.StackTrace" access="Public" contract="Virtual" type="System.String" valueType="false" declaringType="System.Exception" get="true" set="false"><documentation><summary>
        <para> Gets a string representation of the frames on the call stack at the time the current exception was thrown.</para>
      </summary></documentation></property><property name="HelpLink" id="P:Castle.ActiveRecord.Framework.ActiveRecordInitializationException.HelpLink" access="Public" contract="Virtual" type="System.String" valueType="false" declaringType="System.Exception" get="true" set="true"><documentation><summary>
        <para>Gets or sets a link to the help file associated with this exception.</para>
      </summary></documentation></property><property name="Source" id="P:Castle.ActiveRecord.Framework.ActiveRecordInitializationException.Source" access="Public" contract="Virtual" type="System.String" valueType="false" declaringType="System.Exception" get="true" set="true"><documentation><summary>
        <para> Gets or sets the name of the application or the object that causes the error.</para>
      </summary></documentation></property><property name="HResult" id="P:Castle.ActiveRecord.Framework.ActiveRecordInitializationException.HResult" access="Family" contract="Normal" type="System.Int32" valueType="true" declaringType="System.Exception" get="true" set="true"><documentation><summary>
        <para>Gets or sets HRESULT, a coded numerical value that is assigned to a specific exception.</para>
      </summary></documentation></property><method name="GetObjectData" id="M:Castle.ActiveRecord.Framework.ActiveRecordInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" access="Public" contract="Virtual" returnType="System.Void" valueType="true" declaringType="System.Exception"><documentation><summary>
        <para>When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.</para>
      </summary></documentation><parameter name="info" type="System.Runtime.Serialization.SerializationInfo" valueType="false" /><parameter name="context" type="System.Runtime.Serialization.StreamingContext" valueType="true" /><implements name="GetObjectData" id="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" interface="ISerializable" interfaceId="T:System.Runtime.Serialization.ISerializable" declaringType="System.Runtime.Serialization.ISerializable" /></method><method name="GetBaseException" id="M:Castle.ActiveRecord.Framework.ActiveRecordInitializationException.GetBaseException" access="Public" contract="Virtual" returnType="System.Exception" valueType="false" declaringType="System.Exception"><documentation><summary>
        <para> When overridden in a derived class, returns the <see cref="T:System.Exception" /> that is the root cause of one or more subsequent exceptions.</para>
      </summary></documentation></method><method name="Finalize" id="M:Castle.ActiveRecord.Framework.ActiveRecordInitializationException.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Castle.ActiveRecord.Framework.ActiveRecordInitializationException.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Castle.ActiveRecord.Framework.ActiveRecordInitializationException.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Castle.ActiveRecord.Framework.ActiveRecordInitializationException.ToString" access="Public" contract="Override" returnType="System.String" valueType="false" declaringType="System.Exception"><documentation><summary>
        <para> Creates and returns a string representation of the current exception.</para>
      </summary></documentation></method><method name="GetType" id="M:Castle.ActiveRecord.Framework.ActiveRecordInitializationException.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Castle.ActiveRecord.Framework.ActiveRecordInitializationException.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method></class><class name="DictionaryAdapter" id="T:Castle.ActiveRecord.Framework.DictionaryAdapter" access="Public"><documentation><summary> Maps keys to position in the values array. Basically key -&gt; index </summary></documentation><implements type="System.Collections.IDictionary" /><implements type="System.Collections.ICollection" /><implements type="System.Collections.IEnumerable" /><constructor name=".ctor" id="M:Castle.ActiveRecord.Framework.DictionaryAdapter.#ctor(System.String[],System.Object[])" access="Public" contract="Normal"><parameter name="names" type="System.String[]" valueType="false" /><parameter name="values" type="System.Object[]" valueType="false" /></constructor><property name="Keys" id="P:Castle.ActiveRecord.Framework.DictionaryAdapter.Keys" access="Public" contract="Final" type="System.Collections.ICollection" valueType="false" get="true" set="false"><implements name="Keys" id="P:System.Collections.IDictionary.Keys" interface="IDictionary" interfaceId="T:System.Collections.IDictionary" declaringType="System.Collections.IDictionary" /></property><property name="Values" id="P:Castle.ActiveRecord.Framework.DictionaryAdapter.Values" access="Public" contract="Final" type="System.Collections.ICollection" valueType="false" get="true" set="false"><implements name="Values" id="P:System.Collections.IDictionary.Values" interface="IDictionary" interfaceId="T:System.Collections.IDictionary" declaringType="System.Collections.IDictionary" /></property><property name="IsReadOnly" id="P:Castle.ActiveRecord.Framework.DictionaryAdapter.IsReadOnly" access="Public" contract="Final" type="System.Boolean" valueType="true" get="true" set="false"><implements name="IsReadOnly" id="P:System.Collections.IDictionary.IsReadOnly" interface="IDictionary" interfaceId="T:System.Collections.IDictionary" declaringType="System.Collections.IDictionary" /></property><property name="IsFixedSize" id="P:Castle.ActiveRecord.Framework.DictionaryAdapter.IsFixedSize" access="Public" contract="Final" type="System.Boolean" valueType="true" get="true" set="false"><implements name="IsFixedSize" id="P:System.Collections.IDictionary.IsFixedSize" interface="IDictionary" interfaceId="T:System.Collections.IDictionary" declaringType="System.Collections.IDictionary" /></property><property name="Item" id="P:Castle.ActiveRecord.Framework.DictionaryAdapter.Item(System.Object)" access="Public" contract="Final" type="System.Object" valueType="false" get="true" set="true"><parameter name="key" type="System.Object" valueType="false" /><implements name="Item" id="P:System.Collections.IDictionary.Item(System.Object)" interface="IDictionary" interfaceId="T:System.Collections.IDictionary" declaringType="System.Collections.IDictionary" /></property><property name="Count" id="P:Castle.ActiveRecord.Framework.DictionaryAdapter.Count" access="Public" contract="Final" type="System.Int32" valueType="true" get="true" set="false"><implements name="Count" id="P:System.Collections.ICollection.Count" interface="ICollection" interfaceId="T:System.Collections.ICollection" declaringType="System.Collections.ICollection" /></property><property name="SyncRoot" id="P:Castle.ActiveRecord.Framework.DictionaryAdapter.SyncRoot" access="Public" contract="Final" type="System.Object" valueType="false" get="true" set="false"><implements name="SyncRoot" id="P:System.Collections.ICollection.SyncRoot" interface="ICollection" interfaceId="T:System.Collections.ICollection" declaringType="System.Collections.ICollection" /></property><property name="IsSynchronized" id="P:Castle.ActiveRecord.Framework.DictionaryAdapter.IsSynchronized" access="Public" contract="Final" type="System.Boolean" valueType="true" get="true" set="false"><implements name="IsSynchronized" id="P:System.Collections.ICollection.IsSynchronized" interface="ICollection" interfaceId="T:System.Collections.ICollection" declaringType="System.Collections.ICollection" /></property><method name="GetEnumerator" id="M:Castle.ActiveRecord.Framework.DictionaryAdapter.GetEnumerator" access="Public" contract="Final" returnType="System.Collections.IEnumerator" valueType="false"><implements name="GetEnumerator" id="M:System.Collections.IEnumerable.GetEnumerator" interface="IEnumerable" interfaceId="T:System.Collections.IEnumerable" declaringType="System.Collections.IEnumerable" /></method><method name="CopyTo" id="M:Castle.ActiveRecord.Framework.DictionaryAdapter.CopyTo(System.Array,System.Int32)" access="Public" contract="Final" returnType="System.Void" valueType="true"><parameter name="array" type="System.Array" valueType="false" /><parameter name="index" type="System.Int32" valueType="true" /><implements name="CopyTo" id="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" interface="ICollection" interfaceId="T:System.Collections.ICollection" declaringType="System.Collections.ICollection" /></method><method name="Remove" id="M:Castle.ActiveRecord.Framework.DictionaryAdapter.Remove(System.Object)" access="Public" contract="Final" returnType="System.Void" valueType="true"><parameter name="key" type="System.Object" valueType="false" /><implements name="Remove" id="M:System.Collections.IDictionary.Remove(System.Object)" interface="IDictionary" interfaceId="T:System.Collections.IDictionary" declaringType="System.Collections.IDictionary" /></method><method name="Clear" id="M:Castle.ActiveRecord.Framework.DictionaryAdapter.Clear" access="Public" contract="Final" returnType="System.Void" valueType="true"><implements name="Clear" id="M:System.Collections.IDictionary.Clear" interface="IDictionary" interfaceId="T:System.Collections.IDictionary" declaringType="System.Collections.IDictionary" /></method><method name="Add" id="M:Castle.ActiveRecord.Framework.DictionaryAdapter.Add(System.Object,System.Object)" access="Public" contract="Final" returnType="System.Void" valueType="true"><parameter name="key" type="System.Object" valueType="false" /><parameter name="value" type="System.Object" valueType="false" /><implements name="Add" id="M:System.Collections.IDictionary.Add(System.Object,System.Object)" interface="IDictionary" interfaceId="T:System.Collections.IDictionary" declaringType="System.Collections.IDictionary" /></method><method name="Contains" id="M:Castle.ActiveRecord.Framework.DictionaryAdapter.Contains(System.Object)" access="Public" contract="Final" returnType="System.Boolean" valueType="true"><parameter name="key" type="System.Object" valueType="false" /><implements name="Contains" id="M:System.Collections.IDictionary.Contains(System.Object)" interface="IDictionary" interfaceId="T:System.Collections.IDictionary" declaringType="System.Collections.IDictionary" /></method><method name="Finalize" id="M:Castle.ActiveRecord.Framework.DictionaryAdapter.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Castle.ActiveRecord.Framework.DictionaryAdapter.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Castle.ActiveRecord.Framework.DictionaryAdapter.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Castle.ActiveRecord.Framework.DictionaryAdapter.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="GetType" id="M:Castle.ActiveRecord.Framework.DictionaryAdapter.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Castle.ActiveRecord.Framework.DictionaryAdapter.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method></class><class name="DictionaryAdapter.Entry" id="T:Castle.ActiveRecord.Framework.DictionaryAdapter.Entry" access="NestedPublic" declaringType="Castle.ActiveRecord.Framework.DictionaryAdapter"><constructor name=".ctor" id="M:Castle.ActiveRecord.Framework.DictionaryAdapter.Entry.#ctor(System.String,System.Int32)" access="Public" contract="Normal"><parameter name="key" type="System.String" valueType="false" /><parameter name="index" type="System.Int32" valueType="true" /></constructor><method name="Finalize" id="M:Castle.ActiveRecord.Framework.DictionaryAdapter.Entry.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Castle.ActiveRecord.Framework.DictionaryAdapter.Entry.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Castle.ActiveRecord.Framework.DictionaryAdapter.Entry.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Castle.ActiveRecord.Framework.DictionaryAdapter.Entry.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Find" id="M:Castle.ActiveRecord.Framework.DictionaryAdapter.Entry.Find(System.String)" access="Public" contract="Normal" returnType="System.Int32" valueType="true"><parameter name="key" type="System.String" valueType="false" /></method><method name="GetType" id="M:Castle.ActiveRecord.Framework.DictionaryAdapter.Entry.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Castle.ActiveRecord.Framework.DictionaryAdapter.Entry.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method></class><class name="HookDispatcher" id="T:Castle.ActiveRecord.Framework.HookDispatcher" access="Public"><documentation><summary> Translates the <c>IInterceptor</c> messages to instance possible hooks </summary></documentation><implements type="NHibernate.IInterceptor" /><constructor name=".ctor" id="M:Castle.ActiveRecord.Framework.HookDispatcher.#ctor" access="Family" contract="Normal"><documentation><summary>Initializes a new instance of the <see cref="T:Castle.ActiveRecord.Framework.HookDispatcher" /> class.</summary></documentation></constructor><property name="Instance" id="P:Castle.ActiveRecord.Framework.HookDispatcher.Instance" access="Public" contract="Static" type="Castle.ActiveRecord.Framework.HookDispatcher" valueType="false" get="true" set="false" /><method name="Instantiate" id="M:Castle.ActiveRecord.Framework.HookDispatcher.Instantiate(System.Type,System.Object)" access="Public" contract="Final" returnType="System.Object" valueType="false"><documentation><summary> Instantiate the entity class. Return <c>null</c> to indicate that Hibernate should use the default constructor of the class </summary>
            <param name="type">A mapped type</param>
            <param name="id">The identifier of the new instance</param>
            <returns>An instance of the class, or <c>null</c> to choose default behaviour</returns></documentation><parameter name="type" type="System.Type" valueType="false" /><parameter name="id" type="System.Object" valueType="false" /><implements name="Instantiate" id="M:NHibernate.IInterceptor.Instantiate(System.Type,System.Object)" interface="IInterceptor" interfaceId="T:NHibernate.IInterceptor" declaringType="NHibernate.IInterceptor" /></method><method name="FindDirty" id="M:Castle.ActiveRecord.Framework.HookDispatcher.FindDirty(System.Object,System.Object,System.Object[],System.Object[],System.String[],NHibernate.Type.IType[])" access="Public" contract="Final" returnType="System.Int32[]" valueType="false"><documentation><summary> Called from <c>Flush()</c>. The return value determines whether the entity is updated </summary>
            <remarks>
            	<list>
            		<item>an array of property indicies - the entity is dirty</item>
            		<item>an empty array - the entity is not dirty</item>
            		<item><c>null</c> - use Hibernate's default dirty-checking algorithm</item>
            	</list>
            </remarks>
            <param name="entity">A persistent entity</param>
            <param name="currentState"></param>
            <param name="id"></param>
            <param name="previousState"></param>
            <param name="propertyNames"></param>
            <param name="types"></param>
            <returns>An array of dirty property indicies or <c>null</c> to choose default behavior</returns></documentation><parameter name="entity" type="System.Object" valueType="false" /><parameter name="id" type="System.Object" valueType="false" /><parameter name="currentState" type="System.Object[]" valueType="false" /><parameter name="previousState" type="System.Object[]" valueType="false" /><parameter name="propertyNames" type="System.String[]" valueType="false" /><parameter name="types" type="NHibernate.Type.IType[]" valueType="false" /><implements name="FindDirty" id="M:NHibernate.IInterceptor.FindDirty(System.Object,System.Object,System.Object[],System.Object[],System.String[],NHibernate.Type.IType[])" interface="IInterceptor" interfaceId="T:NHibernate.IInterceptor" declaringType="NHibernate.IInterceptor" /></method><method name="IsUnsaved" id="M:Castle.ActiveRecord.Framework.HookDispatcher.IsUnsaved(System.Object)" access="Public" contract="Final" returnType="System.Object" valueType="false"><documentation><summary> Called when a transient entity is passed to <c>SaveOrUpdate</c>. </summary>
            <remarks> The return value determines if the object is saved <list>
            	<item><c>true</c> - the entity is passed to <c>Save()</c>, resulting in an <c>INSERT</c></item>
            	<item><c>false</c> - the entity is passed to <c>Update()</c>, resulting in an <c>UPDATE</c></item>
            	<item><c>null</c> - Hibernate uses the <c>unsaved-value</c> mapping to determine if the object is unsaved</item>
            </list>
            </remarks>
            <param name="entity">A transient entity</param>
            <returns></returns></documentation><parameter name="entity" type="System.Object" valueType="false" /><implements name="IsUnsaved" id="M:NHibernate.IInterceptor.IsUnsaved(System.Object)" interface="IInterceptor" interfaceId="T:NHibernate.IInterceptor" declaringType="NHibernate.IInterceptor" /></method><method name="PostFlush" id="M:Castle.ActiveRecord.Framework.HookDispatcher.PostFlush(System.Collections.ICollection)" access="Public" contract="Final" returnType="System.Void" valueType="true"><documentation><summary> Called after a flush that actually ends in execution of the SQL statements required to synchronize in-memory state with the database. </summary>
            <param name="entities">The entitites</param></documentation><parameter name="entities" type="System.Collections.ICollection" valueType="false" /><implements name="PostFlush" id="M:NHibernate.IInterceptor.PostFlush(System.Collections.ICollection)" interface="IInterceptor" interfaceId="T:NHibernate.IInterceptor" declaringType="NHibernate.IInterceptor" /></method><method name="PreFlush" id="M:Castle.ActiveRecord.Framework.HookDispatcher.PreFlush(System.Collections.ICollection)" access="Public" contract="Final" returnType="System.Void" valueType="true"><documentation><summary> Called before a flush </summary>
            <param name="entities">The entities</param></documentation><parameter name="entities" type="System.Collections.ICollection" valueType="false" /><implements name="PreFlush" id="M:NHibernate.IInterceptor.PreFlush(System.Collections.ICollection)" interface="IInterceptor" interfaceId="T:NHibernate.IInterceptor" declaringType="NHibernate.IInterceptor" /></method><method name="OnDelete" id="M:Castle.ActiveRecord.Framework.HookDispatcher.OnDelete(System.Object,System.Object,System.Object[],System.String[],NHibernate.Type.IType[])" access="Public" contract="Final" returnType="System.Void" valueType="true"><documentation><summary> Called before an object is deleted </summary>
            <param name="entity"></param>
            <param name="id"></param>
            <param name="propertyNames"></param>
            <param name="state"></param>
            <param name="types"></param>
            <remarks> It is not recommended that the interceptor modify the <c>state</c>. </remarks></documentation><parameter name="entity" type="System.Object" valueType="false" /><parameter name="id" type="System.Object" valueType="false" /><parameter name="state" type="System.Object[]" valueType="false" /><parameter name="propertyNames" type="System.String[]" valueType="false" /><parameter name="types" type="NHibernate.Type.IType[]" valueType="false" /><implements name="OnDelete" id="M:NHibernate.IInterceptor.OnDelete(System.Object,System.Object,System.Object[],System.String[],NHibernate.Type.IType[])" interface="IInterceptor" interfaceId="T:NHibernate.IInterceptor" declaringType="NHibernate.IInterceptor" /></method><method name="OnSave" id="M:Castle.ActiveRecord.Framework.HookDispatcher.OnSave(System.Object,System.Object,System.Object[],System.String[],NHibernate.Type.IType[])" access="Public" contract="Final" returnType="System.Boolean" valueType="true"><documentation><summary> Called before an object is saved </summary>
            <param name="entity"></param>
            <param name="id"></param>
            <param name="propertyNames"></param>
            <param name="state"></param>
            <param name="types"></param>
            <remarks> The interceptor may modify the <c>state</c>, which will be used for the SQL <c>INSERT</c> and propagated to the persistent object </remarks>
            <returns><c>true</c> if the user modified the <c>state</c> in any way</returns></documentation><parameter name="entity" type="System.Object" valueType="false" /><parameter name="id" type="System.Object" valueType="false" /><parameter name="state" type="System.Object[]" valueType="false" /><parameter name="propertyNames" type="System.String[]" valueType="false" /><parameter name="types" type="NHibernate.Type.IType[]" valueType="false" /><implements name="OnSave" id="M:NHibernate.IInterceptor.OnSave(System.Object,System.Object,System.Object[],System.String[],NHibernate.Type.IType[])" interface="IInterceptor" interfaceId="T:NHibernate.IInterceptor" declaringType="NHibernate.IInterceptor" /></method><method name="OnFlushDirty" id="M:Castle.ActiveRecord.Framework.HookDispatcher.OnFlushDirty(System.Object,System.Object,System.Object[],System.Object[],System.String[],NHibernate.Type.IType[])" access="Public" contract="Final" returnType="System.Boolean" valueType="true"><documentation><summary> Called when an object is detected to be dirty, during a flush. </summary>
            <param name="currentState"></param>
            <param name="entity"></param>
            <param name="id"></param>
            <param name="previousState"></param>
            <param name="propertyNames"></param>
            <param name="types"></param>
            <remarks> The interceptor may modify the detected <c>currentState</c>, which will be propagated to both the database and the persistent object. Note that all flushes end in an actual synchronization with the database, in which as the new <c>currentState</c> will be propagated to the object, but not necessarily (immediately) to the database. It is strongly recommended that the interceptor <b>not</b> modify the <c>previousState</c>. </remarks>
            <returns><c>true</c> if the user modified the <c>currentState</c> in any way</returns></documentation><parameter name="entity" type="System.Object" valueType="false" /><parameter name="id" type="System.Object" valueType="false" /><parameter name="currentState" type="System.Object[]" valueType="false" /><parameter name="previousState" type="System.Object[]" valueType="false" /><parameter name="propertyNames" type="System.String[]" valueType="false" /><parameter name="types" type="NHibernate.Type.IType[]" valueType="false" /><implements name="OnFlushDirty" id="M:NHibernate.IInterceptor.OnFlushDirty(System.Object,System.Object,System.Object[],System.Object[],System.String[],NHibernate.Type.IType[])" interface="IInterceptor" interfaceId="T:NHibernate.IInterceptor" declaringType="NHibernate.IInterceptor" /></method><method name="OnLoad" id="M:Castle.ActiveRecord.Framework.HookDispatcher.OnLoad(System.Object,System.Object,System.Object[],System.String[],NHibernate.Type.IType[])" access="Public" contract="Final" returnType="System.Boolean" valueType="true"><documentation><summary> Called just before an object is initialized </summary>
            <param name="entity"></param>
            <param name="id"></param>
            <param name="propertyNames"></param>
            <param name="state"></param>
            <param name="types"></param>
            <remarks> The interceptor may change the <c>state</c>, which will be propagated to the persistent object. Note that when this method is called, <c>entity</c> will be an empty uninitialized instance of the class.</remarks>
            <returns><c>true</c> if the user modified the <c>state</c> in any way</returns></documentation><parameter name="entity" type="System.Object" valueType="false" /><parameter name="id" type="System.Object" valueType="false" /><parameter name="state" type="System.Object[]" valueType="false" /><parameter name="propertyNames" type="System.String[]" valueType="false" /><parameter name="types" type="NHibernate.Type.IType[]" valueType="false" /><implements name="OnLoad" id="M:NHibernate.IInterceptor.OnLoad(System.Object,System.Object,System.Object[],System.String[],NHibernate.Type.IType[])" interface="IInterceptor" interfaceId="T:NHibernate.IInterceptor" declaringType="NHibernate.IInterceptor" /></method><method name="Finalize" id="M:Castle.ActiveRecord.Framework.HookDispatcher.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Castle.ActiveRecord.Framework.HookDispatcher.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Castle.ActiveRecord.Framework.HookDispatcher.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Castle.ActiveRecord.Framework.HookDispatcher.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="GetType" id="M:Castle.ActiveRecord.Framework.HookDispatcher.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Castle.ActiveRecord.Framework.HookDispatcher.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method></class><class name="SessionFactoryHolder" id="T:Castle.ActiveRecord.Framework.SessionFactoryHolder" access="Public" baseType="MarshalByRefObject"><documentation><summary> Default implementation of <seealso cref="T:Castle.ActiveRecord.Framework.ISessionFactoryHolder" />
            </summary>
            <remarks> This class is thread safe </remarks></documentation><base name="MarshalByRefObject" id="T:System.MarshalByRefObject" type="System.MarshalByRefObject" /><implements type="Castle.ActiveRecord.Framework.ISessionFactoryHolder" /><constructor name=".ctor" id="M:Castle.ActiveRecord.Framework.SessionFactoryHolder.#ctor" access="Public" contract="Normal"><documentation><summary>Initializes a new instance of the <see cref="T:Castle.ActiveRecord.Framework.SessionFactoryHolder" /> class.</summary></documentation></constructor><property name="ThreadScopeInfo" id="P:Castle.ActiveRecord.Framework.SessionFactoryHolder.ThreadScopeInfo" access="Public" contract="Final" type="Castle.ActiveRecord.Framework.IThreadScopeInfo" valueType="false" get="true" set="true"><implements name="ThreadScopeInfo" id="P:Castle.ActiveRecord.Framework.ISessionFactoryHolder.ThreadScopeInfo" interface="ISessionFactoryHolder" interfaceId="T:Castle.ActiveRecord.Framework.ISessionFactoryHolder" declaringType="Castle.ActiveRecord.Framework.ISessionFactoryHolder" /></property><method name="GetRootType" id="M:Castle.ActiveRecord.Framework.SessionFactoryHolder.GetRootType(System.Type)" access="Public" contract="Final" returnType="System.Type" valueType="false"><parameter name="type" type="System.Type" valueType="false" /><implements name="GetRootType" id="M:Castle.ActiveRecord.Framework.ISessionFactoryHolder.GetRootType(System.Type)" interface="ISessionFactoryHolder" interfaceId="T:Castle.ActiveRecord.Framework.ISessionFactoryHolder" declaringType="Castle.ActiveRecord.Framework.ISessionFactoryHolder" /></method><method name="ReleaseSession" id="M:Castle.ActiveRecord.Framework.SessionFactoryHolder.ReleaseSession(NHibernate.ISession)" access="Public" contract="Final" returnType="System.Void" valueType="true"><parameter name="session" type="NHibernate.ISession" valueType="false" /><implements name="ReleaseSession" id="M:Castle.ActiveRecord.Framework.ISessionFactoryHolder.ReleaseSession(NHibernate.ISession)" interface="ISessionFactoryHolder" interfaceId="T:Castle.ActiveRecord.Framework.ISessionFactoryHolder" declaringType="Castle.ActiveRecord.Framework.ISessionFactoryHolder" /></method><method name="CreateSession" id="M:Castle.ActiveRecord.Framework.SessionFactoryHolder.CreateSession(System.Type)" access="Public" contract="Final" returnType="NHibernate.ISession" valueType="false"><parameter name="type" type="System.Type" valueType="false" /><implements name="CreateSession" id="M:Castle.ActiveRecord.Framework.ISessionFactoryHolder.CreateSession(System.Type)" interface="ISessionFactoryHolder" interfaceId="T:Castle.ActiveRecord.Framework.ISessionFactoryHolder" declaringType="Castle.ActiveRecord.Framework.ISessionFactoryHolder" /></method><method name="GetSessionFactory" id="M:Castle.ActiveRecord.Framework.SessionFactoryHolder.GetSessionFactory(System.Type)" access="Public" contract="Final" returnType="NHibernate.ISessionFactory" valueType="false"><documentation><summary> Optimized with reader/writer lock. </summary>
            <param name="type"></param>
            <returns></returns></documentation><parameter name="type" type="System.Type" valueType="false" /><implements name="GetSessionFactory" id="M:Castle.ActiveRecord.Framework.ISessionFactoryHolder.GetSessionFactory(System.Type)" interface="ISessionFactoryHolder" interfaceId="T:Castle.ActiveRecord.Framework.ISessionFactoryHolder" declaringType="Castle.ActiveRecord.Framework.ISessionFactoryHolder" /></method><method name="GetConfiguration" id="M:Castle.ActiveRecord.Framework.SessionFactoryHolder.GetConfiguration(System.Type)" access="Public" contract="Final" returnType="NHibernate.Cfg.Configuration" valueType="false"><parameter name="type" type="System.Type" valueType="false" /><implements name="GetConfiguration" id="M:Castle.ActiveRecord.Framework.ISessionFactoryHolder.GetConfiguration(System.Type)" interface="ISessionFactoryHolder" interfaceId="T:Castle.ActiveRecord.Framework.ISessionFactoryHolder" declaringType="Castle.ActiveRecord.Framework.ISessionFactoryHolder" /></method><method name="GetAllConfigurations" id="M:Castle.ActiveRecord.Framework.SessionFactoryHolder.GetAllConfigurations" access="Public" contract="Final" returnType="NHibernate.Cfg.Configuration[]" valueType="false"><documentation><summary> Pendent </summary>
            <returns></returns></documentation><implements name="GetAllConfigurations" id="M:Castle.ActiveRecord.Framework.ISessionFactoryHolder.GetAllConfigurations" interface="ISessionFactoryHolder" interfaceId="T:Castle.ActiveRecord.Framework.ISessionFactoryHolder" declaringType="Castle.ActiveRecord.Framework.ISessionFactoryHolder" /></method><method name="Register" id="M:Castle.ActiveRecord.Framework.SessionFactoryHolder.Register(System.Type,NHibernate.Cfg.Configuration)" access="Public" contract="Final" returnType="System.Void" valueType="true"><parameter name="rootType" type="System.Type" valueType="false" /><parameter name="cfg" type="NHibernate.Cfg.Configuration" valueType="false" /><implements name="Register" id="M:Castle.ActiveRecord.Framework.ISessionFactoryHolder.Register(System.Type,NHibernate.Cfg.Configuration)" interface="ISessionFactoryHolder" interfaceId="T:Castle.ActiveRecord.Framework.ISessionFactoryHolder" declaringType="Castle.ActiveRecord.Framework.ISessionFactoryHolder" /></method><method name="CreateObjRef" id="M:Castle.ActiveRecord.Framework.SessionFactoryHolder.CreateObjRef(System.Type)" access="Public" contract="Virtual" returnType="System.Runtime.Remoting.ObjRef" valueType="false" declaringType="System.MarshalByRefObject"><documentation><summary>
        <para>Creates an object that contains all the relevant information required to generate a proxy used to communicate with a remote object.</para>
      </summary></documentation><parameter name="requestedType" type="System.Type" valueType="false" /></method><method name="InitializeLifetimeService" id="M:Castle.ActiveRecord.Framework.SessionFactoryHolder.InitializeLifetimeService" access="Public" contract="Virtual" returnType="System.Object" valueType="false" declaringType="System.MarshalByRefObject"><documentation><summary>
        <para> Obtains a lifetime service object to control the lifetime policy for this instance.</para>
      </summary></documentation></method><method name="GetLifetimeService" id="M:Castle.ActiveRecord.Framework.SessionFactoryHolder.GetLifetimeService" access="Public" contract="Final" returnType="System.Object" valueType="false" declaringType="System.MarshalByRefObject"><documentation><summary>
        <para>Retrieves the current lifetime service object that controls the lifetime policy for this instance.</para>
      </summary></documentation></method><method name="Finalize" id="M:Castle.ActiveRecord.Framework.SessionFactoryHolder.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Castle.ActiveRecord.Framework.SessionFactoryHolder.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Castle.ActiveRecord.Framework.SessionFactoryHolder.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Castle.ActiveRecord.Framework.SessionFactoryHolder.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="GetType" id="M:Castle.ActiveRecord.Framework.SessionFactoryHolder.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Castle.ActiveRecord.Framework.SessionFactoryHolder.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><event name="OnRootTypeRegistered" id="E:Castle.ActiveRecord.Framework.SessionFactoryHolder.OnRootTypeRegistered" access="Public" contract="Final" type="Castle.ActiveRecord.Framework.RootTypeHandler" valueType="false" multicast="true"><implements name="OnRootTypeRegistered" id="E:Castle.ActiveRecord.Framework.ISessionFactoryHolder.OnRootTypeRegistered" interface="ISessionFactoryHolder" interfaceId="T:Castle.ActiveRecord.Framework.ISessionFactoryHolder" declaringType="Castle.ActiveRecord.Framework.ISessionFactoryHolder" /></event></class><class name="SessionScopeWebModule" id="T:Castle.ActiveRecord.Framework.SessionScopeWebModule" access="Public"><documentation><summary> HttpModule to set up a session for the request lifetime. <seealso cref="T:Castle.ActiveRecord.SessionScope" />
            </summary>
            <remarks> To install the module, you must: <para>
               <list type="number">
                 <item>
                   <description> Add the module to the <c>httpModules</c> configuration section within <c>system.web</c>
                   </description>
                 </item>
               </list>
            </para>
            </remarks></documentation><implements type="System.Web.IHttpModule" /><constructor name=".ctor" id="M:Castle.ActiveRecord.Framework.SessionScopeWebModule.#ctor" access="Public" contract="Normal"><documentation><summary>Initializes a new instance of the <see cref="T:Castle.ActiveRecord.Framework.SessionScopeWebModule" /> class.</summary></documentation></constructor><field name="SessionKey" id="F:Castle.ActiveRecord.Framework.SessionScopeWebModule.SessionKey" access="Family" contract="Static" type="System.String" valueType="false" initOnly="true" /><method name="Dispose" id="M:Castle.ActiveRecord.Framework.SessionScopeWebModule.Dispose" access="Public" contract="Final" returnType="System.Void" valueType="true"><implements name="Dispose" id="M:System.Web.IHttpModule.Dispose" interface="IHttpModule" interfaceId="T:System.Web.IHttpModule" declaringType="System.Web.IHttpModule" /></method><method name="Init" id="M:Castle.ActiveRecord.Framework.SessionScopeWebModule.Init(System.Web.HttpApplication)" access="Public" contract="Final" returnType="System.Void" valueType="true"><parameter name="app" type="System.Web.HttpApplication" valueType="false" /><implements name="Init" id="M:System.Web.IHttpModule.Init(System.Web.HttpApplication)" interface="IHttpModule" interfaceId="T:System.Web.IHttpModule" declaringType="System.Web.IHttpModule" /></method><method name="Finalize" id="M:Castle.ActiveRecord.Framework.SessionScopeWebModule.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Castle.ActiveRecord.Framework.SessionScopeWebModule.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Castle.ActiveRecord.Framework.SessionScopeWebModule.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Castle.ActiveRecord.Framework.SessionScopeWebModule.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="GetType" id="M:Castle.ActiveRecord.Framework.SessionScopeWebModule.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Castle.ActiveRecord.Framework.SessionScopeWebModule.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method></class><class name="SupportingUtils" id="T:Castle.ActiveRecord.Framework.SupportingUtils" access="Public" abstract="true"><documentation><summary> Contains utility methods for dealing with ActiveRecord objects and collections. Useful for external frameworks. </summary></documentation><constructor name=".ctor" id="M:Castle.ActiveRecord.Framework.SupportingUtils.#ctor" access="Family" contract="Normal"><documentation><summary>Initializes a new instance of the <see cref="T:Castle.ActiveRecord.Framework.SupportingUtils" /> class.</summary></documentation></constructor><method name="Finalize" id="M:Castle.ActiveRecord.Framework.SupportingUtils.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Castle.ActiveRecord.Framework.SupportingUtils.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Castle.ActiveRecord.Framework.SupportingUtils.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Castle.ActiveRecord.Framework.SupportingUtils.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="FindAll" id="M:Castle.ActiveRecord.Framework.SupportingUtils.FindAll(System.Type)" access="Public" contract="Static" returnType="System.Collections.IList" valueType="false"><obsolete>Use ActiveRecordMediator instead</obsolete><parameter name="type" type="System.Type" valueType="false" /></method><method name="FindByPK" id="M:Castle.ActiveRecord.Framework.SupportingUtils.FindByPK(System.Type,System.Object)" access="Public" contract="Static" returnType="System.Object" valueType="false" overload="1"><obsolete>Use ActiveRecordMediator instead</obsolete><parameter name="type" type="System.Type" valueType="false" /><parameter name="id" type="System.Object" valueType="false" /></method><method name="FindByPK" id="M:Castle.ActiveRecord.Framework.SupportingUtils.FindByPK(System.Type,System.Object,System.Boolean)" access="Public" contract="Static" returnType="System.Object" valueType="false" overload="2"><obsolete>Use ActiveRecordMediator instead</obsolete><parameter name="type" type="System.Type" valueType="false" /><parameter name="id" type="System.Object" valueType="false" /><parameter name="throwOnNotFound" type="System.Boolean" valueType="true" /></method><method name="BuildArray" id="M:Castle.ActiveRecord.Framework.SupportingUtils.BuildArray(System.Type,System.Collections.IList)" access="Public" contract="Static" returnType="System.Array" valueType="false" overload="1"><parameter name="targetType" type="System.Type" valueType="false" /><parameter name="list" type="System.Collections.IList" valueType="false" /></method><method name="BuildArray" id="M:Castle.ActiveRecord.Framework.SupportingUtils.BuildArray(System.Type,System.Collections.IEnumerable,System.Boolean)" access="Public" contract="Static" returnType="System.Array" valueType="false" overload="2"><documentation><summary> Converts the results stored in an <see cref="T:System.Collections.IEnumerable" /> to an strongly-typed array. </summary>
            <param name="type">The type of the new array</param>
            <param name="list">The source list</param>
            <param name="distinct">If true, only distinct results will be inserted in the array</param>
            <returns>The strongly-typed array</returns></documentation><parameter name="type" type="System.Type" valueType="false" /><parameter name="list" type="System.Collections.IEnumerable" valueType="false" /><parameter name="distinct" type="System.Boolean" valueType="true" /></method><method name="BuildArray" id="M:Castle.ActiveRecord.Framework.SupportingUtils.BuildArray(System.Type,System.Collections.IEnumerable,System.Int32,System.Boolean)" access="Public" contract="Static" returnType="System.Array" valueType="false" overload="3"><documentation><summary> Converts the results stored in an <see cref="T:System.Collections.IEnumerable" /> to an strongly-typed array. </summary>
            <param name="type">The type of the new array</param>
            <param name="list">The source list</param>
            <param name="entityIndex"> If the HQL clause selects more than one field, or a join is performed without using <c>fetch join</c>, the contents of the result list will be of type <c>object[]</c>. Specify which index in this array should be used to compose the new result array. Use <c>-1</c> to ignore this parameter. </param>
            <param name="distinct">If true, only distinct results will be inserted in the array</param>
            <returns>The strongly-typed array</returns></documentation><parameter name="type" type="System.Type" valueType="false" /><parameter name="list" type="System.Collections.IEnumerable" valueType="false" /><parameter name="entityIndex" type="System.Int32" valueType="true" /><parameter name="distinct" type="System.Boolean" valueType="true" /></method><method name="BuildObjectArray" id="M:Castle.ActiveRecord.Framework.SupportingUtils.BuildObjectArray(System.Type,System.Collections.IEnumerable,System.Boolean)" access="Public" contract="Static" returnType="System.Array" valueType="false"><documentation><summary> Converts the results stored in an <see cref="T:System.Collections.IEnumerable" /> to an strongly-typed array. </summary>
            <param name="type"> The class of the object which will be created for each row contained in the supplied <paramref name="list" />. </param>
            <param name="list">The source list</param>
            <param name="distinct">If true, only distinct results will be inserted in the array</param>
            <returns>The strongly-typed array</returns>
            <remarks>A good alternative is to use the new <see cref="T:Castle.ActiveRecord.ImportAttribute" /></remarks></documentation><parameter name="type" type="System.Type" valueType="false" /><parameter name="list" type="System.Collections.IEnumerable" valueType="false" /><parameter name="distinct" type="System.Boolean" valueType="true" /></method><method name="GetType" id="M:Castle.ActiveRecord.Framework.SupportingUtils.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Castle.ActiveRecord.Framework.SupportingUtils.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method></class><class name="TransactionException" id="T:Castle.ActiveRecord.Framework.TransactionException" access="Public" baseType="ActiveRecordException"><attribute name="System.SerializableAttribute" /><base name="ActiveRecordException" id="T:Castle.ActiveRecord.Framework.ActiveRecordException" type="Castle.ActiveRecord.Framework.ActiveRecordException"><base name="Exception" id="T:System.Exception" type="System.Exception" /></base><implements type="System.Runtime.Serialization.ISerializable" inherited="true" /><constructor name=".ctor" id="M:Castle.ActiveRecord.Framework.TransactionException.#ctor(System.String)" access="Public" contract="Normal" overload="1"><parameter name="message" type="System.String" valueType="false" /></constructor><constructor name=".ctor" id="M:Castle.ActiveRecord.Framework.TransactionException.#ctor(System.String,System.Exception)" access="Public" contract="Normal" overload="2"><parameter name="message" type="System.String" valueType="false" /><parameter name="innerException" type="System.Exception" valueType="false" /></constructor><constructor name=".ctor" id="M:Castle.ActiveRecord.Framework.TransactionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" access="Public" contract="Normal" overload="3"><parameter name="info" type="System.Runtime.Serialization.SerializationInfo" valueType="false" /><parameter name="context" type="System.Runtime.Serialization.StreamingContext" valueType="true" /></constructor><property name="Message" id="P:Castle.ActiveRecord.Framework.TransactionException.Message" access="Public" contract="Virtual" type="System.String" valueType="false" declaringType="System.Exception" get="true" set="false"><documentation><summary>
        <para> Gets a message that describes the current exception.</para>
      </summary></documentation></property><property name="InnerException" id="P:Castle.ActiveRecord.Framework.TransactionException.InnerException" access="Public" contract="Normal" type="System.Exception" valueType="false" declaringType="System.Exception" get="true" set="false"><documentation><summary>
        <para> Gets the <see cref="T:System.Exception" /> instance that caused the current exception.</para>
      </summary></documentation></property><property name="TargetSite" id="P:Castle.ActiveRecord.Framework.TransactionException.TargetSite" access="Public" contract="Normal" type="System.Reflection.MethodBase" valueType="false" declaringType="System.Exception" get="true" set="false"><documentation><summary>
        <para> Gets the method that throws the current exception.</para>
      </summary></documentation></property><property name="StackTrace" id="P:Castle.ActiveRecord.Framework.TransactionException.StackTrace" access="Public" contract="Virtual" type="System.String" valueType="false" declaringType="System.Exception" get="true" set="false"><documentation><summary>
        <para> Gets a string representation of the frames on the call stack at the time the current exception was thrown.</para>
      </summary></documentation></property><property name="HelpLink" id="P:Castle.ActiveRecord.Framework.TransactionException.HelpLink" access="Public" contract="Virtual" type="System.String" valueType="false" declaringType="System.Exception" get="true" set="true"><documentation><summary>
        <para>Gets or sets a link to the help file associated with this exception.</para>
      </summary></documentation></property><property name="Source" id="P:Castle.ActiveRecord.Framework.TransactionException.Source" access="Public" contract="Virtual" type="System.String" valueType="false" declaringType="System.Exception" get="true" set="true"><documentation><summary>
        <para> Gets or sets the name of the application or the object that causes the error.</para>
      </summary></documentation></property><property name="HResult" id="P:Castle.ActiveRecord.Framework.TransactionException.HResult" access="Family" contract="Normal" type="System.Int32" valueType="true" declaringType="System.Exception" get="true" set="true"><documentation><summary>
        <para>Gets or sets HRESULT, a coded numerical value that is assigned to a specific exception.</para>
      </summary></documentation></property><method name="GetObjectData" id="M:Castle.ActiveRecord.Framework.TransactionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" access="Public" contract="Virtual" returnType="System.Void" valueType="true" declaringType="System.Exception"><documentation><summary>
        <para>When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.</para>
      </summary></documentation><parameter name="info" type="System.Runtime.Serialization.SerializationInfo" valueType="false" /><parameter name="context" type="System.Runtime.Serialization.StreamingContext" valueType="true" /><implements name="GetObjectData" id="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" interface="ISerializable" interfaceId="T:System.Runtime.Serialization.ISerializable" declaringType="System.Runtime.Serialization.ISerializable" /></method><method name="GetBaseException" id="M:Castle.ActiveRecord.Framework.TransactionException.GetBaseException" access="Public" contract="Virtual" returnType="System.Exception" valueType="false" declaringType="System.Exception"><documentation><summary>
        <para> When overridden in a derived class, returns the <see cref="T:System.Exception" /> that is the root cause of one or more subsequent exceptions.</para>
      </summary></documentation></method><method name="Finalize" id="M:Castle.ActiveRecord.Framework.TransactionException.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Castle.ActiveRecord.Framework.TransactionException.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Castle.ActiveRecord.Framework.TransactionException.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Castle.ActiveRecord.Framework.TransactionException.ToString" access="Public" contract="Override" returnType="System.String" valueType="false" declaringType="System.Exception"><documentation><summary>
        <para> Creates and returns a string representation of the current exception.</para>
      </summary></documentation></method><method name="GetType" id="M:Castle.ActiveRecord.Framework.TransactionException.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Castle.ActiveRecord.Framework.TransactionException.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method></class><interface name="IConfigurationSource" id="T:Castle.ActiveRecord.Framework.IConfigurationSource" access="Public"><documentation><summary> Abstracts the source of configuration for the framework. </summary></documentation><implementedBy id="T:Castle.ActiveRecord.Framework.Config.ActiveRecordSectionHandler" /><implementedBy id="T:Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource" /><implementedBy id="T:Castle.ActiveRecord.Framework.Config.XmlConfigurationSource" /><property name="ThreadScopeInfoImplementation" id="P:Castle.ActiveRecord.Framework.IConfigurationSource.ThreadScopeInfoImplementation" access="Public" contract="Abstract" type="System.Type" valueType="false" get="true" set="false"><documentation><summary> Implementors should return the type that implements the interface <see cref="T:Castle.ActiveRecord.Framework.IThreadScopeInfo" />
            </summary></documentation></property><property name="SessionFactoryHolderImplementation" id="P:Castle.ActiveRecord.Framework.IConfigurationSource.SessionFactoryHolderImplementation" access="Public" contract="Abstract" type="System.Type" valueType="false" get="true" set="false"><documentation><summary> Implementors should return the type that implements the interface <see cref="T:Castle.ActiveRecord.Framework.ISessionFactoryHolder" />
            </summary></documentation></property><property name="NamingStrategyImplementation" id="P:Castle.ActiveRecord.Framework.IConfigurationSource.NamingStrategyImplementation" access="Public" contract="Abstract" type="System.Type" valueType="false" get="true" set="false"><documentation><summary> Implementors should return the type that implements the interface NHibernate.Cfg.INamingStrategy </summary></documentation></property><property name="Debug" id="P:Castle.ActiveRecord.Framework.IConfigurationSource.Debug" access="Public" contract="Abstract" type="System.Boolean" valueType="true" get="true" set="false" /><method name="GetConfiguration" id="M:Castle.ActiveRecord.Framework.IConfigurationSource.GetConfiguration(System.Type)" access="Public" contract="Abstract" returnType="Castle.Core.Configuration.IConfiguration" valueType="false"><documentation><summary> Implementors should return an <see cref="T:Castle.Core.Configuration.IConfiguration" /> instance </summary>
            <param name="type"></param>
            <returns></returns></documentation><parameter name="type" type="System.Type" valueType="false" /></method></interface><interface name="IThreadScopeInfo" id="T:Castle.ActiveRecord.Framework.IThreadScopeInfo" access="Public"><implementedBy id="T:Castle.ActiveRecord.Framework.Scopes.AbstractThreadScopeInfo" /><implementedBy id="T:Castle.ActiveRecord.Framework.Scopes.HybridWebThreadScopeInfo" /><implementedBy id="T:Castle.ActiveRecord.Framework.Scopes.ThreadScopeAccessor" /><implementedBy id="T:Castle.ActiveRecord.Framework.Scopes.ThreadScopeInfo" /><implementedBy id="T:Castle.ActiveRecord.Framework.Scopes.WebThreadScopeInfo" /><property name="CurrentStack" id="P:Castle.ActiveRecord.Framework.IThreadScopeInfo.CurrentStack" access="Public" contract="Abstract" type="System.Collections.Stack" valueType="false" get="true" set="false" /><property name="HasInitializedScope" id="P:Castle.ActiveRecord.Framework.IThreadScopeInfo.HasInitializedScope" access="Public" contract="Abstract" type="System.Boolean" valueType="true" get="true" set="false" /><method name="UnRegisterScope" id="M:Castle.ActiveRecord.Framework.IThreadScopeInfo.UnRegisterScope(Castle.ActiveRecord.ISessionScope)" access="Public" contract="Abstract" returnType="System.Void" valueType="true"><parameter name="scope" type="Castle.ActiveRecord.ISessionScope" valueType="false" /></method><method name="RegisterScope" id="M:Castle.ActiveRecord.Framework.IThreadScopeInfo.RegisterScope(Castle.ActiveRecord.ISessionScope)" access="Public" contract="Abstract" returnType="System.Void" valueType="true"><parameter name="scope" type="Castle.ActiveRecord.ISessionScope" valueType="false" /></method><method name="GetRegisteredScope" id="M:Castle.ActiveRecord.Framework.IThreadScopeInfo.GetRegisteredScope" access="Public" contract="Abstract" returnType="Castle.ActiveRecord.ISessionScope" valueType="false" /></interface><interface name="IValidator" id="T:Castle.ActiveRecord.Framework.IValidator" access="Public"><documentation><summary> Define the basic contract for validators </summary></documentation><implementedBy id="T:Castle.ActiveRecord.Framework.Validators.AbstractValidator" /><implementedBy id="T:Castle.ActiveRecord.Framework.Validators.ConfirmationValidator" /><implementedBy id="T:Castle.ActiveRecord.Framework.Validators.CreditCardValidator" /><implementedBy id="T:Castle.ActiveRecord.Framework.Validators.EmailValidator" /><implementedBy id="T:Castle.ActiveRecord.Framework.Validators.IsUniqueValidator" /><implementedBy id="T:Castle.ActiveRecord.Framework.Validators.LengthValidator" /><implementedBy id="T:Castle.ActiveRecord.Framework.Validators.NullCheckValidator" /><implementedBy id="T:Castle.ActiveRecord.Framework.Validators.RegularExpressionValidator" /><property name="Property" id="P:Castle.ActiveRecord.Framework.IValidator.Property" access="Public" contract="Abstract" type="System.Reflection.PropertyInfo" valueType="false" get="true" set="false"><documentation><summary> The target property </summary></documentation></property><property name="ErrorMessage" id="P:Castle.ActiveRecord.Framework.IValidator.ErrorMessage" access="Public" contract="Abstract" type="System.String" valueType="false" get="true" set="true"><documentation><summary> The error message to be displayed if the validation fails </summary></documentation></property><method name="Perform" id="M:Castle.ActiveRecord.Framework.IValidator.Perform(System.Object,System.Object)" access="Public" contract="Abstract" returnType="System.Boolean" valueType="true" overload="1"><documentation><summary> Implementors should perform the actual validation upon the property value </summary>
            <param name="instance"></param>
            <param name="fieldValue"></param>
            <returns><c>true</c> if the field is OK</returns></documentation><parameter name="instance" type="System.Object" valueType="false" /><parameter name="fieldValue" type="System.Object" valueType="false" /></method><method name="Perform" id="M:Castle.ActiveRecord.Framework.IValidator.Perform(System.Object)" access="Public" contract="Abstract" returnType="System.Boolean" valueType="true" overload="2"><documentation><summary> Implementors should perform the actual validation upon the property value </summary>
            <param name="instance"></param>
            <returns><c>true</c> if the field is OK</returns></documentation><parameter name="instance" type="System.Object" valueType="false" /></method><method name="Initialize" id="M:Castle.ActiveRecord.Framework.IValidator.Initialize(System.Reflection.PropertyInfo)" access="Public" contract="Abstract" returnType="System.Void" valueType="true"><documentation><summary> Implementors should perform any initialization logic </summary>
            <param name="property">The target property</param></documentation><parameter name="property" type="System.Reflection.PropertyInfo" valueType="false" /></method></interface><interface name="ISessionFactoryHolder" id="T:Castle.ActiveRecord.Framework.ISessionFactoryHolder" access="Public"><documentation><summary> Keeps an association of SessionFactories to a object model tree; </summary></documentation><implementedBy id="T:Castle.ActiveRecord.Framework.SessionFactoryHolder" /><property name="ThreadScopeInfo" id="P:Castle.ActiveRecord.Framework.ISessionFactoryHolder.ThreadScopeInfo" access="Public" contract="Abstract" type="Castle.ActiveRecord.Framework.IThreadScopeInfo" valueType="false" get="true" set="true"><documentation><summary> Gets or sets the implementation of <see cref="T:Castle.ActiveRecord.Framework.IThreadScopeInfo" />
            </summary></documentation></property><method name="GetRootType" id="M:Castle.ActiveRecord.Framework.ISessionFactoryHolder.GetRootType(System.Type)" access="Public" contract="Abstract" returnType="System.Type" valueType="false"><parameter name="type" type="System.Type" valueType="false" /></method><method name="ReleaseSession" id="M:Castle.ActiveRecord.Framework.ISessionFactoryHolder.ReleaseSession(NHibernate.ISession)" access="Public" contract="Abstract" returnType="System.Void" valueType="true"><documentation><summary> Releases the specified session </summary>
            <param name="session"></param></documentation><parameter name="session" type="NHibernate.ISession" valueType="false" /></method><method name="CreateSession" id="M:Castle.ActiveRecord.Framework.ISessionFactoryHolder.CreateSession(System.Type)" access="Public" contract="Abstract" returnType="NHibernate.ISession" valueType="false"><documentation><summary> Creates a session for the associated type </summary>
            <param name="type"></param>
            <returns></returns></documentation><parameter name="type" type="System.Type" valueType="false" /></method><method name="GetSessionFactory" id="M:Castle.ActiveRecord.Framework.ISessionFactoryHolder.GetSessionFactory(System.Type)" access="Public" contract="Abstract" returnType="NHibernate.ISessionFactory" valueType="false"><documentation><summary> Obtains the SessionFactory associated to the type. </summary>
            <param name="type"></param>
            <returns></returns></documentation><parameter name="type" type="System.Type" valueType="false" /></method><method name="GetConfiguration" id="M:Castle.ActiveRecord.Framework.ISessionFactoryHolder.GetConfiguration(System.Type)" access="Public" contract="Abstract" returnType="NHibernate.Cfg.Configuration" valueType="false"><documentation><summary> Requests the Configuration associated to the type. </summary>
            <param name="type"></param>
            <returns></returns></documentation><parameter name="type" type="System.Type" valueType="false" /></method><method name="GetAllConfigurations" id="M:Castle.ActiveRecord.Framework.ISessionFactoryHolder.GetAllConfigurations" access="Public" contract="Abstract" returnType="NHibernate.Cfg.Configuration[]" valueType="false"><documentation><summary> Pendent </summary>
            <returns></returns></documentation></method><method name="Register" id="M:Castle.ActiveRecord.Framework.ISessionFactoryHolder.Register(System.Type,NHibernate.Cfg.Configuration)" access="Public" contract="Abstract" returnType="System.Void" valueType="true"><documentation><summary> Associates a Configuration object to a root type </summary>
            <param name="rootType"></param>
            <param name="cfg"></param></documentation><parameter name="rootType" type="System.Type" valueType="false" /><parameter name="cfg" type="NHibernate.Cfg.Configuration" valueType="false" /></method><event name="OnRootTypeRegistered" id="E:Castle.ActiveRecord.Framework.ISessionFactoryHolder.OnRootTypeRegistered" access="Public" contract="Abstract" type="Castle.ActiveRecord.Framework.RootTypeHandler" valueType="false" multicast="true"><documentation><summary> Raised when a new root type is registered. A new root type creates a new <c>ISessionFactory</c>
            </summary></documentation></event></interface><delegate name="RootTypeHandler" id="T:Castle.ActiveRecord.Framework.RootTypeHandler" access="Public" returnType="System.Void" valueType="true"><attribute name="System.SerializableAttribute" /><parameter name="sender" type="System.Object" valueType="false" /><parameter name="rootType" type="System.Type" valueType="false" /></delegate></namespace><namespace name="Castle.ActiveRecord.Framework.Config"><class name="InPlaceConfigurationSource" id="T:Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource" access="Public"><documentation><summary> Usefull for test cases. </summary></documentation><derivedBy id="T:Castle.ActiveRecord.Framework.Config.XmlConfigurationSource" /><implements type="Castle.ActiveRecord.Framework.IConfigurationSource" /><constructor name=".ctor" id="M:Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource.#ctor" access="Public" contract="Normal"><documentation><summary>Initializes a new instance of the <see cref="T:Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource" /> class.</summary></documentation></constructor><property name="ThreadScopeInfoImplementation" id="P:Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource.ThreadScopeInfoImplementation" access="Public" contract="Normal" type="System.Type" valueType="false" get="true" set="true"><implements name="ThreadScopeInfoImplementation" id="P:Castle.ActiveRecord.Framework.IConfigurationSource.ThreadScopeInfoImplementation" interface="IConfigurationSource" interfaceId="T:Castle.ActiveRecord.Framework.IConfigurationSource" declaringType="Castle.ActiveRecord.Framework.IConfigurationSource" /></property><property name="SessionFactoryHolderImplementation" id="P:Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource.SessionFactoryHolderImplementation" access="Public" contract="Normal" type="System.Type" valueType="false" get="true" set="true"><implements name="SessionFactoryHolderImplementation" id="P:Castle.ActiveRecord.Framework.IConfigurationSource.SessionFactoryHolderImplementation" interface="IConfigurationSource" interfaceId="T:Castle.ActiveRecord.Framework.IConfigurationSource" declaringType="Castle.ActiveRecord.Framework.IConfigurationSource" /></property><property name="NamingStrategyImplementation" id="P:Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource.NamingStrategyImplementation" access="Public" contract="Normal" type="System.Type" valueType="false" get="true" set="true"><implements name="NamingStrategyImplementation" id="P:Castle.ActiveRecord.Framework.IConfigurationSource.NamingStrategyImplementation" interface="IConfigurationSource" interfaceId="T:Castle.ActiveRecord.Framework.IConfigurationSource" declaringType="Castle.ActiveRecord.Framework.IConfigurationSource" /></property><property name="Debug" id="P:Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource.Debug" access="Public" contract="Final" type="System.Boolean" valueType="true" get="true" set="false"><implements name="Debug" id="P:Castle.ActiveRecord.Framework.IConfigurationSource.Debug" interface="IConfigurationSource" interfaceId="T:Castle.ActiveRecord.Framework.IConfigurationSource" declaringType="Castle.ActiveRecord.Framework.IConfigurationSource" /></property><method name="GetConfiguration" id="M:Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource.GetConfiguration(System.Type)" access="Public" contract="Final" returnType="Castle.Core.Configuration.IConfiguration" valueType="false"><parameter name="type" type="System.Type" valueType="false" /><implements name="GetConfiguration" id="M:Castle.ActiveRecord.Framework.IConfigurationSource.GetConfiguration(System.Type)" interface="IConfigurationSource" interfaceId="T:Castle.ActiveRecord.Framework.IConfigurationSource" declaringType="Castle.ActiveRecord.Framework.IConfigurationSource" /></method><method name="Finalize" id="M:Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="Add" id="M:Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource.Add(System.Type,System.Collections.IDictionary)" access="Public" contract="Normal" returnType="System.Void" valueType="true" overload="1"><parameter name="type" type="System.Type" valueType="false" /><parameter name="properties" type="System.Collections.IDictionary" valueType="false" /></method><method name="Add" id="M:Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource.Add(System.Type,Castle.Core.Configuration.IConfiguration)" access="Public" contract="Normal" returnType="System.Void" valueType="true" overload="2"><parameter name="type" type="System.Type" valueType="false" /><parameter name="config" type="Castle.Core.Configuration.IConfiguration" valueType="false" /></method><method name="SetUpThreadInfoType" id="M:Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource.SetUpThreadInfoType(System.Boolean,System.String)" access="Family" contract="Normal" returnType="System.Void" valueType="true"><parameter name="isWeb" type="System.Boolean" valueType="true" /><parameter name="customType" type="System.String" valueType="false" /></method><method name="SetUpSessionFactoryHolderType" id="M:Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource.SetUpSessionFactoryHolderType(System.String)" access="Family" contract="Normal" returnType="System.Void" valueType="true"><parameter name="customType" type="System.String" valueType="false" /></method><method name="SetUpNamingStrategyType" id="M:Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource.SetUpNamingStrategyType(System.String)" access="Family" contract="Normal" returnType="System.Void" valueType="true"><parameter name="customType" type="System.String" valueType="false" /></method><method name="SetDebugFlag" id="M:Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource.SetDebugFlag(System.Boolean)" access="Family" contract="Normal" returnType="System.Void" valueType="true"><parameter name="isDebug" type="System.Boolean" valueType="true" /></method><method name="GetType" id="M:Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method></class><class name="XmlConfigurationSource" id="T:Castle.ActiveRecord.Framework.Config.XmlConfigurationSource" access="Public" baseType="InPlaceConfigurationSource"><documentation><summary> Source of configuration based on Xml source like files, streams or readers. </summary></documentation><base name="InPlaceConfigurationSource" id="T:Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource" type="Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource" /><derivedBy id="T:Castle.ActiveRecord.Framework.Config.ActiveRecordSectionHandler" /><implements type="Castle.ActiveRecord.Framework.IConfigurationSource" inherited="true" /><constructor name=".ctor" id="M:Castle.ActiveRecord.Framework.Config.XmlConfigurationSource.#ctor" access="Family" contract="Normal" overload="1"><documentation><summary>Initializes a new instance of the <see cref="T:Castle.ActiveRecord.Framework.Config.XmlConfigurationSource" /> class.</summary></documentation></constructor><constructor name=".ctor" id="M:Castle.ActiveRecord.Framework.Config.XmlConfigurationSource.#ctor(System.String)" access="Public" contract="Normal" overload="2"><parameter name="xmlFileName" type="System.String" valueType="false" /></constructor><constructor name=".ctor" id="M:Castle.ActiveRecord.Framework.Config.XmlConfigurationSource.#ctor(System.IO.Stream)" access="Public" contract="Normal" overload="3"><parameter name="stream" type="System.IO.Stream" valueType="false" /></constructor><constructor name=".ctor" id="M:Castle.ActiveRecord.Framework.Config.XmlConfigurationSource.#ctor(System.IO.TextReader)" access="Public" contract="Normal" overload="4"><parameter name="reader" type="System.IO.TextReader" valueType="false" /></constructor><property name="ThreadScopeInfoImplementation" id="P:Castle.ActiveRecord.Framework.Config.XmlConfigurationSource.ThreadScopeInfoImplementation" access="Public" contract="Normal" type="System.Type" valueType="false" declaringType="Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource" get="true" set="true"><documentation><summary></summary></documentation><implements name="ThreadScopeInfoImplementation" id="P:Castle.ActiveRecord.Framework.IConfigurationSource.ThreadScopeInfoImplementation" interface="IConfigurationSource" interfaceId="T:Castle.ActiveRecord.Framework.IConfigurationSource" declaringType="Castle.ActiveRecord.Framework.IConfigurationSource" /></property><property name="SessionFactoryHolderImplementation" id="P:Castle.ActiveRecord.Framework.Config.XmlConfigurationSource.SessionFactoryHolderImplementation" access="Public" contract="Normal" type="System.Type" valueType="false" declaringType="Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource" get="true" set="true"><documentation><summary></summary></documentation><implements name="SessionFactoryHolderImplementation" id="P:Castle.ActiveRecord.Framework.IConfigurationSource.SessionFactoryHolderImplementation" interface="IConfigurationSource" interfaceId="T:Castle.ActiveRecord.Framework.IConfigurationSource" declaringType="Castle.ActiveRecord.Framework.IConfigurationSource" /></property><property name="NamingStrategyImplementation" id="P:Castle.ActiveRecord.Framework.Config.XmlConfigurationSource.NamingStrategyImplementation" access="Public" contract="Normal" type="System.Type" valueType="false" declaringType="Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource" get="true" set="true"><documentation><summary></summary></documentation><implements name="NamingStrategyImplementation" id="P:Castle.ActiveRecord.Framework.IConfigurationSource.NamingStrategyImplementation" interface="IConfigurationSource" interfaceId="T:Castle.ActiveRecord.Framework.IConfigurationSource" declaringType="Castle.ActiveRecord.Framework.IConfigurationSource" /></property><property name="Debug" id="P:Castle.ActiveRecord.Framework.Config.XmlConfigurationSource.Debug" access="Public" contract="Final" type="System.Boolean" valueType="true" declaringType="Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource" get="true" set="false"><documentation><summary></summary></documentation><implements name="Debug" id="P:Castle.ActiveRecord.Framework.IConfigurationSource.Debug" interface="IConfigurationSource" interfaceId="T:Castle.ActiveRecord.Framework.IConfigurationSource" declaringType="Castle.ActiveRecord.Framework.IConfigurationSource" /></property><method name="GetConfiguration" id="M:Castle.ActiveRecord.Framework.Config.XmlConfigurationSource.GetConfiguration(System.Type)" access="Public" contract="Final" returnType="Castle.Core.Configuration.IConfiguration" valueType="false" declaringType="Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource"><documentation><summary></summary></documentation><parameter name="type" type="System.Type" valueType="false" /><implements name="GetConfiguration" id="M:Castle.ActiveRecord.Framework.IConfigurationSource.GetConfiguration(System.Type)" interface="IConfigurationSource" interfaceId="T:Castle.ActiveRecord.Framework.IConfigurationSource" declaringType="Castle.ActiveRecord.Framework.IConfigurationSource" /></method><method name="Finalize" id="M:Castle.ActiveRecord.Framework.Config.XmlConfigurationSource.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Castle.ActiveRecord.Framework.Config.XmlConfigurationSource.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Castle.ActiveRecord.Framework.Config.XmlConfigurationSource.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Castle.ActiveRecord.Framework.Config.XmlConfigurationSource.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="PopulateSource" id="M:Castle.ActiveRecord.Framework.Config.XmlConfigurationSource.PopulateSource(System.Xml.XmlNode)" access="Family" contract="Normal" returnType="System.Void" valueType="true"><parameter name="section" type="System.Xml.XmlNode" valueType="false" /></method><method name="BuildProperties" id="M:Castle.ActiveRecord.Framework.Config.XmlConfigurationSource.BuildProperties(System.Xml.XmlNode)" access="Family" contract="Normal" returnType="System.Collections.IDictionary" valueType="false"><parameter name="node" type="System.Xml.XmlNode" valueType="false" /></method><method name="Add" id="M:Castle.ActiveRecord.Framework.Config.XmlConfigurationSource.Add(System.Type,System.Collections.IDictionary)" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource" overload="1"><documentation><summary></summary></documentation><parameter name="type" type="System.Type" valueType="false" /><parameter name="properties" type="System.Collections.IDictionary" valueType="false" /></method><method name="Add" id="M:Castle.ActiveRecord.Framework.Config.XmlConfigurationSource.Add(System.Type,Castle.Core.Configuration.IConfiguration)" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource" overload="2"><documentation><summary></summary></documentation><parameter name="type" type="System.Type" valueType="false" /><parameter name="config" type="Castle.Core.Configuration.IConfiguration" valueType="false" /></method><method name="SetUpThreadInfoType" id="M:Castle.ActiveRecord.Framework.Config.XmlConfigurationSource.SetUpThreadInfoType(System.Boolean,System.String)" access="Family" contract="Normal" returnType="System.Void" valueType="true" declaringType="Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource"><documentation><summary></summary></documentation><parameter name="isWeb" type="System.Boolean" valueType="true" /><parameter name="customType" type="System.String" valueType="false" /></method><method name="SetUpSessionFactoryHolderType" id="M:Castle.ActiveRecord.Framework.Config.XmlConfigurationSource.SetUpSessionFactoryHolderType(System.String)" access="Family" contract="Normal" returnType="System.Void" valueType="true" declaringType="Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource"><documentation><summary></summary></documentation><parameter name="customType" type="System.String" valueType="false" /></method><method name="SetUpNamingStrategyType" id="M:Castle.ActiveRecord.Framework.Config.XmlConfigurationSource.SetUpNamingStrategyType(System.String)" access="Family" contract="Normal" returnType="System.Void" valueType="true" declaringType="Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource"><documentation><summary></summary></documentation><parameter name="customType" type="System.String" valueType="false" /></method><method name="SetDebugFlag" id="M:Castle.ActiveRecord.Framework.Config.XmlConfigurationSource.SetDebugFlag(System.Boolean)" access="Family" contract="Normal" returnType="System.Void" valueType="true" declaringType="Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource"><documentation><summary></summary></documentation><parameter name="isDebug" type="System.Boolean" valueType="true" /></method><method name="GetType" id="M:Castle.ActiveRecord.Framework.Config.XmlConfigurationSource.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Castle.ActiveRecord.Framework.Config.XmlConfigurationSource.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method></class><class name="ActiveRecordSectionHandler" id="T:Castle.ActiveRecord.Framework.Config.ActiveRecordSectionHandler" access="Public" baseType="XmlConfigurationSource"><documentation><summary> Reads the configuration from a entry 'activerecord' in the xml associated with the AppDomain </summary></documentation><base name="XmlConfigurationSource" id="T:Castle.ActiveRecord.Framework.Config.XmlConfigurationSource" type="Castle.ActiveRecord.Framework.Config.XmlConfigurationSource"><base name="InPlaceConfigurationSource" id="T:Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource" type="Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource" /></base><implements type="Castle.ActiveRecord.Framework.IConfigurationSource" inherited="true" /><implements type="System.Configuration.IConfigurationSectionHandler" /><constructor name=".ctor" id="M:Castle.ActiveRecord.Framework.Config.ActiveRecordSectionHandler.#ctor" access="Public" contract="Normal"><documentation><summary>Initializes a new instance of the <see cref="T:Castle.ActiveRecord.Framework.Config.ActiveRecordSectionHandler" /> class.</summary></documentation></constructor><property name="Instance" id="P:Castle.ActiveRecord.Framework.Config.ActiveRecordSectionHandler.Instance" access="Public" contract="Static" type="Castle.ActiveRecord.Framework.IConfigurationSource" valueType="false" get="true" set="false" /><property name="ThreadScopeInfoImplementation" id="P:Castle.ActiveRecord.Framework.Config.ActiveRecordSectionHandler.ThreadScopeInfoImplementation" access="Public" contract="Normal" type="System.Type" valueType="false" declaringType="Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource" get="true" set="true"><documentation><summary></summary></documentation><implements name="ThreadScopeInfoImplementation" id="P:Castle.ActiveRecord.Framework.IConfigurationSource.ThreadScopeInfoImplementation" interface="IConfigurationSource" interfaceId="T:Castle.ActiveRecord.Framework.IConfigurationSource" declaringType="Castle.ActiveRecord.Framework.IConfigurationSource" /></property><property name="SessionFactoryHolderImplementation" id="P:Castle.ActiveRecord.Framework.Config.ActiveRecordSectionHandler.SessionFactoryHolderImplementation" access="Public" contract="Normal" type="System.Type" valueType="false" declaringType="Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource" get="true" set="true"><documentation><summary></summary></documentation><implements name="SessionFactoryHolderImplementation" id="P:Castle.ActiveRecord.Framework.IConfigurationSource.SessionFactoryHolderImplementation" interface="IConfigurationSource" interfaceId="T:Castle.ActiveRecord.Framework.IConfigurationSource" declaringType="Castle.ActiveRecord.Framework.IConfigurationSource" /></property><property name="NamingStrategyImplementation" id="P:Castle.ActiveRecord.Framework.Config.ActiveRecordSectionHandler.NamingStrategyImplementation" access="Public" contract="Normal" type="System.Type" valueType="false" declaringType="Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource" get="true" set="true"><documentation><summary></summary></documentation><implements name="NamingStrategyImplementation" id="P:Castle.ActiveRecord.Framework.IConfigurationSource.NamingStrategyImplementation" interface="IConfigurationSource" interfaceId="T:Castle.ActiveRecord.Framework.IConfigurationSource" declaringType="Castle.ActiveRecord.Framework.IConfigurationSource" /></property><property name="Debug" id="P:Castle.ActiveRecord.Framework.Config.ActiveRecordSectionHandler.Debug" access="Public" contract="Final" type="System.Boolean" valueType="true" declaringType="Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource" get="true" set="false"><documentation><summary></summary></documentation><implements name="Debug" id="P:Castle.ActiveRecord.Framework.IConfigurationSource.Debug" interface="IConfigurationSource" interfaceId="T:Castle.ActiveRecord.Framework.IConfigurationSource" declaringType="Castle.ActiveRecord.Framework.IConfigurationSource" /></property><method name="Create" id="M:Castle.ActiveRecord.Framework.Config.ActiveRecordSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)" access="Public" contract="Final" returnType="System.Object" valueType="false"><parameter name="parent" type="System.Object" valueType="false" /><parameter name="configContext" type="System.Object" valueType="false" /><parameter name="section" type="System.Xml.XmlNode" valueType="false" /><implements name="Create" id="M:System.Configuration.IConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)" interface="IConfigurationSectionHandler" interfaceId="T:System.Configuration.IConfigurationSectionHandler" declaringType="System.Configuration.IConfigurationSectionHandler" /></method><method name="GetConfiguration" id="M:Castle.ActiveRecord.Framework.Config.ActiveRecordSectionHandler.GetConfiguration(System.Type)" access="Public" contract="Final" returnType="Castle.Core.Configuration.IConfiguration" valueType="false" declaringType="Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource"><documentation><summary></summary></documentation><parameter name="type" type="System.Type" valueType="false" /><implements name="GetConfiguration" id="M:Castle.ActiveRecord.Framework.IConfigurationSource.GetConfiguration(System.Type)" interface="IConfigurationSource" interfaceId="T:Castle.ActiveRecord.Framework.IConfigurationSource" declaringType="Castle.ActiveRecord.Framework.IConfigurationSource" /></method><method name="Finalize" id="M:Castle.ActiveRecord.Framework.Config.ActiveRecordSectionHandler.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Castle.ActiveRecord.Framework.Config.ActiveRecordSectionHandler.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Castle.ActiveRecord.Framework.Config.ActiveRecordSectionHandler.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Castle.ActiveRecord.Framework.Config.ActiveRecordSectionHandler.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="PopulateSource" id="M:Castle.ActiveRecord.Framework.Config.ActiveRecordSectionHandler.PopulateSource(System.Xml.XmlNode)" access="Family" contract="Normal" returnType="System.Void" valueType="true" declaringType="Castle.ActiveRecord.Framework.Config.XmlConfigurationSource"><documentation><summary></summary></documentation><parameter name="section" type="System.Xml.XmlNode" valueType="false" /></method><method name="BuildProperties" id="M:Castle.ActiveRecord.Framework.Config.ActiveRecordSectionHandler.BuildProperties(System.Xml.XmlNode)" access="Family" contract="Normal" returnType="System.Collections.IDictionary" valueType="false" declaringType="Castle.ActiveRecord.Framework.Config.XmlConfigurationSource"><documentation><summary></summary></documentation><parameter name="node" type="System.Xml.XmlNode" valueType="false" /></method><method name="Add" id="M:Castle.ActiveRecord.Framework.Config.ActiveRecordSectionHandler.Add(System.Type,System.Collections.IDictionary)" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource" overload="1"><documentation><summary></summary></documentation><parameter name="type" type="System.Type" valueType="false" /><parameter name="properties" type="System.Collections.IDictionary" valueType="false" /></method><method name="Add" id="M:Castle.ActiveRecord.Framework.Config.ActiveRecordSectionHandler.Add(System.Type,Castle.Core.Configuration.IConfiguration)" access="Public" contract="Normal" returnType="System.Void" valueType="true" declaringType="Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource" overload="2"><documentation><summary></summary></documentation><parameter name="type" type="System.Type" valueType="false" /><parameter name="config" type="Castle.Core.Configuration.IConfiguration" valueType="false" /></method><method name="SetUpThreadInfoType" id="M:Castle.ActiveRecord.Framework.Config.ActiveRecordSectionHandler.SetUpThreadInfoType(System.Boolean,System.String)" access="Family" contract="Normal" returnType="System.Void" valueType="true" declaringType="Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource"><documentation><summary></summary></documentation><parameter name="isWeb" type="System.Boolean" valueType="true" /><parameter name="customType" type="System.String" valueType="false" /></method><method name="SetUpSessionFactoryHolderType" id="M:Castle.ActiveRecord.Framework.Config.ActiveRecordSectionHandler.SetUpSessionFactoryHolderType(System.String)" access="Family" contract="Normal" returnType="System.Void" valueType="true" declaringType="Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource"><documentation><summary></summary></documentation><parameter name="customType" type="System.String" valueType="false" /></method><method name="SetUpNamingStrategyType" id="M:Castle.ActiveRecord.Framework.Config.ActiveRecordSectionHandler.SetUpNamingStrategyType(System.String)" access="Family" contract="Normal" returnType="System.Void" valueType="true" declaringType="Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource"><documentation><summary></summary></documentation><parameter name="customType" type="System.String" valueType="false" /></method><method name="SetDebugFlag" id="M:Castle.ActiveRecord.Framework.Config.ActiveRecordSectionHandler.SetDebugFlag(System.Boolean)" access="Family" contract="Normal" returnType="System.Void" valueType="true" declaringType="Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource"><documentation><summary></summary></documentation><parameter name="isDebug" type="System.Boolean" valueType="true" /></method><method name="GetType" id="M:Castle.ActiveRecord.Framework.Config.ActiveRecordSectionHandler.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Castle.ActiveRecord.Framework.Config.ActiveRecordSectionHandler.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method></class></namespace><namespace name="Castle.ActiveRecord.Framework.Internal"><class name="ActiveRecordModel" id="T:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel" access="Public"><attribute name="System.SerializableAttribute" /><implements type="Castle.ActiveRecord.Framework.Internal.IModelNode" /><implements type="Castle.ActiveRecord.Framework.Internal.IVisitable" /><constructor name=".ctor" id="M:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.#ctor(System.Type)" access="Public" contract="Normal"><parameter name="type" type="System.Type" valueType="false" /></constructor><field name="type2Model" id="F:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.type2Model" access="FamilyOrAssembly" contract="Static" type="System.Collections.IDictionary" valueType="false" /><field name="isDebug" id="F:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.isDebug" access="FamilyOrAssembly" contract="Static" type="System.Boolean" valueType="true" /><property name="Parent" id="P:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.Parent" access="Public" contract="Normal" type="Castle.ActiveRecord.Framework.Internal.ActiveRecordModel" valueType="false" get="true" set="true" /><property name="Type" id="P:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.Type" access="Public" contract="Normal" type="System.Type" valueType="false" get="true" set="false" /><property name="IsJoinedSubClassBase" id="P:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.IsJoinedSubClassBase" access="Public" contract="Normal" type="System.Boolean" valueType="true" get="true" set="true" /><property name="IsDiscriminatorBase" id="P:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.IsDiscriminatorBase" access="Public" contract="Normal" type="System.Boolean" valueType="true" get="true" set="true" /><property name="IsDiscriminatorSubClass" id="P:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.IsDiscriminatorSubClass" access="Public" contract="Normal" type="System.Boolean" valueType="true" get="true" set="true" /><property name="IsJoinedSubClass" id="P:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.IsJoinedSubClass" access="Public" contract="Normal" type="System.Boolean" valueType="true" get="true" set="true" /><property name="IsNestedType" id="P:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.IsNestedType" access="Public" contract="Normal" type="System.Boolean" valueType="true" get="true" set="true" /><property name="ActiveRecordAtt" id="P:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.ActiveRecordAtt" access="Public" contract="Normal" type="Castle.ActiveRecord.ActiveRecordAttribute" valueType="false" get="true" set="true" /><property name="Key" id="P:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.Key" access="Public" contract="Normal" type="Castle.ActiveRecord.Framework.Internal.KeyModel" valueType="false" get="true" set="true"><documentation><summary> Used only by joined subclasses </summary></documentation></property><property name="Timestamp" id="P:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.Timestamp" access="Public" contract="Normal" type="Castle.ActiveRecord.Framework.Internal.TimestampModel" valueType="false" get="true" set="true" /><property name="Version" id="P:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.Version" access="Public" contract="Normal" type="Castle.ActiveRecord.Framework.Internal.VersionModel" valueType="false" get="true" set="true" /><property name="Imports" id="P:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.Imports" access="Public" contract="Normal" type="System.Collections.IList" valueType="false" get="true" set="false" /><property name="Properties" id="P:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.Properties" access="Public" contract="Normal" type="System.Collections.IList" valueType="false" get="true" set="false" /><property name="Fields" id="P:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.Fields" access="Public" contract="Normal" type="System.Collections.IList" valueType="false" get="true" set="false" /><property name="HasManyToAny" id="P:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.HasManyToAny" access="Public" contract="Normal" type="System.Collections.IList" valueType="false" get="true" set="false" /><property name="Anys" id="P:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.Anys" access="Public" contract="Normal" type="System.Collections.IList" valueType="false" get="true" set="false" /><property name="Classes" id="P:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.Classes" access="Public" contract="Normal" type="System.Collections.IList" valueType="false" get="true" set="false" /><property name="JoinedClasses" id="P:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.JoinedClasses" access="Public" contract="Normal" type="System.Collections.IList" valueType="false" get="true" set="false" /><property name="Components" id="P:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.Components" access="Public" contract="Normal" type="System.Collections.IList" valueType="false" get="true" set="false" /><property name="BelongsTo" id="P:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.BelongsTo" access="Public" contract="Normal" type="System.Collections.IList" valueType="false" get="true" set="false" /><property name="HasMany" id="P:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.HasMany" access="Public" contract="Normal" type="System.Collections.IList" valueType="false" get="true" set="false" /><property name="HasAndBelongsToMany" id="P:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.HasAndBelongsToMany" access="Public" contract="Normal" type="System.Collections.IList" valueType="false" get="true" set="false" /><property name="OneToOnes" id="P:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.OneToOnes" access="Public" contract="Normal" type="System.Collections.IList" valueType="false" get="true" set="false" /><property name="CollectionIDs" id="P:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.CollectionIDs" access="Public" contract="Normal" type="System.Collections.IList" valueType="false" get="true" set="false" /><property name="PrimaryKey" id="P:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.PrimaryKey" access="Public" contract="Normal" type="Castle.ActiveRecord.Framework.Internal.PrimaryKeyModel" valueType="false" get="true" set="true"><documentation><summary> For unique Primary keys </summary></documentation></property><property name="CompositeKey" id="P:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.CompositeKey" access="Public" contract="Normal" type="Castle.ActiveRecord.Framework.Internal.CompositeKeyModel" valueType="false" get="true" set="true"><documentation><summary> For Composite Primary keys </summary></documentation></property><property name="Hilos" id="P:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.Hilos" access="Public" contract="Normal" type="System.Collections.IList" valueType="false" get="true" set="false" /><property name="NotMappedProperties" id="P:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.NotMappedProperties" access="Public" contract="Normal" type="System.Collections.IList" valueType="false" get="true" set="false" /><property name="Validators" id="P:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.Validators" access="Public" contract="Normal" type="System.Collections.IList" valueType="false" get="true" set="false" /><property name="UseAutoImport" id="P:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.UseAutoImport" access="Public" contract="Normal" type="System.Boolean" valueType="true" get="true" set="false" /><method name="Accept" id="M:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.Accept(Castle.ActiveRecord.Framework.Internal.IVisitor)" access="Public" contract="Final" returnType="System.Void" valueType="true"><parameter name="visitor" type="Castle.ActiveRecord.Framework.Internal.IVisitor" valueType="false" /><implements name="Accept" id="M:Castle.ActiveRecord.Framework.Internal.IVisitable.Accept(Castle.ActiveRecord.Framework.Internal.IVisitor)" interface="IVisitable" interfaceId="T:Castle.ActiveRecord.Framework.Internal.IVisitable" declaringType="Castle.ActiveRecord.Framework.Internal.IVisitable" /></method><method name="Finalize" id="M:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="GetModel" id="M:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.GetModel(System.Type)" access="Public" contract="Static" returnType="Castle.ActiveRecord.Framework.Internal.ActiveRecordModel" valueType="false"><documentation><summary> Gets the <see cref="T:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel" /> for a given ActiveRecord class. </summary></documentation><parameter name="arType" type="System.Type" valueType="false" /></method><method name="GetModels" id="M:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.GetModels" access="Public" contract="Static" returnType="Castle.ActiveRecord.Framework.Internal.ActiveRecordModel[]" valueType="false"><documentation><summary> Gets an array containing the <see cref="T:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel" /> for every registered ActiveRecord class. </summary></documentation></method><method name="GetType" id="M:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Castle.ActiveRecord.Framework.Internal.ActiveRecordModel.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method></class><class name="AnyModel" id="T:Castle.ActiveRecord.Framework.Internal.AnyModel" access="Public"><attribute name="System.SerializableAttribute" /><implements type="Castle.ActiveRecord.Framework.Internal.IModelNode" /><implements type="Castle.ActiveRecord.Framework.Internal.IVisitable" /><constructor name=".ctor" id="M:Castle.ActiveRecord.Framework.Internal.AnyModel.#ctor(System.Reflection.PropertyInfo,Castle.ActiveRecord.AnyAttribute)" access="Public" contract="Normal"><parameter name="prop" type="System.Reflection.PropertyInfo" valueType="false" /><parameter name="anyAtt" type="Castle.ActiveRecord.AnyAttribute" valueType="false" /></constructor><property name="Property" id="P:Castle.ActiveRecord.Framework.Internal.AnyModel.Property" access="Public" contract="Normal" type="System.Reflection.PropertyInfo" valueType="false" get="true" set="false" /><property name="AnyAtt" id="P:Castle.ActiveRecord.Framework.Internal.AnyModel.AnyAtt" access="Public" contract="Normal" type="Castle.ActiveRecord.AnyAttribute" valueType="false" get="true" set="false" /><property name="MetaValues" id="P:Castle.ActiveRecord.Framework.Internal.AnyModel.MetaValues" access="Public" contract="Normal" type="System.Collections.IList" valueType="false" get="true" set="true" /><method name="Accept" id="M:Castle.ActiveRecord.Framework.Internal.AnyModel.Accept(Castle.ActiveRecord.Framework.Internal.IVisitor)" access="Public" contract="Final" returnType="System.Void" valueType="true"><parameter name="visitor" type="Castle.ActiveRecord.Framework.Internal.IVisitor" valueType="false" /><implements name="Accept" id="M:Castle.ActiveRecord.Framework.Internal.IVisitable.Accept(Castle.ActiveRecord.Framework.Internal.IVisitor)" interface="IVisitable" interfaceId="T:Castle.ActiveRecord.Framework.Internal.IVisitable" declaringType="Castle.ActiveRecord.Framework.Internal.IVisitable" /></method><method name="Finalize" id="M:Castle.ActiveRecord.Framework.Internal.AnyModel.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Castle.ActiveRecord.Framework.Internal.AnyModel.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Castle.ActiveRecord.Framework.Internal.AnyModel.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Castle.ActiveRecord.Framework.Internal.AnyModel.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="GetType" id="M:Castle.ActiveRecord.Framework.Internal.AnyModel.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Castle.ActiveRecord.Framework.Internal.AnyModel.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method></class><class name="BelongsToModel" id="T:Castle.ActiveRecord.Framework.Internal.BelongsToModel" access="Public"><attribute name="System.SerializableAttribute" /><implements type="Castle.ActiveRecord.Framework.Internal.IModelNode" /><implements type="Castle.ActiveRecord.Framework.Internal.IVisitable" /><constructor name=".ctor" id="M:Castle.ActiveRecord.Framework.Internal.BelongsToModel.#ctor(System.Reflection.PropertyInfo,Castle.ActiveRecord.BelongsToAttribute)" access="Public" contract="Normal"><parameter name="propInfo" type="System.Reflection.PropertyInfo" valueType="false" /><parameter name="belongsToAtt" type="Castle.ActiveRecord.BelongsToAttribute" valueType="false" /></constructor><property name="Property" id="P:Castle.ActiveRecord.Framework.Internal.BelongsToModel.Property" access="Public" contract="Normal" type="System.Reflection.PropertyInfo" valueType="false" get="true" set="false" /><property name="BelongsToAtt" id="P:Castle.ActiveRecord.Framework.Internal.BelongsToModel.BelongsToAtt" access="Public" contract="Normal" type="Castle.ActiveRecord.BelongsToAttribute" valueType="false" get="true" set="false" /><method name="Accept" id="M:Castle.ActiveRecord.Framework.Internal.BelongsToModel.Accept(Castle.ActiveRecord.Framework.Internal.IVisitor)" access="Public" contract="Final" returnType="System.Void" valueType="true"><parameter name="visitor" type="Castle.ActiveRecord.Framework.Internal.IVisitor" valueType="false" /><implements name="Accept" id="M:Castle.ActiveRecord.Framework.Internal.IVisitable.Accept(Castle.ActiveRecord.Framework.Internal.IVisitor)" interface="IVisitable" interfaceId="T:Castle.ActiveRecord.Framework.Internal.IVisitable" declaringType="Castle.ActiveRecord.Framework.Internal.IVisitable" /></method><method name="Finalize" id="M:Castle.ActiveRecord.Framework.Internal.BelongsToModel.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Castle.ActiveRecord.Framework.Internal.BelongsToModel.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Castle.ActiveRecord.Framework.Internal.BelongsToModel.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Castle.ActiveRecord.Framework.Internal.BelongsToModel.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="GetType" id="M:Castle.ActiveRecord.Framework.Internal.BelongsToModel.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Castle.ActiveRecord.Framework.Internal.BelongsToModel.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method></class><class name="CollectionIDModel" id="T:Castle.ActiveRecord.Framework.Internal.CollectionIDModel" access="Public"><attribute name="System.SerializableAttribute" /><implements type="Castle.ActiveRecord.Framework.Internal.IModelNode" /><implements type="Castle.ActiveRecord.Framework.Internal.IVisitable" /><constructor name=".ctor" id="M:Castle.ActiveRecord.Framework.Internal.CollectionIDModel.#ctor(System.Reflection.PropertyInfo,Castle.ActiveRecord.CollectionIDAttribute)" access="Public" contract="Normal"><parameter name="propInfo" type="System.Reflection.PropertyInfo" valueType="false" /><parameter name="collAtt" type="Castle.ActiveRecord.CollectionIDAttribute" valueType="false" /></constructor><property name="Property" id="P:Castle.ActiveRecord.Framework.Internal.CollectionIDModel.Property" access="Public" contract="Normal" type="System.Reflection.PropertyInfo" valueType="false" get="true" set="false" /><property name="CollectionIDAtt" id="P:Castle.ActiveRecord.Framework.Internal.CollectionIDModel.CollectionIDAtt" access="Public" contract="Normal" type="Castle.ActiveRecord.CollectionIDAttribute" valueType="false" get="true" set="false" /><property name="Hilo" id="P:Castle.ActiveRecord.Framework.Internal.CollectionIDModel.Hilo" access="Public" contract="Normal" type="Castle.ActiveRecord.Framework.Internal.HiloModel" valueType="false" get="true" set="true" /><method name="Accept" id="M:Castle.ActiveRecord.Framework.Internal.CollectionIDModel.Accept(Castle.ActiveRecord.Framework.Internal.IVisitor)" access="Public" contract="Final" returnType="System.Void" valueType="true"><parameter name="visitor" type="Castle.ActiveRecord.Framework.Internal.IVisitor" valueType="false" /><implements name="Accept" id="M:Castle.ActiveRecord.Framework.Internal.IVisitable.Accept(Castle.ActiveRecord.Framework.Internal.IVisitor)" interface="IVisitable" interfaceId="T:Castle.ActiveRecord.Framework.Internal.IVisitable" declaringType="Castle.ActiveRecord.Framework.Internal.IVisitable" /></method><method name="Finalize" id="M:Castle.ActiveRecord.Framework.Internal.CollectionIDModel.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Castle.ActiveRecord.Framework.Internal.CollectionIDModel.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Castle.ActiveRecord.Framework.Internal.CollectionIDModel.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Castle.ActiveRecord.Framework.Internal.CollectionIDModel.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="GetType" id="M:Castle.ActiveRecord.Framework.Internal.CollectionIDModel.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Castle.ActiveRecord.Framework.Internal.CollectionIDModel.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method></class><class name="CompositeKeyModel" id="T:Castle.ActiveRecord.Framework.Internal.CompositeKeyModel" access="Public"><attribute name="System.SerializableAttribute" /><implements type="Castle.ActiveRecord.Framework.Internal.IModelNode" /><implements type="Castle.ActiveRecord.Framework.Internal.IVisitable" /><constructor name=".ctor" id="M:Castle.ActiveRecord.Framework.Internal.CompositeKeyModel.#ctor(System.Reflection.PropertyInfo,Castle.ActiveRecord.CompositeKeyAttribute)" access="Public" contract="Normal"><parameter name="propInfo" type="System.Reflection.PropertyInfo" valueType="false" /><parameter name="pkAtt" type="Castle.ActiveRecord.CompositeKeyAttribute" valueType="false" /></constructor><property name="Property" id="P:Castle.ActiveRecord.Framework.Internal.CompositeKeyModel.Property" access="Public" contract="Normal" type="System.Reflection.PropertyInfo" valueType="false" get="true" set="false" /><property name="CompositeKeyAtt" id="P:Castle.ActiveRecord.Framework.Internal.CompositeKeyModel.CompositeKeyAtt" access="Public" contract="Normal" type="Castle.ActiveRecord.CompositeKeyAttribute" valueType="false" get="true" set="false" /><method name="Accept" id="M:Castle.ActiveRecord.Framework.Internal.CompositeKeyModel.Accept(Castle.ActiveRecord.Framework.Internal.IVisitor)" access="Public" contract="Final" returnType="System.Void" valueType="true"><parameter name="visitor" type="Castle.ActiveRecord.Framework.Internal.IVisitor" valueType="false" /><implements name="Accept" id="M:Castle.ActiveRecord.Framework.Internal.IVisitable.Accept(Castle.ActiveRecord.Framework.Internal.IVisitor)" interface="IVisitable" interfaceId="T:Castle.ActiveRecord.Framework.Internal.IVisitable" declaringType="Castle.ActiveRecord.Framework.Internal.IVisitable" /></method><method name="Finalize" id="M:Castle.ActiveRecord.Framework.Internal.CompositeKeyModel.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Castle.ActiveRecord.Framework.Internal.CompositeKeyModel.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Castle.ActiveRecord.Framework.Internal.CompositeKeyModel.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Castle.ActiveRecord.Framework.Internal.CompositeKeyModel.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="GetType" id="M:Castle.ActiveRecord.Framework.Internal.CompositeKeyModel.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Castle.ActiveRecord.Framework.Internal.CompositeKeyModel.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method></class><class name="FieldModel" id="T:Castle.ActiveRecord.Framework.Internal.FieldModel" access="Public"><attribute name="System.SerializableAttribute" /><implements type="Castle.ActiveRecord.Framework.Internal.IModelNode" /><implements type="Castle.ActiveRecord.Framework.Internal.IVisitable" /><constructor name=".ctor" id="M:Castle.ActiveRecord.Framework.Internal.FieldModel.#ctor(System.Reflection.FieldInfo,Castle.ActiveRecord.FieldAttribute)" access="Public" contract="Normal"><parameter name="field" type="System.Reflection.FieldInfo" valueType="false" /><parameter name="att" type="Castle.ActiveRecord.FieldAttribute" valueType="false" /></constructor><property name="Field" id="P:Castle.ActiveRecord.Framework.Internal.FieldModel.Field" access="Public" contract="Normal" type="System.Reflection.FieldInfo" valueType="false" get="true" set="false" /><property name="FieldAtt" id="P:Castle.ActiveRecord.Framework.Internal.FieldModel.FieldAtt" access="Public" contract="Normal" type="Castle.ActiveRecord.FieldAttribute" valueType="false" get="true" set="false" /><method name="Accept" id="M:Castle.ActiveRecord.Framework.Internal.FieldModel.Accept(Castle.ActiveRecord.Framework.Internal.IVisitor)" access="Public" contract="Final" returnType="System.Void" valueType="true"><parameter name="visitor" type="Castle.ActiveRecord.Framework.Internal.IVisitor" valueType="false" /><implements name="Accept" id="M:Castle.ActiveRecord.Framework.Internal.IVisitable.Accept(Castle.ActiveRecord.Framework.Internal.IVisitor)" interface="IVisitable" interfaceId="T:Castle.ActiveRecord.Framework.Internal.IVisitable" declaringType="Castle.ActiveRecord.Framework.Internal.IVisitable" /></method><method name="Finalize" id="M:Castle.ActiveRecord.Framework.Internal.FieldModel.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Castle.ActiveRecord.Framework.Internal.FieldModel.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Castle.ActiveRecord.Framework.Internal.FieldModel.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Castle.ActiveRecord.Framework.Internal.FieldModel.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="GetType" id="M:Castle.ActiveRecord.Framework.Internal.FieldModel.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Castle.ActiveRecord.Framework.Internal.FieldModel.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method></class><class name="HasAndBelongsToManyModel" id="T:Castle.ActiveRecord.Framework.Internal.HasAndBelongsToManyModel" access="Public"><attribute name="System.SerializableAttribute" /><implements type="Castle.ActiveRecord.Framework.Internal.IModelNode" /><implements type="Castle.ActiveRecord.Framework.Internal.IVisitable" /><constructor name=".ctor" id="M:Castle.ActiveRecord.Framework.Internal.HasAndBelongsToManyModel.#ctor(System.Reflection.PropertyInfo,Castle.ActiveRecord.HasAndBelongsToManyAttribute)" access="Public" contract="Normal"><parameter name="propInfo" type="System.Reflection.PropertyInfo" valueType="false" /><parameter name="hasManyAtt" type="Castle.ActiveRecord.HasAndBelongsToManyAttribute" valueType="false" /></constructor><property name="Property" id="P:Castle.ActiveRecord.Framework.Internal.HasAndBelongsToManyModel.Property" access="Public" contract="Normal" type="System.Reflection.PropertyInfo" valueType="false" get="true" set="false" /><property name="HasManyAtt" id="P:Castle.ActiveRecord.Framework.Internal.HasAndBelongsToManyModel.HasManyAtt" access="Public" contract="Normal" type="Castle.ActiveRecord.HasAndBelongsToManyAttribute" valueType="false" get="true" set="false" /><property name="CollectionID" id="P:Castle.ActiveRecord.Framework.Internal.HasAndBelongsToManyModel.CollectionID" access="Public" contract="Normal" type="Castle.ActiveRecord.Framework.Internal.CollectionIDModel" valueType="false" get="true" set="true" /><method name="Accept" id="M:Castle.ActiveRecord.Framework.Internal.HasAndBelongsToManyModel.Accept(Castle.ActiveRecord.Framework.Internal.IVisitor)" access="Public" contract="Final" returnType="System.Void" valueType="true"><parameter name="visitor" type="Castle.ActiveRecord.Framework.Internal.IVisitor" valueType="false" /><implements name="Accept" id="M:Castle.ActiveRecord.Framework.Internal.IVisitable.Accept(Castle.ActiveRecord.Framework.Internal.IVisitor)" interface="IVisitable" interfaceId="T:Castle.ActiveRecord.Framework.Internal.IVisitable" declaringType="Castle.ActiveRecord.Framework.Internal.IVisitable" /></method><method name="Finalize" id="M:Castle.ActiveRecord.Framework.Internal.HasAndBelongsToManyModel.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Castle.ActiveRecord.Framework.Internal.HasAndBelongsToManyModel.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Castle.ActiveRecord.Framework.Internal.HasAndBelongsToManyModel.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Castle.ActiveRecord.Framework.Internal.HasAndBelongsToManyModel.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="GetType" id="M:Castle.ActiveRecord.Framework.Internal.HasAndBelongsToManyModel.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Castle.ActiveRecord.Framework.Internal.HasAndBelongsToManyModel.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method></class><class name="HasManyModel" id="T:Castle.ActiveRecord.Framework.Internal.HasManyModel" access="Public"><attribute name="System.SerializableAttribute" /><implements type="Castle.ActiveRecord.Framework.Internal.IModelNode" /><implements type="Castle.ActiveRecord.Framework.Internal.IVisitable" /><constructor name=".ctor" id="M:Castle.ActiveRecord.Framework.Internal.HasManyModel.#ctor(System.Reflection.PropertyInfo,Castle.ActiveRecord.HasManyAttribute)" access="Public" contract="Normal"><parameter name="propInfo" type="System.Reflection.PropertyInfo" valueType="false" /><parameter name="hasManyAtt" type="Castle.ActiveRecord.HasManyAttribute" valueType="false" /></constructor><property name="Property" id="P:Castle.ActiveRecord.Framework.Internal.HasManyModel.Property" access="Public" contract="Normal" type="System.Reflection.PropertyInfo" valueType="false" get="true" set="false" /><property name="HasManyAtt" id="P:Castle.ActiveRecord.Framework.Internal.HasManyModel.HasManyAtt" access="Public" contract="Normal" type="Castle.ActiveRecord.HasManyAttribute" valueType="false" get="true" set="false" /><method name="Accept" id="M:Castle.ActiveRecord.Framework.Internal.HasManyModel.Accept(Castle.ActiveRecord.Framework.Internal.IVisitor)" access="Public" contract="Final" returnType="System.Void" valueType="true"><parameter name="visitor" type="Castle.ActiveRecord.Framework.Internal.IVisitor" valueType="false" /><implements name="Accept" id="M:Castle.ActiveRecord.Framework.Internal.IVisitable.Accept(Castle.ActiveRecord.Framework.Internal.IVisitor)" interface="IVisitable" interfaceId="T:Castle.ActiveRecord.Framework.Internal.IVisitable" declaringType="Castle.ActiveRecord.Framework.Internal.IVisitable" /></method><method name="Finalize" id="M:Castle.ActiveRecord.Framework.Internal.HasManyModel.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Castle.ActiveRecord.Framework.Internal.HasManyModel.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Castle.ActiveRecord.Framework.Internal.HasManyModel.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Castle.ActiveRecord.Framework.Internal.HasManyModel.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="GetType" id="M:Castle.ActiveRecord.Framework.Internal.HasManyModel.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Castle.ActiveRecord.Framework.Internal.HasManyModel.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method></class><class name="HasManyToAnyModel" id="T:Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel" access="Public"><attribute name="System.SerializableAttribute" /><implements type="Castle.ActiveRecord.Framework.Internal.IModelNode" /><implements type="Castle.ActiveRecord.Framework.Internal.IVisitable" /><constructor name=".ctor" id="M:Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel.#ctor(System.Reflection.PropertyInfo,Castle.ActiveRecord.HasManyToAnyAttribute)" access="Public" contract="Normal"><parameter name="prop" type="System.Reflection.PropertyInfo" valueType="false" /><parameter name="hasManyToAnyAtt" type="Castle.ActiveRecord.HasManyToAnyAttribute" valueType="false" /></constructor><property name="Property" id="P:Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel.Property" access="Public" contract="Normal" type="System.Reflection.PropertyInfo" valueType="false" get="true" set="false" /><property name="HasManyToAnyAtt" id="P:Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel.HasManyToAnyAtt" access="Public" contract="Normal" type="Castle.ActiveRecord.HasManyToAnyAttribute" valueType="false" get="true" set="false" /><property name="Configuration" id="P:Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel.Configuration" access="Public" contract="Normal" type="Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel.Config" valueType="false" get="true" set="false" /><method name="Accept" id="M:Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel.Accept(Castle.ActiveRecord.Framework.Internal.IVisitor)" access="Public" contract="Final" returnType="System.Void" valueType="true"><parameter name="visitor" type="Castle.ActiveRecord.Framework.Internal.IVisitor" valueType="false" /><implements name="Accept" id="M:Castle.ActiveRecord.Framework.Internal.IVisitable.Accept(Castle.ActiveRecord.Framework.Internal.IVisitor)" interface="IVisitable" interfaceId="T:Castle.ActiveRecord.Framework.Internal.IVisitable" declaringType="Castle.ActiveRecord.Framework.Internal.IVisitable" /></method><method name="Finalize" id="M:Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="GetType" id="M:Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method></class><class name="HasManyToAnyModel.Config" id="T:Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel.Config" access="NestedPublic" declaringType="Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel"><documentation><summary> I need this class to pass special configuration for the many-to-any </summary></documentation><implements type="Castle.ActiveRecord.Framework.Internal.IModelNode" /><implements type="Castle.ActiveRecord.Framework.Internal.IVisitable" /><property name="Parent" id="P:Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel.Config.Parent" access="Public" contract="Normal" type="Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel" valueType="false" get="true" set="true" /><method name="Accept" id="M:Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel.Config.Accept(Castle.ActiveRecord.Framework.Internal.IVisitor)" access="Public" contract="Final" returnType="System.Void" valueType="true"><parameter name="visitor" type="Castle.ActiveRecord.Framework.Internal.IVisitor" valueType="false" /><implements name="Accept" id="M:Castle.ActiveRecord.Framework.Internal.IVisitable.Accept(Castle.ActiveRecord.Framework.Internal.IVisitor)" interface="IVisitable" interfaceId="T:Castle.ActiveRecord.Framework.Internal.IVisitable" declaringType="Castle.ActiveRecord.Framework.Internal.IVisitable" /></method><method name="Finalize" id="M:Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel.Config.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel.Config.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel.Config.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel.Config.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="GetType" id="M:Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel.Config.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel.Config.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method></class><class name="HiloModel" id="T:Castle.ActiveRecord.Framework.Internal.HiloModel" access="Public"><attribute name="System.SerializableAttribute" /><implements type="Castle.ActiveRecord.Framework.Internal.IModelNode" /><implements type="Castle.ActiveRecord.Framework.Internal.IVisitable" /><constructor name=".ctor" id="M:Castle.ActiveRecord.Framework.Internal.HiloModel.#ctor(System.Reflection.PropertyInfo,Castle.ActiveRecord.HiloAttribute)" access="Public" contract="Normal"><parameter name="propInfo" type="System.Reflection.PropertyInfo" valueType="false" /><parameter name="hiloAtt" type="Castle.ActiveRecord.HiloAttribute" valueType="false" /></constructor><property name="Property" id="P:Castle.ActiveRecord.Framework.Internal.HiloModel.Property" access="Public" contract="Normal" type="System.Reflection.PropertyInfo" valueType="false" get="true" set="false" /><property name="HiloAtt" id="P:Castle.ActiveRecord.Framework.Internal.HiloModel.HiloAtt" access="Public" contract="Normal" type="Castle.ActiveRecord.HiloAttribute" valueType="false" get="true" set="false" /><method name="Accept" id="M:Castle.ActiveRecord.Framework.Internal.HiloModel.Accept(Castle.ActiveRecord.Framework.Internal.IVisitor)" access="Public" contract="Final" returnType="System.Void" valueType="true"><parameter name="visitor" type="Castle.ActiveRecord.Framework.Internal.IVisitor" valueType="false" /><implements name="Accept" id="M:Castle.ActiveRecord.Framework.Internal.IVisitable.Accept(Castle.ActiveRecord.Framework.Internal.IVisitor)" interface="IVisitable" interfaceId="T:Castle.ActiveRecord.Framework.Internal.IVisitable" declaringType="Castle.ActiveRecord.Framework.Internal.IVisitable" /></method><method name="Finalize" id="M:Castle.ActiveRecord.Framework.Internal.HiloModel.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Castle.ActiveRecord.Framework.Internal.HiloModel.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Castle.ActiveRecord.Framework.Internal.HiloModel.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      </summary></documentation><parameter name="obj" type="System.Object" valueType="false" /></method><method name="ToString" id="M:Castle.ActiveRecord.Framework.Internal.HiloModel.ToString" access="Public" contract="Virtual" returnType="System.String" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method><method name="GetType" id="M:Castle.ActiveRecord.Framework.Internal.HiloModel.GetType" access="Public" contract="Normal" returnType="System.Type" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary></documentation></method><method name="MemberwiseClone" id="M:Castle.ActiveRecord.Framework.Internal.HiloModel.MemberwiseClone" access="Family" contract="Normal" returnType="System.Object" valueType="false" declaringType="System.Object"><documentation><summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary></documentation></method></class>
      
      <class name="ImportModel" id="T:Castle.ActiveRecord.Framework.Internal.ImportModel" access="Public"><implements type="Castle.ActiveRecord.Framework.Internal.IModelNode" /><implements type="Castle.ActiveRecord.Framework.Internal.IVisitable" /><constructor name=".ctor" id="M:Castle.ActiveRecord.Framework.Internal.ImportModel.#ctor(Castle.ActiveRecord.ImportAttribute)" access="Public" contract="Normal"><parameter name="att" type="Castle.ActiveRecord.ImportAttribute" valueType="false" /></constructor><property name="ImportAtt" id="P:Castle.ActiveRecord.Framework.Internal.ImportModel.ImportAtt" access="Public" contract="Normal" type="Castle.ActiveRecord.ImportAttribute" valueType="false" get="true" set="false" /><method name="Accept" id="M:Castle.ActiveRecord.Framework.Internal.ImportModel.Accept(Castle.ActiveRecord.Framework.Internal.IVisitor)" access="Public" contract="Final" returnType="System.Void" valueType="true"><parameter name="visitor" type="Castle.ActiveRecord.Framework.Internal.IVisitor" valueType="false" /><implements name="Accept" id="M:Castle.ActiveRecord.Framework.Internal.IVisitable.Accept(Castle.ActiveRecord.Framework.Internal.IVisitor)" interface="IVisitable" interfaceId="T:Castle.ActiveRecord.Framework.Internal.IVisitable" declaringType="Castle.ActiveRecord.Framework.Internal.IVisitable" /></method><method name="Finalize" id="M:Castle.ActiveRecord.Framework.Internal.ImportModel.Finalize" access="Family" contract="Override" returnType="System.Void" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" nolink="true" /> is reclaimed by garbage collection.</para>
      </summary></documentation></method><method name="GetHashCode" id="M:Castle.ActiveRecord.Framework.Internal.ImportModel.GetHashCode" access="Public" contract="Virtual" returnType="System.Int32" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary></documentation></method><method name="Equals" id="M:Castle.ActiveRecord.Framework.Internal.ImportModel.Equals(System.Object)" access="Public" contract="Virtual" returnType="System.Boolean" valueType="true" declaringType="System.Object"><documentation><summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" nolink="true" />.</para>
      
      
      <enumeration name="CreditCardValidator.CardType" id="T:Castle.ActiveRecord.Framework.Validators.CreditCardValidator.CardType" access="NestedPublic" declaringType="Castle.ActiveRecord.Framework.Validators.CreditCardValidator" flags="true"><attribute name="System.SerializableAttribute" /><field name="MasterCard" id="F:Castle.ActiveRecord.Framework.Validators.CreditCardValidator.CardType.MasterCard" access="Public" contract="Static" type="Castle.ActiveRecord.Framework.Validators.CreditCardValidator.CardType" valueType="true" literal="true" value="1" /><field name="VISA" id="F:Castle.ActiveRecord.Framework.Validators.CreditCardValidator.CardType.VISA" access="Public" contract="Static" type="Castle.ActiveRecord.Framework.Validators.CreditCardValidator.CardType" valueType="true" literal="true" value="2" /><field name="Amex" id="F:Castle.ActiveRecord.Framework.Validators.CreditCardValidator.CardType.Amex" access="Public" contract="Static" type="Castle.ActiveRecord.Framework.Validators.CreditCardValidator.CardType" valueType="true" literal="true" value="4" /><field name="DinersClub" id="F:Castle.ActiveRecord.Framework.Validators.CreditCardValidator.CardType.DinersClub" access="Public" contract="Static" type="Castle.ActiveRecord.Framework.Validators.CreditCardValidator.CardType" valueType="true" literal="true" value="8" /><field name="enRoute" id="F:Castle.ActiveRecord.Framework.Validators.CreditCardValidator.CardType.enRoute" access="Public" contract="Static" type="Castle.ActiveRecord.Framework.Validators.CreditCardValidator.CardType" valueType="true" literal="true" value="16" /><field name="Discover" id="F:Castle.ActiveRecord.Framework.Validators.CreditCardValidator.CardType.Discover" access="Public" contract="Static" type="Castle.ActiveRecord.Framework.Validators.CreditCardValidator.CardType" valueType="true" literal="true" value="32" /><field name="JCB" id="F:Castle.ActiveRecord.Framework.Validators.CreditCardValidator.CardType.JCB" access="Public" contract="Static" type="Castle.ActiveRecord.Framework.Validators.CreditCardValidator.CardType" valueType="true" literal="true" value="64" /><field name="Unknown" id="F:Castle.ActiveRecord.Framework.Validators.CreditCardValidator.CardType.Unknown" access="Public" contract="Static" type="Castle.ActiveRecord.Framework.Validators.CreditCardValidator.CardType" valueType="true" literal="true" value="128" /><field name="All" id="F:Castle.ActiveRecord.Framework.Validators.CreditCardValidator.CardType.All" access="Public" contract="Static" type="Castle.ActiveRecord.Framework.Validators.CreditCardValidator.CardType" valueType="true" literal="true" value="127" /></enumeration>
      
      </namespace></module></assembly></ndoc>